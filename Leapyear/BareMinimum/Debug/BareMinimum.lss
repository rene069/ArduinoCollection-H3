
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  00000632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a20  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb7  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  00003153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000924  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f8  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c1       	rjmp	.+550    	; 0x228 <__ctors_end>
   2:	00 00       	nop
   4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
   6:	00 00       	nop
   8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
   a:	00 00       	nop
   c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
   e:	00 00       	nop
  10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
  12:	00 00       	nop
  14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
  16:	00 00       	nop
  18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
  1e:	00 00       	nop
  20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
  22:	00 00       	nop
  24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
  26:	00 00       	nop
  28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
  2e:	00 00       	nop
  30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
  32:	00 00       	nop
  34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
  36:	00 00       	nop
  38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
  3e:	00 00       	nop
  40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
  42:	00 00       	nop
  44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
  46:	00 00       	nop
  48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
  4e:	00 00       	nop
  50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
  52:	00 00       	nop
  54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
  56:	00 00       	nop
  58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	13 c1       	rjmp	.+550    	; 0x284 <__vector_23>
  5e:	00 00       	nop
  60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
  62:	00 00       	nop
  64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
  66:	00 00       	nop
  68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
  6e:	00 00       	nop
  70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
  72:	00 00       	nop
  74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
  76:	00 00       	nop
  78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
  7e:	00 00       	nop
  80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
  82:	00 00       	nop
  84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
  86:	00 00       	nop
  88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
  8e:	00 00       	nop
  90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
  92:	00 00       	nop
  94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
  96:	00 00       	nop
  98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
  be:	00 00       	nop
  c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
  da:	00 00       	nop
  dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
  de:	00 00       	nop
  e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	08 02       	muls	r16, r24
  e6:	0b 02       	muls	r16, r27
  e8:	fa 01       	movw	r30, r20
  ea:	fe 01       	movw	r30, r28
  ec:	04 02       	muls	r16, r20
  ee:	42 02       	muls	r20, r18
  f0:	0f 02       	muls	r16, r31
  f2:	13 02       	muls	r17, r19
  f4:	19 02       	muls	r17, r25
  f6:	1d 02       	muls	r17, r29
  f8:	21 02       	muls	r18, r17
  fa:	27 02       	muls	r18, r23
  fc:	2b 02       	muls	r18, r27
  fe:	2f 02       	muls	r18, r31
 100:	42 02       	muls	r20, r18
 102:	35 02       	muls	r19, r21
 104:	39 02       	muls	r19, r25
 106:	3d 02       	muls	r19, r29

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
 1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
 1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
 1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
 20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_end>:
 228:	11 24       	eor	r1, r1
 22a:	1f be       	out	0x3f, r1	; 63
 22c:	cf ef       	ldi	r28, 0xFF	; 255
 22e:	d1 e2       	ldi	r29, 0x21	; 33
 230:	de bf       	out	0x3e, r29	; 62
 232:	cd bf       	out	0x3d, r28	; 61
 234:	00 e0       	ldi	r16, 0x00	; 0
 236:	0c bf       	out	0x3c, r16	; 60

00000238 <__do_clear_bss>:
 238:	22 e0       	ldi	r18, 0x02	; 2
 23a:	a0 e0       	ldi	r26, 0x00	; 0
 23c:	b2 e0       	ldi	r27, 0x02	; 2
 23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
 240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
 242:	a9 30       	cpi	r26, 0x09	; 9
 244:	b2 07       	cpc	r27, r18
 246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>
 248:	12 d0       	rcall	.+36     	; 0x26e <main>
 24a:	b7 c1       	rjmp	.+878    	; 0x5ba <_exit>

0000024c <__bad_interrupt>:
 24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <setup>:



void setup() {
	
	pinMode(2,OUTPUT);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	19 d1       	rcall	.+562    	; 0x486 <pinMode>
	pinMode(4,INPUT_PULLUP); //Input pullup to save a resistor
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	16 c1       	rjmp	.+556    	; 0x486 <pinMode>

0000025a <loop>:
}

void loop() {
	
	
	if (digitalRead(4))
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	7e d1       	rcall	.+764    	; 0x55a <digitalRead>
 25e:	89 2b       	or	r24, r25
 260:	11 f0       	breq	.+4      	; 0x266 <loop+0xc>
	{
		digitalWrite(2,LOW);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	01 c0       	rjmp	.+2      	; 0x268 <loop+0xe>
	}
	else{
		digitalWrite(2,HIGH);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	49 c1       	rjmp	.+658    	; 0x4fe <digitalWrite>

0000026c <initVariant>:
 26c:	08 95       	ret

0000026e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 26e:	54 d0       	rcall	.+168    	; 0x318 <init>

	initVariant();
 270:	fd df       	rcall	.-6      	; 0x26c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 272:	ed df       	rcall	.-38     	; 0x24e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 278:	f0 df       	rcall	.-32     	; 0x25a <loop>
 27a:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 27c:	e9 f3       	breq	.-6      	; 0x278 <main+0xa>
 27e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 282:	fa cf       	rjmp	.-12     	; 0x278 <main+0xa>

00000284 <__vector_23>:
 284:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <timer0_millis>
 29e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <timer0_millis+0x1>
 2a2:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <timer0_millis+0x2>
 2a6:	b0 91 04 02 	lds	r27, 0x0204	; 0x800204 <timer0_millis+0x3>
 2aa:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2ae:	23 e0       	ldi	r18, 0x03	; 3
 2b0:	23 0f       	add	r18, r19
 2b2:	2d 37       	cpi	r18, 0x7D	; 125
 2b4:	20 f4       	brcc	.+8      	; 0x2be <__vector_23+0x3a>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	a1 1d       	adc	r26, r1
 2ba:	b1 1d       	adc	r27, r1
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <__vector_23+0x44>
 2be:	26 e8       	ldi	r18, 0x86	; 134
 2c0:	23 0f       	add	r18, r19
 2c2:	02 96       	adiw	r24, 0x02	; 2
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
 2cc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <timer0_millis>
 2d0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <timer0_millis+0x1>
 2d4:	a0 93 03 02 	sts	0x0203, r26	; 0x800203 <timer0_millis+0x2>
 2d8:	b0 93 04 02 	sts	0x0204, r27	; 0x800204 <timer0_millis+0x3>
 2dc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <timer0_overflow_count>
 2e0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <timer0_overflow_count+0x1>
 2e4:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <timer0_overflow_count+0x2>
 2e8:	b0 91 08 02 	lds	r27, 0x0208	; 0x800208 <timer0_overflow_count+0x3>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
 2f2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <timer0_overflow_count>
 2f6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <timer0_overflow_count+0x1>
 2fa:	a0 93 07 02 	sts	0x0207, r26	; 0x800207 <timer0_overflow_count+0x2>
 2fe:	b0 93 08 02 	sts	0x0208, r27	; 0x800208 <timer0_overflow_count+0x3>
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 318:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 31a:	84 b5       	in	r24, 0x24	; 36
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 320:	84 b5       	in	r24, 0x24	; 36
 322:	81 60       	ori	r24, 0x01	; 1
 324:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 326:	85 b5       	in	r24, 0x25	; 37
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 32c:	85 b5       	in	r24, 0x25	; 37
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 332:	ee e6       	ldi	r30, 0x6E	; 110
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 33c:	e1 e8       	ldi	r30, 0x81	; 129
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 342:	80 81       	ld	r24, Z
 344:	82 60       	ori	r24, 0x02	; 2
 346:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 348:	80 81       	ld	r24, Z
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 34e:	e0 e8       	ldi	r30, 0x80	; 128
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	81 60       	ori	r24, 0x01	; 1
 356:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 358:	e1 eb       	ldi	r30, 0xB1	; 177
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	84 60       	ori	r24, 0x04	; 4
 360:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 362:	e0 eb       	ldi	r30, 0xB0	; 176
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 36c:	e1 e9       	ldi	r30, 0x91	; 145
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	82 60       	ori	r24, 0x02	; 2
 374:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 376:	80 81       	ld	r24, Z
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 37c:	e0 e9       	ldi	r30, 0x90	; 144
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 386:	e1 ea       	ldi	r30, 0xA1	; 161
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 390:	80 81       	ld	r24, Z
 392:	81 60       	ori	r24, 0x01	; 1
 394:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 396:	e0 ea       	ldi	r30, 0xA0	; 160
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 3a0:	e1 e2       	ldi	r30, 0x21	; 33
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	80 81       	ld	r24, Z
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 3aa:	80 81       	ld	r24, Z
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 3b0:	e0 e2       	ldi	r30, 0x20	; 32
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	80 81       	ld	r24, Z
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3ba:	ea e7       	ldi	r30, 0x7A	; 122
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	84 60       	ori	r24, 0x04	; 4
 3c2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 3c4:	80 81       	ld	r24, Z
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 3ca:	80 81       	ld	r24, Z
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3d0:	80 81       	ld	r24, Z
 3d2:	80 68       	ori	r24, 0x80	; 128
 3d4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3d6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 3da:	08 95       	ret

000003dc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	e2 31       	cpi	r30, 0x12	; 18
 3e4:	f1 05       	cpc	r31, r1
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <turnOffPWM+0xe>
 3e8:	4d c0       	rjmp	.+154    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 3ea:	88 27       	eor	r24, r24
 3ec:	ee 58       	subi	r30, 0x8E	; 142
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	db c0       	rjmp	.+438    	; 0x5aa <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 3f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 3f8:	8f 77       	andi	r24, 0x7F	; 127
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 400:	8f 7d       	andi	r24, 0xDF	; 223
 402:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 406:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 408:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 40c:	87 7f       	andi	r24, 0xF7	; 247
 40e:	f9 cf       	rjmp	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 410:	84 b5       	in	r24, 0x24	; 36
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 416:	84 b5       	in	r24, 0x24	; 36
 418:	8f 7d       	andi	r24, 0xDF	; 223
 41a:	84 bd       	out	0x24, r24	; 36
 41c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 41e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 422:	8f 77       	andi	r24, 0x7F	; 127
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 426:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 42a:	8f 7d       	andi	r24, 0xDF	; 223
 42c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 430:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 432:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 436:	8f 77       	andi	r24, 0x7F	; 127
 438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 43a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 43e:	8f 7d       	andi	r24, 0xDF	; 223
 440:	03 c0       	rjmp	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 442:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 446:	87 7f       	andi	r24, 0xF7	; 247
 448:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 44c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 44e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 452:	8f 77       	andi	r24, 0x7F	; 127
 454:	07 c0       	rjmp	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 456:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 45a:	8f 7d       	andi	r24, 0xDF	; 223
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 45e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 462:	87 7f       	andi	r24, 0xF7	; 247
 464:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 468:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 46a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 46e:	8f 77       	andi	r24, 0x7F	; 127
 470:	07 c0       	rjmp	.+14     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 472:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 476:	8f 7d       	andi	r24, 0xDF	; 223
 478:	03 c0       	rjmp	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 47a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 47e:	87 7f       	andi	r24, 0xF7	; 247
 480:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 484:	08 95       	ret

00000486 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	e2 5b       	subi	r30, 0xB2	; 178
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 494:	fc 01       	movw	r30, r24
 496:	ec 56       	subi	r30, 0x6C	; 108
 498:	fe 4f       	sbci	r31, 0xFE	; 254
 49a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 49c:	88 23       	and	r24, r24
 49e:	61 f1       	breq	.+88     	; 0x4f8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	fc 01       	movw	r30, r24
 4a8:	e2 5f       	subi	r30, 0xF2	; 242
 4aa:	fd 4f       	sbci	r31, 0xFD	; 253
 4ac:	c5 91       	lpm	r28, Z+
 4ae:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 4b0:	fc 01       	movw	r30, r24
 4b2:	ec 50       	subi	r30, 0x0C	; 12
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	a5 91       	lpm	r26, Z+
 4b8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 4ba:	61 11       	cpse	r22, r1
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 4be:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4c0:	f8 94       	cli
		*reg &= ~bit;
 4c2:	88 81       	ld	r24, Y
 4c4:	20 95       	com	r18
 4c6:	82 23       	and	r24, r18
 4c8:	88 83       	st	Y, r24
		*out &= ~bit;
 4ca:	ec 91       	ld	r30, X
 4cc:	2e 23       	and	r18, r30
 4ce:	0b c0       	rjmp	.+22     	; 0x4e6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 4d0:	62 30       	cpi	r22, 0x02	; 2
 4d2:	61 f4       	brne	.+24     	; 0x4ec <pinMode+0x66>
		uint8_t oldSREG = SREG;
 4d4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 4d6:	f8 94       	cli
		*reg &= ~bit;
 4d8:	88 81       	ld	r24, Y
 4da:	32 2f       	mov	r19, r18
 4dc:	30 95       	com	r19
 4de:	83 23       	and	r24, r19
 4e0:	88 83       	st	Y, r24
		*out |= bit;
 4e2:	ec 91       	ld	r30, X
 4e4:	2e 2b       	or	r18, r30
 4e6:	2c 93       	st	X, r18
		SREG = oldSREG;
 4e8:	9f bf       	out	0x3f, r25	; 63
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 4ec:	8f b7       	in	r24, 0x3f	; 63
                cli();
 4ee:	f8 94       	cli
		*reg |= bit;
 4f0:	e8 81       	ld	r30, Y
 4f2:	2e 2b       	or	r18, r30
 4f4:	28 83       	st	Y, r18
		SREG = oldSREG;
 4f6:	8f bf       	out	0x3f, r24	; 63
	}
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	e8 5f       	subi	r30, 0xF8	; 248
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 510:	f9 01       	movw	r30, r18
 512:	e2 5b       	subi	r30, 0xB2	; 178
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 518:	f9 01       	movw	r30, r18
 51a:	ec 56       	subi	r30, 0x6C	; 108
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 520:	cc 23       	and	r28, r28
 522:	b9 f0       	breq	.+46     	; 0x552 <digitalWrite+0x54>
 524:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 526:	81 11       	cpse	r24, r1
 528:	59 df       	rcall	.-334    	; 0x3dc <turnOffPWM>

	out = portOutputRegister(port);
 52a:	ec 2f       	mov	r30, r28
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ec 50       	subi	r30, 0x0C	; 12
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	a5 91       	lpm	r26, Z+
 538:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 53a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 53c:	f8 94       	cli

	if (val == LOW) {
 53e:	11 11       	cpse	r17, r1
 540:	04 c0       	rjmp	.+8      	; 0x54a <digitalWrite+0x4c>
		*out &= ~bit;
 542:	8c 91       	ld	r24, X
 544:	d0 95       	com	r29
 546:	d8 23       	and	r29, r24
 548:	02 c0       	rjmp	.+4      	; 0x54e <digitalWrite+0x50>
	} else {
		*out |= bit;
 54a:	ec 91       	ld	r30, X
 54c:	de 2b       	or	r29, r30
 54e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 550:	9f bf       	out	0x3f, r25	; 63
}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	08 95       	ret

0000055a <digitalRead>:

int digitalRead(uint8_t pin)
{
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	f9 01       	movw	r30, r18
 564:	e8 5f       	subi	r30, 0xF8	; 248
 566:	fe 4f       	sbci	r31, 0xFE	; 254
 568:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 56a:	f9 01       	movw	r30, r18
 56c:	e2 5b       	subi	r30, 0xB2	; 178
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 572:	f9 01       	movw	r30, r18
 574:	ec 56       	subi	r30, 0x6C	; 108
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 57a:	cc 23       	and	r28, r28
 57c:	89 f0       	breq	.+34     	; 0x5a0 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 57e:	81 11       	cpse	r24, r1
 580:	2d df       	rcall	.-422    	; 0x3dc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 582:	ec 2f       	mov	r30, r28
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	e6 52       	subi	r30, 0x26	; 38
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	a5 91       	lpm	r26, Z+
 590:	b4 91       	lpm	r27, Z
 592:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 594:	ed 23       	and	r30, r29
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	21 f4       	brne	.+8      	; 0x5a4 <digitalRead+0x4a>
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <digitalRead+0x4a>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <__tablejump2__>:
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	88 1f       	adc	r24, r24
 5b0:	8b bf       	out	0x3b, r24	; 59
 5b2:	07 90       	elpm	r0, Z+
 5b4:	f6 91       	elpm	r31, Z
 5b6:	e0 2d       	mov	r30, r0
 5b8:	19 94       	eijmp

000005ba <_exit>:
 5ba:	f8 94       	cli

000005bc <__stop_program>:
 5bc:	ff cf       	rjmp	.-2      	; 0x5bc <__stop_program>
