
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00001602  00001696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000146  00800228  00800228  000016be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000610  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dca3  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000263a  00000000  00000000  0000f9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032b1  00000000  00000000  0001201d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001674  00000000  00000000  000152d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002972  00000000  00000000  00016944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000782b  00000000  00000000  000192b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00020ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fc c0       	rjmp	.+504    	; 0x1fa <__dtors_end>
       2:	00 00       	nop
       4:	29 c1       	rjmp	.+594    	; 0x258 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c1       	rjmp	.+570    	; 0x258 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	11 c1       	rjmp	.+546    	; 0x258 <__bad_interrupt>
      36:	00 00       	nop
      38:	0f c1       	rjmp	.+542    	; 0x258 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0d c1       	rjmp	.+538    	; 0x258 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c1       	rjmp	.+534    	; 0x258 <__bad_interrupt>
      42:	00 00       	nop
      44:	4b c3       	rjmp	.+1686   	; 0x6dc <__vector_17>
      46:	00 00       	nop
      48:	07 c1       	rjmp	.+526    	; 0x258 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	05 c1       	rjmp	.+522    	; 0x258 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c1       	rjmp	.+518    	; 0x258 <__bad_interrupt>
      52:	00 00       	nop
      54:	01 c1       	rjmp	.+514    	; 0x258 <__bad_interrupt>
      56:	00 00       	nop
      58:	ff c0       	rjmp	.+510    	; 0x258 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c6       	rjmp	.+3338   	; 0xd68 <__vector_23>
      5e:	00 00       	nop
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	81 c5       	rjmp	.+2818   	; 0xb68 <__vector_25>
      66:	00 00       	nop
      68:	b5 c5       	rjmp	.+2922   	; 0xbd4 <__vector_26>
      6a:	00 00       	nop
      6c:	f5 c0       	rjmp	.+490    	; 0x258 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f3 c0       	rjmp	.+486    	; 0x258 <__bad_interrupt>
      72:	00 00       	nop
      74:	f1 c0       	rjmp	.+482    	; 0x258 <__bad_interrupt>
      76:	00 00       	nop
      78:	ef c0       	rjmp	.+478    	; 0x258 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c0       	rjmp	.+474    	; 0x258 <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c3       	rjmp	.+1736   	; 0x74a <__vector_32>
      82:	00 00       	nop
      84:	e9 c0       	rjmp	.+466    	; 0x258 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c0       	rjmp	.+462    	; 0x258 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c0       	rjmp	.+458    	; 0x258 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e3 c0       	rjmp	.+454    	; 0x258 <__bad_interrupt>
      92:	00 00       	nop
      94:	e1 c0       	rjmp	.+450    	; 0x258 <__bad_interrupt>
      96:	00 00       	nop
      98:	df c0       	rjmp	.+446    	; 0x258 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dd c0       	rjmp	.+442    	; 0x258 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	db c0       	rjmp	.+438    	; 0x258 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c0       	rjmp	.+434    	; 0x258 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	87 c3       	rjmp	.+1806   	; 0x7b8 <__vector_42>
      aa:	00 00       	nop
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c0       	rjmp	.+422    	; 0x258 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c0       	rjmp	.+414    	; 0x258 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b4 c3       	rjmp	.+1896   	; 0x826 <__vector_47>
      be:	00 00       	nop
      c0:	cb c0       	rjmp	.+406    	; 0x258 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c9 c0       	rjmp	.+402    	; 0x258 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c7 c0       	rjmp	.+398    	; 0x258 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c5 c0       	rjmp	.+394    	; 0x258 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c3 c0       	rjmp	.+390    	; 0x258 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c1 c0       	rjmp	.+386    	; 0x258 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bf c0       	rjmp	.+382    	; 0x258 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bd c0       	rjmp	.+378    	; 0x258 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bb c0       	rjmp	.+374    	; 0x258 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7a 07       	cpc	r23, r26
      e6:	7d 07       	cpc	r23, r29
      e8:	6c 07       	cpc	r22, r28
      ea:	70 07       	cpc	r23, r16
      ec:	76 07       	cpc	r23, r22
      ee:	b4 07       	cpc	r27, r20
      f0:	81 07       	cpc	r24, r17
      f2:	85 07       	cpc	r24, r21
      f4:	8b 07       	cpc	r24, r27
      f6:	8f 07       	cpc	r24, r31
      f8:	93 07       	cpc	r25, r19
      fa:	99 07       	cpc	r25, r25
      fc:	9d 07       	cpc	r25, r29
      fe:	a1 07       	cpc	r26, r17
     100:	b4 07       	cpc	r27, r20
     102:	a7 07       	cpc	r26, r23
     104:	ab 07       	cpc	r26, r27
     106:	af 07       	cpc	r26, r31

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <__ctors_start>:
     1f4:	da 01       	movw	r26, r20
     1f6:	1c 06       	cpc	r1, r28

000001f8 <__ctors_end>:
     1f8:	e6 01       	movw	r28, r12

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	d1 e2       	ldi	r29, 0x21	; 33
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61
     206:	00 e0       	ldi	r16, 0x00	; 0
     208:	0c bf       	out	0x3c, r16	; 60

0000020a <__do_copy_data>:
     20a:	12 e0       	ldi	r17, 0x02	; 2
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b2 e0       	ldi	r27, 0x02	; 2
     210:	e2 e0       	ldi	r30, 0x02	; 2
     212:	f6 e1       	ldi	r31, 0x16	; 22
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	0b bf       	out	0x3b, r16	; 59
     218:	02 c0       	rjmp	.+4      	; 0x21e <__do_copy_data+0x14>
     21a:	07 90       	elpm	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	a8 32       	cpi	r26, 0x28	; 40
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <__do_copy_data+0x10>

00000224 <__do_clear_bss>:
     224:	23 e0       	ldi	r18, 0x03	; 3
     226:	a8 e2       	ldi	r26, 0x28	; 40
     228:	b2 e0       	ldi	r27, 0x02	; 2
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	ae 36       	cpi	r26, 0x6E	; 110
     230:	b2 07       	cpc	r27, r18
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>

00000234 <__do_global_ctors>:
     234:	10 e0       	ldi	r17, 0x00	; 0
     236:	cc ef       	ldi	r28, 0xFC	; 252
     238:	d0 e0       	ldi	r29, 0x00	; 0
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	05 c0       	rjmp	.+10     	; 0x248 <__do_global_ctors+0x14>
     23e:	21 97       	sbiw	r28, 0x01	; 1
     240:	01 09       	sbc	r16, r1
     242:	80 2f       	mov	r24, r16
     244:	fe 01       	movw	r30, r28
     246:	b3 d7       	rcall	.+3942   	; 0x11ae <__tablejump2__>
     248:	ca 3f       	cpi	r28, 0xFA	; 250
     24a:	d1 07       	cpc	r29, r17
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	08 07       	cpc	r16, r24
     250:	b1 f7       	brne	.-20     	; 0x23e <__do_global_ctors+0xa>
     252:	20 d5       	rcall	.+2624   	; 0xc94 <main>
     254:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__do_global_dtors>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <_ZN6StringpLEc>:

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	00 d0       	rcall	.+0      	; 0x260 <_ZN6StringpLEc+0x6>
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	6b 83       	std	Y+3, r22	; 0x03
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	6b 81       	ldd	r22, Y+3	; 0x03
     270:	69 d7       	rcall	.+3794   	; 0x1144 <_ZN6String6concatEc>
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	00 d0       	rcall	.+0      	; 0x288 <_ZN14HardwareSerial5beginEm+0x6>
     288:	00 d0       	rcall	.+0      	; 0x28a <_ZN14HardwareSerial5beginEm+0x8>
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	4b 83       	std	Y+3, r20	; 0x03
     294:	5c 83       	std	Y+4, r21	; 0x04
     296:	6d 83       	std	Y+5, r22	; 0x05
     298:	7e 83       	std	Y+6, r23	; 0x06
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	ad 81       	ldd	r26, Y+5	; 0x05
     2a0:	be 81       	ldd	r27, Y+6	; 0x06
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	fa 81       	ldd	r31, Y+2	; 0x02
     2a6:	26 e0       	ldi	r18, 0x06	; 6
     2a8:	ac 01       	movw	r20, r24
     2aa:	bd 01       	movw	r22, r26
     2ac:	cf 01       	movw	r24, r30
     2ae:	f9 d3       	rcall	.+2034   	; 0xaa2 <_ZN14HardwareSerial5beginEmh>
     2b0:	00 00       	nop
     2b2:	26 96       	adiw	r28, 0x06	; 6
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <setup>:

String inputString = "";
bool stringcomplete = false;

void setup()
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
	Serial.begin(9600);
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	55 e2       	ldi	r21, 0x25	; 37
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	84 ec       	ldi	r24, 0xC4	; 196
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	d4 df       	rcall	.-88     	; 0x282 <_ZN14HardwareSerial5beginEm>
	inputString.reserve(200);
     2da:	68 ec       	ldi	r22, 0xC8	; 200
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	88 e2       	ldi	r24, 0x28	; 40
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	a2 d6       	rcall	.+3396   	; 0x1028 <_ZN6String7reserveEj>
}
     2e4:	00 00       	nop
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <loop>:

void loop()
{
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	if(stringcomplete){
     2f4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <stringcomplete>
     2f8:	88 23       	and	r24, r24
     2fa:	61 f0       	breq	.+24     	; 0x314 <loop+0x28>
		Serial.println(inputString);
     2fc:	68 e2       	ldi	r22, 0x28	; 40
     2fe:	72 e0       	ldi	r23, 0x02	; 2
     300:	84 ec       	ldi	r24, 0xC4	; 196
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	21 d5       	rcall	.+2626   	; 0xd48 <_ZN5Print7printlnERK6String>
		inputString = "";
     306:	66 e0       	ldi	r22, 0x06	; 6
     308:	72 e0       	ldi	r23, 0x02	; 2
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	d9 d6       	rcall	.+3506   	; 0x10c2 <_ZN6StringaSEPKc>
		stringcomplete = false;
     310:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <stringcomplete>
	}
}
     314:	00 00       	nop
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_Z11serialEventv>:

void serialEvent()
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
	while(Serial.available())
     326:	84 ec       	ldi	r24, 0xC4	; 196
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	b4 d2       	rcall	.+1384   	; 0x894 <_ZN14HardwareSerial9availableEv>
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	89 2b       	or	r24, r25
     330:	09 f4       	brne	.+2      	; 0x334 <_Z11serialEventv+0x18>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	22 23       	and	r18, r18
     336:	79 f0       	breq	.+30     	; 0x356 <_Z11serialEventv+0x3a>
	{
		char inChar = (char)Serial.read();
     338:	84 ec       	ldi	r24, 0xC4	; 196
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	c5 d2       	rcall	.+1418   	; 0x8c8 <_ZN14HardwareSerial4readEv>
     33e:	89 83       	std	Y+1, r24	; 0x01
		inputString += inChar;
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	88 e2       	ldi	r24, 0x28	; 40
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	89 df       	rcall	.-238    	; 0x25a <_ZN6StringpLEc>
		
		if (inChar == '\n')
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	8a 30       	cpi	r24, 0x0A	; 10
     34c:	61 f7       	brne	.-40     	; 0x326 <_Z11serialEventv+0xa>
		{
			stringcomplete = true;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <stringcomplete>
	}
}

void serialEvent()
{
	while(Serial.available())
     354:	e8 cf       	rjmp	.-48     	; 0x326 <_Z11serialEventv+0xa>
		if (inChar == '\n')
		{
			stringcomplete = true;
		}
	}
}
     356:	00 00       	nop
     358:	0f 90       	pop	r0
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <_Z41__static_initialization_and_destruction_0ii>:
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	00 d0       	rcall	.+0      	; 0x366 <_Z41__static_initialization_and_destruction_0ii+0x6>
     366:	1f 92       	push	r1
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	9a 83       	std	Y+2, r25	; 0x02
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	7c 83       	std	Y+4, r23	; 0x04
     372:	6b 83       	std	Y+3, r22	; 0x03
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	49 f4       	brne	.+18     	; 0x38e <_Z41__static_initialization_and_destruction_0ii+0x2e>
     37c:	8b 81       	ldd	r24, Y+3	; 0x03
     37e:	9c 81       	ldd	r25, Y+4	; 0x04
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	29 f4       	brne	.+10     	; 0x38e <_Z41__static_initialization_and_destruction_0ii+0x2e>
#include <Arduino.h>

String inputString = "";
     384:	66 e0       	ldi	r22, 0x06	; 6
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	88 e2       	ldi	r24, 0x28	; 40
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	86 d6       	rcall	.+3340   	; 0x109a <_ZN6StringC1EPKc>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	89 2b       	or	r24, r25
     394:	39 f4       	brne	.+14     	; 0x3a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	19 f4       	brne	.+6      	; 0x3a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
     39e:	88 e2       	ldi	r24, 0x28	; 40
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	11 d6       	rcall	.+3106   	; 0xfc6 <_ZN6StringD1Ev>
		if (inChar == '\n')
		{
			stringcomplete = true;
		}
	}
}
     3a4:	00 00       	nop
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <_GLOBAL__sub_I_inputString>:
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	6f ef       	ldi	r22, 0xFF	; 255
     3be:	7f ef       	ldi	r23, 0xFF	; 255
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	cd df       	rcall	.-102    	; 0x360 <_Z41__static_initialization_and_destruction_0ii>
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <_GLOBAL__sub_D_inputString>:
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	6f ef       	ldi	r22, 0xFF	; 255
     3d6:	7f ef       	ldi	r23, 0xFF	; 255
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	c1 df       	rcall	.-126    	; 0x360 <_Z41__static_initialization_and_destruction_0ii>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in us for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
     3ea:	1f 92       	push	r1
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	7b 83       	std	Y+3, r23	; 0x03
     3f6:	6a 83       	std	Y+2, r22	; 0x02
     3f8:	5d 83       	std	Y+5, r21	; 0x05
     3fa:	4c 83       	std	Y+4, r20	; 0x04
  if( Channel[timer] < 0 )
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	81 54       	subi	r24, 0x41	; 65
     404:	9d 4f       	sbci	r25, 0xFD	; 253
     406:	fc 01       	movw	r30, r24
     408:	80 81       	ld	r24, Z
     40a:	88 1f       	adc	r24, r24
     40c:	88 27       	eor	r24, r24
     40e:	88 1f       	adc	r24, r24
     410:	88 23       	and	r24, r24
     412:	31 f0       	breq	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	11 82       	std	Z+1, r1	; 0x01
     41c:	10 82       	st	Z, r1
     41e:	71 c0       	rjmp	.+226    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	c9 01       	movw	r24, r18
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	82 0f       	add	r24, r18
     42e:	93 1f       	adc	r25, r19
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	9c 01       	movw	r18, r24
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	81 54       	subi	r24, 0x41	; 65
     442:	9d 4f       	sbci	r25, 0xFD	; 253
     444:	fc 01       	movw	r30, r24
     446:	80 81       	ld	r24, Z
     448:	08 2e       	mov	r0, r24
     44a:	00 0c       	add	r0, r0
     44c:	99 0b       	sbc	r25, r25
     44e:	28 0f       	add	r18, r24
     450:	39 1f       	adc	r19, r25
     452:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ServoCount>
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	4c f5       	brge	.+82     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	28 2f       	mov	r18, r24
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	c9 01       	movw	r24, r18
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	9c 01       	movw	r18, r24
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	81 54       	subi	r24, 0x41	; 65
     482:	9d 4f       	sbci	r25, 0xFD	; 253
     484:	fc 01       	movw	r30, r24
     486:	80 81       	ld	r24, Z
     488:	08 2e       	mov	r0, r24
     48a:	00 0c       	add	r0, r0
     48c:	99 0b       	sbc	r25, r25
     48e:	28 0f       	add	r18, r24
     490:	39 1f       	adc	r19, r25
     492:	c9 01       	movw	r24, r18
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	81 5d       	subi	r24, 0xD1	; 209
     49e:	9d 4f       	sbci	r25, 0xFD	; 253
     4a0:	fc 01       	movw	r30, r24
     4a2:	80 81       	ld	r24, Z
     4a4:	86 fb       	bst	r24, 6
     4a6:	88 27       	eor	r24, r24
     4a8:	80 f9       	bld	r24, 0
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	88 23       	and	r24, r24
     4b6:	29 f1       	breq	.+74     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	c9 01       	movw	r24, r18
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	82 0f       	add	r24, r18
     4c6:	93 1f       	adc	r25, r19
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	9c 01       	movw	r18, r24
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	81 54       	subi	r24, 0x41	; 65
     4da:	9d 4f       	sbci	r25, 0xFD	; 253
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	08 2e       	mov	r0, r24
     4e2:	00 0c       	add	r0, r0
     4e4:	99 0b       	sbc	r25, r25
     4e6:	28 0f       	add	r18, r24
     4e8:	39 1f       	adc	r19, r25
     4ea:	c9 01       	movw	r24, r18
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	82 0f       	add	r24, r18
     4f2:	93 1f       	adc	r25, r19
     4f4:	81 5d       	subi	r24, 0xD1	; 209
     4f6:	9d 4f       	sbci	r25, 0xFD	; 253
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	8f 73       	andi	r24, 0x3F	; 63
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	34 d5       	rcall	.+2664   	; 0xf6a <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9c 01       	movw	r18, r24
     50a:	21 54       	subi	r18, 0x41	; 65
     50c:	3d 4f       	sbci	r19, 0xFD	; 253
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	81 54       	subi	r24, 0x41	; 65
     516:	9d 4f       	sbci	r25, 0xFD	; 253
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	c9 01       	movw	r24, r18
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	9c 01       	movw	r18, r24
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	81 54       	subi	r24, 0x41	; 65
     53e:	9d 4f       	sbci	r25, 0xFD	; 253
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	08 2e       	mov	r0, r24
     546:	00 0c       	add	r0, r0
     548:	99 0b       	sbc	r25, r25
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <ServoCount>
     552:	88 2f       	mov	r24, r24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	28 17       	cp	r18, r24
     558:	39 07       	cpc	r19, r25
     55a:	5c f4       	brge	.+22     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	81 54       	subi	r24, 0x41	; 65
     564:	9d 4f       	sbci	r25, 0xFD	; 253
     566:	fc 01       	movw	r30, r24
     568:	80 81       	ld	r24, Z
     56a:	8c 30       	cpi	r24, 0x0C	; 12
     56c:	14 f4       	brge	.+4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	01 c0       	rjmp	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	88 23       	and	r24, r24
     576:	09 f4       	brne	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	7e c0       	rjmp	.+252    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	fc 01       	movw	r30, r24
     580:	40 81       	ld	r20, Z
     582:	51 81       	ldd	r21, Z+1	; 0x01
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	28 2f       	mov	r18, r24
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	c9 01       	movw	r24, r18
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	9c 01       	movw	r18, r24
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	81 54       	subi	r24, 0x41	; 65
     5a6:	9d 4f       	sbci	r25, 0xFD	; 253
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	08 2e       	mov	r0, r24
     5ae:	00 0c       	add	r0, r0
     5b0:	99 0b       	sbc	r25, r25
     5b2:	28 0f       	add	r18, r24
     5b4:	39 1f       	adc	r19, r25
     5b6:	c9 01       	movw	r24, r18
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	80 5d       	subi	r24, 0xD0	; 208
     5c2:	9d 4f       	sbci	r25, 0xFD	; 253
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	9a 01       	movw	r18, r20
     5cc:	28 0f       	add	r18, r24
     5ce:	39 1f       	adc	r19, r25
     5d0:	8c 81       	ldd	r24, Y+4	; 0x04
     5d2:	9d 81       	ldd	r25, Y+5	; 0x05
     5d4:	fc 01       	movw	r30, r24
     5d6:	31 83       	std	Z+1, r19	; 0x01
     5d8:	20 83       	st	Z, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	28 2f       	mov	r18, r24
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	c9 01       	movw	r24, r18
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	9c 01       	movw	r18, r24
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	81 54       	subi	r24, 0x41	; 65
     5fc:	9d 4f       	sbci	r25, 0xFD	; 253
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	08 2e       	mov	r0, r24
     604:	00 0c       	add	r0, r0
     606:	99 0b       	sbc	r25, r25
     608:	28 0f       	add	r18, r24
     60a:	39 1f       	adc	r19, r25
     60c:	c9 01       	movw	r24, r18
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	81 5d       	subi	r24, 0xD1	; 209
     618:	9d 4f       	sbci	r25, 0xFD	; 253
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	86 fb       	bst	r24, 6
     620:	88 27       	eor	r24, r24
     622:	80 f9       	bld	r24, 0
     624:	88 23       	and	r24, r24
     626:	09 f4       	brne	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     628:	50 c0       	rjmp	.+160    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	c9 01       	movw	r24, r18
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	9c 01       	movw	r18, r24
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	81 54       	subi	r24, 0x41	; 65
     64c:	9d 4f       	sbci	r25, 0xFD	; 253
     64e:	fc 01       	movw	r30, r24
     650:	80 81       	ld	r24, Z
     652:	08 2e       	mov	r0, r24
     654:	00 0c       	add	r0, r0
     656:	99 0b       	sbc	r25, r25
     658:	28 0f       	add	r18, r24
     65a:	39 1f       	adc	r19, r25
     65c:	c9 01       	movw	r24, r18
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	81 5d       	subi	r24, 0xD1	; 209
     668:	9d 4f       	sbci	r25, 0xFD	; 253
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	8f 73       	andi	r24, 0x3F	; 63
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	7b d4       	rcall	.+2294   	; 0xf6a <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     674:	2a c0       	rjmp	.+84     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	9b 81       	ldd	r25, Y+3	; 0x03
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	04 96       	adiw	r24, 0x04	; 4
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	80 34       	cpi	r24, 0x40	; 64
     686:	9c 49       	sbci	r25, 0x9C	; 156
     688:	08 f0       	brcs	.+2      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	22 23       	and	r18, r18
     68e:	41 f0       	breq	.+16     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	20 e4       	ldi	r18, 0x40	; 64
     696:	3c e9       	ldi	r19, 0x9C	; 156
     698:	fc 01       	movw	r30, r24
     69a:	31 83       	std	Z+1, r19	; 0x01
     69c:	20 83       	st	Z, r18
     69e:	0d c0       	rjmp	.+26     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	9c 01       	movw	r18, r24
     6ac:	2c 5f       	subi	r18, 0xFC	; 252
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	8c 81       	ldd	r24, Y+4	; 0x04
     6b2:	9d 81       	ldd	r25, Y+5	; 0x05
     6b4:	fc 01       	movw	r30, r24
     6b6:	31 83       	std	Z+1, r19	; 0x01
     6b8:	20 83       	st	Z, r18
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	81 54       	subi	r24, 0x41	; 65
     6c2:	9d 4f       	sbci	r25, 0xFD	; 253
     6c4:	2f ef       	ldi	r18, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
  }
}
     6ca:	00 00       	nop
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     6ec:	0f 92       	push	r0
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
     70e:	48 e8       	ldi	r20, 0x88	; 136
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	64 e8       	ldi	r22, 0x84	; 132
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	65 de       	rcall	.-822    	; 0x3e4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     71a:	00 00       	nop
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     73e:	0f 90       	pop	r0
     740:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     75a:	0f 92       	push	r0
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
     77c:	48 e9       	ldi	r20, 0x98	; 152
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	64 e9       	ldi	r22, 0x94	; 148
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	2e de       	rcall	.-932    	; 0x3e4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     788:	00 00       	nop
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	7f 91       	pop	r23
     79c:	6f 91       	pop	r22
     79e:	5f 91       	pop	r21
     7a0:	4f 91       	pop	r20
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7ac:	0f 90       	pop	r0
     7ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7c8:	0f 92       	push	r0
     7ca:	2f 93       	push	r18
     7cc:	3f 93       	push	r19
     7ce:	4f 93       	push	r20
     7d0:	5f 93       	push	r21
     7d2:	6f 93       	push	r22
     7d4:	7f 93       	push	r23
     7d6:	8f 93       	push	r24
     7d8:	9f 93       	push	r25
     7da:	af 93       	push	r26
     7dc:	bf 93       	push	r27
     7de:	ef 93       	push	r30
     7e0:	ff 93       	push	r31
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
     7ea:	48 ea       	ldi	r20, 0xA8	; 168
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	64 ea       	ldi	r22, 0xA4	; 164
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	f7 dd       	rcall	.-1042   	; 0x3e4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     7f6:	00 00       	nop
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     81a:	0f 90       	pop	r0
     81c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     82e:	0f 92       	push	r0
     830:	11 24       	eor	r1, r1
     832:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     836:	0f 92       	push	r0
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
     858:	48 e2       	ldi	r20, 0x28	; 40
     85a:	51 e0       	ldi	r21, 0x01	; 1
     85c:	64 e2       	ldi	r22, 0x24	; 36
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	c0 dd       	rcall	.-1152   	; 0x3e4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     864:	00 00       	nop
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     888:	0f 90       	pop	r0
     88a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     894:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     896:	91 8d       	ldd	r25, Z+25	; 0x19
     898:	22 8d       	ldd	r18, Z+26	; 0x1a
     89a:	89 2f       	mov	r24, r25
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	80 5c       	subi	r24, 0xC0	; 192
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	82 1b       	sub	r24, r18
     8a4:	91 09       	sbc	r25, r1
}
     8a6:	8f 73       	andi	r24, 0x3F	; 63
     8a8:	99 27       	eor	r25, r25
     8aa:	08 95       	ret

000008ac <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8ac:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8ae:	91 8d       	ldd	r25, Z+25	; 0x19
     8b0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b2:	98 17       	cp	r25, r24
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8b6:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b8:	e8 0f       	add	r30, r24
     8ba:	f1 1d       	adc	r31, r1
     8bc:	85 8d       	ldd	r24, Z+29	; 0x1d
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     8c6:	08 95       	ret

000008c8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     8c8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     8ca:	91 8d       	ldd	r25, Z+25	; 0x19
     8cc:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ce:	98 17       	cp	r25, r24
     8d0:	61 f0       	breq	.+24     	; 0x8ea <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     8d2:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d4:	df 01       	movw	r26, r30
     8d6:	a8 0f       	add	r26, r24
     8d8:	b1 1d       	adc	r27, r1
     8da:	5d 96       	adiw	r26, 0x1d	; 29
     8dc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     8de:	92 8d       	ldd	r25, Z+26	; 0x1a
     8e0:	9f 5f       	subi	r25, 0xFF	; 255
     8e2:	9f 73       	andi	r25, 0x3F	; 63
     8e4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     8ee:	08 95       	ret

000008f0 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     8f0:	fc 01       	movw	r30, r24
     8f2:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     8f4:	44 8d       	ldd	r20, Z+28	; 0x1c
     8f6:	25 2f       	mov	r18, r21
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	84 2f       	mov	r24, r20
     8fc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     8fe:	82 1b       	sub	r24, r18
     900:	93 0b       	sbc	r25, r19
     902:	54 17       	cp	r21, r20
     904:	10 f0       	brcs	.+4      	; 0x90a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     906:	cf 96       	adiw	r24, 0x3f	; 63
     908:	08 95       	ret
  return tail - head - 1;
     90a:	01 97       	sbiw	r24, 0x01	; 1
}
     90c:	08 95       	ret

0000090e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     90e:	83 e1       	ldi	r24, 0x13	; 19
     910:	96 e0       	ldi	r25, 0x06	; 6
     912:	89 2b       	or	r24, r25
     914:	39 f0       	breq	.+14     	; 0x924 <_Z14serialEventRunv+0x16>
     916:	8e e8       	ldi	r24, 0x8E	; 142
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	89 2b       	or	r24, r25
     91c:	19 f0       	breq	.+6      	; 0x924 <_Z14serialEventRunv+0x16>
     91e:	83 d1       	rcall	.+774    	; 0xc26 <_Z17Serial0_availablev>
     920:	81 11       	cpse	r24, r1
     922:	25 c0       	rjmp	.+74     	; 0x96e <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	89 2b       	or	r24, r25
     92a:	41 f0       	breq	.+16     	; 0x93c <_Z14serialEventRunv+0x2e>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	89 2b       	or	r24, r25
     932:	21 f0       	breq	.+8      	; 0x93c <_Z14serialEventRunv+0x2e>
     934:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     938:	81 11       	cpse	r24, r1
     93a:	1b c0       	rjmp	.+54     	; 0x972 <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	89 2b       	or	r24, r25
     942:	41 f0       	breq	.+16     	; 0x954 <_Z14serialEventRunv+0x46>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	89 2b       	or	r24, r25
     94a:	21 f0       	breq	.+8      	; 0x954 <_Z14serialEventRunv+0x46>
     94c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     950:	81 11       	cpse	r24, r1
     952:	12 c0       	rjmp	.+36     	; 0x978 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	89 2b       	or	r24, r25
     95a:	99 f0       	breq	.+38     	; 0x982 <_Z14serialEventRunv+0x74>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	89 2b       	or	r24, r25
     962:	79 f0       	breq	.+30     	; 0x982 <_Z14serialEventRunv+0x74>
     964:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     968:	81 11       	cpse	r24, r1
     96a:	09 c0       	rjmp	.+18     	; 0x97e <_Z14serialEventRunv+0x70>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     96c:	08 95       	ret
     96e:	d6 dc       	rcall	.-1620   	; 0x31c <_Z11serialEventv>
     970:	d9 cf       	rjmp	.-78     	; 0x924 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     972:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     976:	e2 cf       	rjmp	.-60     	; 0x93c <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     978:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     97c:	eb cf       	rjmp	.-42     	; 0x954 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     97e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     982:	08 95       	ret

00000984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     984:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     986:	84 8d       	ldd	r24, Z+28	; 0x1c
     988:	df 01       	movw	r26, r30
     98a:	a8 0f       	add	r26, r24
     98c:	b1 1d       	adc	r27, r1
     98e:	a3 5a       	subi	r26, 0xA3	; 163
     990:	bf 4f       	sbci	r27, 0xFF	; 255
     992:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     994:	84 8d       	ldd	r24, Z+28	; 0x1c
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	8f 73       	andi	r24, 0x3F	; 63
     99c:	99 27       	eor	r25, r25
     99e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9a0:	a6 89       	ldd	r26, Z+22	; 0x16
     9a2:	b7 89       	ldd	r27, Z+23	; 0x17
     9a4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9a6:	a0 89       	ldd	r26, Z+16	; 0x10
     9a8:	b1 89       	ldd	r27, Z+17	; 0x11
     9aa:	8c 91       	ld	r24, X
     9ac:	83 70       	andi	r24, 0x03	; 3
     9ae:	80 64       	ori	r24, 0x40	; 64
     9b0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     9b2:	93 8d       	ldd	r25, Z+27	; 0x1b
     9b4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b6:	98 13       	cpse	r25, r24
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9ba:	02 88       	ldd	r0, Z+18	; 0x12
     9bc:	f3 89       	ldd	r31, Z+19	; 0x13
     9be:	e0 2d       	mov	r30, r0
     9c0:	80 81       	ld	r24, Z
     9c2:	8f 7d       	andi	r24, 0xDF	; 223
     9c4:	80 83       	st	Z, r24
     9c6:	08 95       	ret

000009c8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
  _written = true;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9da:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9de:	98 13       	cpse	r25, r24
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <_ZN14HardwareSerial5writeEh+0x24>
     9e2:	e8 89       	ldd	r30, Y+16	; 0x10
     9e4:	f9 89       	ldd	r31, Y+17	; 0x11
     9e6:	80 81       	ld	r24, Z
     9e8:	85 fd       	sbrc	r24, 5
     9ea:	25 c0       	rjmp	.+74     	; 0xa36 <_ZN14HardwareSerial5writeEh+0x6e>
     9ec:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9ee:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	0f 73       	andi	r16, 0x3F	; 63
     9f8:	11 27       	eor	r17, r17
     9fa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fe:	e8 12       	cpse	r14, r24
     a00:	0b c0       	rjmp	.+22     	; 0xa18 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	07 fc       	sbrc	r0, 7
     a06:	fa cf       	rjmp	.-12     	; 0x9fc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a08:	e8 89       	ldd	r30, Y+16	; 0x10
     a0a:	f9 89       	ldd	r31, Y+17	; 0x11
     a0c:	80 81       	ld	r24, Z
     a0e:	85 ff       	sbrs	r24, 5
     a10:	f5 cf       	rjmp	.-22     	; 0x9fc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a12:	ce 01       	movw	r24, r28
     a14:	b7 df       	rcall	.-146    	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a16:	f2 cf       	rjmp	.-28     	; 0x9fc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a1a:	fe 01       	movw	r30, r28
     a1c:	e8 0f       	add	r30, r24
     a1e:	f1 1d       	adc	r31, r1
     a20:	e3 5a       	subi	r30, 0xA3	; 163
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a26:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a28:	f8 94       	cli
    _tx_buffer_head = i;
     a2a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a2c:	ea 89       	ldd	r30, Y+18	; 0x12
     a2e:	fb 89       	ldd	r31, Y+19	; 0x13
     a30:	80 81       	ld	r24, Z
     a32:	80 62       	ori	r24, 0x20	; 32
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a36:	9f b7       	in	r25, 0x3f	; 63
     a38:	f8 94       	cli
      *_udr = c;
     a3a:	ee 89       	ldd	r30, Y+22	; 0x16
     a3c:	ff 89       	ldd	r31, Y+23	; 0x17
     a3e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a40:	e8 89       	ldd	r30, Y+16	; 0x10
     a42:	f9 89       	ldd	r31, Y+17	; 0x11
     a44:	80 81       	ld	r24, Z
     a46:	83 70       	andi	r24, 0x03	; 3
     a48:	80 64       	ori	r24, 0x40	; 64
     a4a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a66:	88 8d       	ldd	r24, Y+24	; 0x18
     a68:	88 23       	and	r24, r24
     a6a:	c1 f0       	breq	.+48     	; 0xa9c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a6c:	ea 89       	ldd	r30, Y+18	; 0x12
     a6e:	fb 89       	ldd	r31, Y+19	; 0x13
     a70:	80 81       	ld	r24, Z
     a72:	85 fd       	sbrc	r24, 5
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <_ZN14HardwareSerial5flushEv+0x20>
     a76:	a8 89       	ldd	r26, Y+16	; 0x10
     a78:	b9 89       	ldd	r27, Y+17	; 0x11
     a7a:	8c 91       	ld	r24, X
     a7c:	86 fd       	sbrc	r24, 6
     a7e:	0e c0       	rjmp	.+28     	; 0xa9c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	07 fc       	sbrc	r0, 7
     a84:	f5 cf       	rjmp	.-22     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
     a86:	80 81       	ld	r24, Z
     a88:	85 ff       	sbrs	r24, 5
     a8a:	f2 cf       	rjmp	.-28     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a8c:	a8 89       	ldd	r26, Y+16	; 0x10
     a8e:	b9 89       	ldd	r27, Y+17	; 0x11
     a90:	8c 91       	ld	r24, X
     a92:	85 ff       	sbrs	r24, 5
     a94:	ed cf       	rjmp	.-38     	; 0xa70 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a96:	ce 01       	movw	r24, r28
     a98:	75 df       	rcall	.-278    	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a9a:	e8 cf       	rjmp	.-48     	; 0xa6c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	ec 01       	movw	r28, r24
     ab2:	6a 01       	movw	r12, r20
     ab4:	7b 01       	movw	r14, r22
     ab6:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ab8:	e8 89       	ldd	r30, Y+16	; 0x10
     aba:	f9 89       	ldd	r31, Y+17	; 0x11
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ac0:	41 15       	cp	r20, r1
     ac2:	51 4e       	sbci	r21, 0xE1	; 225
     ac4:	61 05       	cpc	r22, r1
     ac6:	71 05       	cpc	r23, r1
     ac8:	a9 f0       	breq	.+42     	; 0xaf4 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	79 e0       	ldi	r23, 0x09	; 9
     ace:	8d e3       	ldi	r24, 0x3D	; 61
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a7 01       	movw	r20, r14
     ad4:	96 01       	movw	r18, r12
     ad6:	49 d3       	rcall	.+1682   	; 0x116a <__udivmodsi4>
     ad8:	da 01       	movw	r26, r20
     ada:	c9 01       	movw	r24, r18
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	a1 09       	sbc	r26, r1
     ae0:	b1 09       	sbc	r27, r1
     ae2:	b6 95       	lsr	r27
     ae4:	a7 95       	ror	r26
     ae6:	97 95       	ror	r25
     ae8:	87 95       	ror	r24
     aea:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     aec:	21 15       	cp	r18, r1
     aee:	80 e1       	ldi	r24, 0x10	; 16
     af0:	38 07       	cpc	r19, r24
     af2:	a0 f0       	brcs	.+40     	; 0xb1c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     af4:	e8 89       	ldd	r30, Y+16	; 0x10
     af6:	f9 89       	ldd	r31, Y+17	; 0x11
     af8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     afa:	60 e8       	ldi	r22, 0x80	; 128
     afc:	74 e8       	ldi	r23, 0x84	; 132
     afe:	8e e1       	ldi	r24, 0x1E	; 30
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	31 d3       	rcall	.+1634   	; 0x116a <__udivmodsi4>
     b08:	da 01       	movw	r26, r20
     b0a:	c9 01       	movw	r24, r18
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b1c:	ec 85       	ldd	r30, Y+12	; 0x0c
     b1e:	fd 85       	ldd	r31, Y+13	; 0x0d
     b20:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b22:	ee 85       	ldd	r30, Y+14	; 0x0e
     b24:	ff 85       	ldd	r31, Y+15	; 0x0f
     b26:	20 83       	st	Z, r18

  _written = false;
     b28:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b2a:	ec 89       	ldd	r30, Y+20	; 0x14
     b2c:	fd 89       	ldd	r31, Y+21	; 0x15
     b2e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b30:	ea 89       	ldd	r30, Y+18	; 0x12
     b32:	fb 89       	ldd	r31, Y+19	; 0x13
     b34:	80 81       	ld	r24, Z
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b3a:	ea 89       	ldd	r30, Y+18	; 0x12
     b3c:	fb 89       	ldd	r31, Y+19	; 0x13
     b3e:	80 81       	ld	r24, Z
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b44:	ea 89       	ldd	r30, Y+18	; 0x12
     b46:	fb 89       	ldd	r31, Y+19	; 0x13
     b48:	80 81       	ld	r24, Z
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b4e:	ea 89       	ldd	r30, Y+18	; 0x12
     b50:	fb 89       	ldd	r31, Y+19	; 0x13
     b52:	80 81       	ld	r24, Z
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 83       	st	Z, r24
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	0b b6       	in	r0, 0x3b	; 59
     b74:	0f 92       	push	r0
     b76:	2f 93       	push	r18
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b80:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <Serial+0x10>
     b84:	f0 91 d5 02 	lds	r31, 0x02D5	; 0x8002d5 <Serial+0x11>
     b88:	80 81       	ld	r24, Z
     b8a:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <Serial+0x16>
     b8e:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <Serial+0x17>
     b92:	82 fd       	sbrc	r24, 2
     b94:	12 c0       	rjmp	.+36     	; 0xbba <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b96:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b98:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Serial+0x19>
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ba0:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <Serial+0x1a>
     ba4:	82 17       	cp	r24, r18
     ba6:	51 f0       	breq	.+20     	; 0xbbc <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     ba8:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <Serial+0x19>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ec 53       	subi	r30, 0x3C	; 60
     bb0:	fd 4f       	sbci	r31, 0xFD	; 253
     bb2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bb4:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <Serial+0x19>
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bba:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bbc:	ff 91       	pop	r31
     bbe:	ef 91       	pop	r30
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0b be       	out	0x3b, r0	; 59
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bd4:	1f 92       	push	r1
     bd6:	0f 92       	push	r0
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	0f 92       	push	r0
     bdc:	11 24       	eor	r1, r1
     bde:	0b b6       	in	r0, 0x3b	; 59
     be0:	0f 92       	push	r0
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     bfa:	84 ec       	ldi	r24, 0xC4	; 196
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	c2 de       	rcall	.-636    	; 0x984 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0b be       	out	0x3b, r0	; 59
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c26:	84 ec       	ldi	r24, 0xC4	; 196
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	34 de       	rcall	.-920    	; 0x894 <_ZN14HardwareSerial9availableEv>
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	89 2b       	or	r24, r25
     c30:	09 f4       	brne	.+2      	; 0xc34 <_Z17Serial0_availablev+0xe>
     c32:	20 e0       	ldi	r18, 0x00	; 0
}
     c34:	82 2f       	mov	r24, r18
     c36:	08 95       	ret

00000c38 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c38:	e4 ec       	ldi	r30, 0xC4	; 196
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	13 82       	std	Z+3, r1	; 0x03
     c3e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c40:	88 ee       	ldi	r24, 0xE8	; 232
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	84 83       	std	Z+4, r24	; 0x04
     c4a:	95 83       	std	Z+5, r25	; 0x05
     c4c:	a6 83       	std	Z+6, r26	; 0x06
     c4e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c50:	8b e0       	ldi	r24, 0x0B	; 11
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
     c58:	85 ec       	ldi	r24, 0xC5	; 197
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	95 87       	std	Z+13, r25	; 0x0d
     c5e:	84 87       	std	Z+12, r24	; 0x0c
     c60:	84 ec       	ldi	r24, 0xC4	; 196
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	97 87       	std	Z+15, r25	; 0x0f
     c66:	86 87       	std	Z+14, r24	; 0x0e
     c68:	80 ec       	ldi	r24, 0xC0	; 192
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	91 8b       	std	Z+17, r25	; 0x11
     c6e:	80 8b       	std	Z+16, r24	; 0x10
     c70:	81 ec       	ldi	r24, 0xC1	; 193
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	93 8b       	std	Z+19, r25	; 0x13
     c76:	82 8b       	std	Z+18, r24	; 0x12
     c78:	82 ec       	ldi	r24, 0xC2	; 194
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	95 8b       	std	Z+21, r25	; 0x15
     c7e:	84 8b       	std	Z+20, r24	; 0x14
     c80:	86 ec       	ldi	r24, 0xC6	; 198
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	97 8b       	std	Z+23, r25	; 0x17
     c86:	86 8b       	std	Z+22, r24	; 0x16
     c88:	11 8e       	std	Z+25, r1	; 0x19
     c8a:	12 8e       	std	Z+26, r1	; 0x1a
     c8c:	13 8e       	std	Z+27, r1	; 0x1b
     c8e:	14 8e       	std	Z+28, r1	; 0x1c
     c90:	08 95       	ret

00000c92 <initVariant>:
     c92:	08 95       	ret

00000c94 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c94:	b3 d0       	rcall	.+358    	; 0xdfc <init>

	initVariant();
     c96:	fd df       	rcall	.-6      	; 0xc92 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c98:	15 db       	rcall	.-2518   	; 0x2c4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c9a:	c7 e8       	ldi	r28, 0x87	; 135
     c9c:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c9e:	26 db       	rcall	.-2484   	; 0x2ec <loop>
		if (serialEventRun) serialEventRun();
     ca0:	20 97       	sbiw	r28, 0x00	; 0
     ca2:	e9 f3       	breq	.-6      	; 0xc9e <main+0xa>
     ca4:	34 de       	rcall	.-920    	; 0x90e <_Z14serialEventRunv>
     ca6:	fb cf       	rjmp	.-10     	; 0xc9e <main+0xa>

00000ca8 <_ZN5Print5writeEPKhj>:
     ca8:	cf 92       	push	r12
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	6c 01       	movw	r12, r24
     cba:	7a 01       	movw	r14, r20
     cbc:	8b 01       	movw	r16, r22
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	d0 e0       	ldi	r29, 0x00	; 0
     cc2:	ce 15       	cp	r28, r14
     cc4:	df 05       	cpc	r29, r15
     cc6:	81 f0       	breq	.+32     	; 0xce8 <_ZN5Print5writeEPKhj+0x40>
     cc8:	d8 01       	movw	r26, r16
     cca:	6d 91       	ld	r22, X+
     ccc:	8d 01       	movw	r16, r26
     cce:	d6 01       	movw	r26, r12
     cd0:	ed 91       	ld	r30, X+
     cd2:	fc 91       	ld	r31, X
     cd4:	01 90       	ld	r0, Z+
     cd6:	f0 81       	ld	r31, Z
     cd8:	e0 2d       	mov	r30, r0
     cda:	c6 01       	movw	r24, r12
     cdc:	19 95       	eicall
     cde:	89 2b       	or	r24, r25
     ce0:	11 f0       	breq	.+4      	; 0xce6 <_ZN5Print5writeEPKhj+0x3e>
     ce2:	21 96       	adiw	r28, 0x01	; 1
     ce4:	ee cf       	rjmp	.-36     	; 0xcc2 <_ZN5Print5writeEPKhj+0x1a>
     ce6:	7e 01       	movw	r14, r28
     ce8:	c7 01       	movw	r24, r14
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <_ZN5Print5writeEPKc>:
     cfc:	61 15       	cp	r22, r1
     cfe:	71 05       	cpc	r23, r1
     d00:	79 f0       	breq	.+30     	; 0xd20 <_ZN5Print5writeEPKc+0x24>
     d02:	fb 01       	movw	r30, r22
     d04:	01 90       	ld	r0, Z+
     d06:	00 20       	and	r0, r0
     d08:	e9 f7       	brne	.-6      	; 0xd04 <_ZN5Print5writeEPKc+0x8>
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	af 01       	movw	r20, r30
     d0e:	46 1b       	sub	r20, r22
     d10:	57 0b       	sbc	r21, r23
     d12:	dc 01       	movw	r26, r24
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	02 80       	ldd	r0, Z+2	; 0x02
     d1a:	f3 81       	ldd	r31, Z+3	; 0x03
     d1c:	e0 2d       	mov	r30, r0
     d1e:	19 94       	eijmp
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 95       	ret

00000d26 <_ZN5Print5printERK6String>:
     d26:	db 01       	movw	r26, r22
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 91       	ld	r20, X+
     d2c:	5c 91       	ld	r21, X
     d2e:	15 97       	sbiw	r26, 0x05	; 5
     d30:	6d 91       	ld	r22, X+
     d32:	7c 91       	ld	r23, X
     d34:	dc 01       	movw	r26, r24
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	02 80       	ldd	r0, Z+2	; 0x02
     d3c:	f3 81       	ldd	r31, Z+3	; 0x03
     d3e:	e0 2d       	mov	r30, r0
     d40:	19 94       	eijmp

00000d42 <_ZN5Print7printlnEv>:
     d42:	69 e1       	ldi	r22, 0x19	; 25
     d44:	72 e0       	ldi	r23, 0x02	; 2
     d46:	da cf       	rjmp	.-76     	; 0xcfc <_ZN5Print5writeEPKc>

00000d48 <_ZN5Print7printlnERK6String>:
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
  size_t n = print(s);
     d52:	e9 df       	rcall	.-46     	; 0xd26 <_ZN5Print5printERK6String>
     d54:	8c 01       	movw	r16, r24
  n += println();
     d56:	ce 01       	movw	r24, r28
     d58:	f4 df       	rcall	.-24     	; 0xd42 <_ZN5Print7printlnEv>
  return n;
}
     d5a:	80 0f       	add	r24, r16
     d5c:	91 1f       	adc	r25, r17
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <timer0_millis>
     d82:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <timer0_millis+0x1>
     d86:	a0 91 64 03 	lds	r26, 0x0364	; 0x800364 <timer0_millis+0x2>
     d8a:	b0 91 65 03 	lds	r27, 0x0365	; 0x800365 <timer0_millis+0x3>
     d8e:	30 91 61 03 	lds	r19, 0x0361	; 0x800361 <timer0_fract>
     d92:	23 e0       	ldi	r18, 0x03	; 3
     d94:	23 0f       	add	r18, r19
     d96:	2d 37       	cpi	r18, 0x7D	; 125
     d98:	20 f4       	brcc	.+8      	; 0xda2 <__vector_23+0x3a>
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	05 c0       	rjmp	.+10     	; 0xdac <__vector_23+0x44>
     da2:	26 e8       	ldi	r18, 0x86	; 134
     da4:	23 0f       	add	r18, r19
     da6:	02 96       	adiw	r24, 0x02	; 2
     da8:	a1 1d       	adc	r26, r1
     daa:	b1 1d       	adc	r27, r1
     dac:	20 93 61 03 	sts	0x0361, r18	; 0x800361 <timer0_fract>
     db0:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <timer0_millis>
     db4:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <timer0_millis+0x1>
     db8:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <timer0_millis+0x2>
     dbc:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <timer0_millis+0x3>
     dc0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <timer0_overflow_count>
     dc4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <timer0_overflow_count+0x1>
     dc8:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <timer0_overflow_count+0x2>
     dcc:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <timer0_overflow_count+0x3>
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	a1 1d       	adc	r26, r1
     dd4:	b1 1d       	adc	r27, r1
     dd6:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <timer0_overflow_count>
     dda:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <timer0_overflow_count+0x1>
     dde:	a0 93 68 03 	sts	0x0368, r26	; 0x800368 <timer0_overflow_count+0x2>
     de2:	b0 93 69 03 	sts	0x0369, r27	; 0x800369 <timer0_overflow_count+0x3>
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     dfc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     dfe:	84 b5       	in	r24, 0x24	; 36
     e00:	82 60       	ori	r24, 0x02	; 2
     e02:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e04:	84 b5       	in	r24, 0x24	; 36
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e0a:	85 b5       	in	r24, 0x25	; 37
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e10:	85 b5       	in	r24, 0x25	; 37
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e16:	ee e6       	ldi	r30, 0x6E	; 110
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e20:	e1 e8       	ldi	r30, 0x81	; 129
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e26:	80 81       	ld	r24, Z
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e2c:	80 81       	ld	r24, Z
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e32:	e0 e8       	ldi	r30, 0x80	; 128
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	81 60       	ori	r24, 0x01	; 1
     e3a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e3c:	e1 eb       	ldi	r30, 0xB1	; 177
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e46:	e0 eb       	ldi	r30, 0xB0	; 176
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     e50:	e1 e9       	ldi	r30, 0x91	; 145
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     e60:	e0 e9       	ldi	r30, 0x90	; 144
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     e6a:	e1 ea       	ldi	r30, 0xA1	; 161
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	82 60       	ori	r24, 0x02	; 2
     e72:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     e74:	80 81       	ld	r24, Z
     e76:	81 60       	ori	r24, 0x01	; 1
     e78:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     e7a:	e0 ea       	ldi	r30, 0xA0	; 160
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     e84:	e1 e2       	ldi	r30, 0x21	; 33
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	80 81       	ld	r24, Z
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     e8e:	80 81       	ld	r24, Z
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     e94:	e0 e2       	ldi	r30, 0x20	; 32
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	80 81       	ld	r24, Z
     e9a:	81 60       	ori	r24, 0x01	; 1
     e9c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     e9e:	ea e7       	ldi	r30, 0x7A	; 122
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	84 60       	ori	r24, 0x04	; 4
     ea6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ea8:	80 81       	ld	r24, Z
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     eae:	80 81       	ld	r24, Z
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     eb4:	80 81       	ld	r24, Z
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     eba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     ebe:	08 95       	ret

00000ec0 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	fc 01       	movw	r30, r24
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	e2 31       	cpi	r30, 0x12	; 18
     ec8:	f1 05       	cpc	r31, r1
     eca:	08 f0       	brcs	.+2      	; 0xece <turnOffPWM+0xe>
     ecc:	4d c0       	rjmp	.+154    	; 0xf68 <turnOffPWM+0xa8>
     ece:	88 27       	eor	r24, r24
     ed0:	ee 58       	subi	r30, 0x8E	; 142
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	8f 4f       	sbci	r24, 0xFF	; 255
     ed6:	6b c1       	rjmp	.+726    	; 0x11ae <__tablejump2__>
     ed8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     edc:	8f 77       	andi	r24, 0x7F	; 127
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <turnOffPWM+0x26>
     ee0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     eea:	08 95       	ret
     eec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	f9 cf       	rjmp	.-14     	; 0xee6 <turnOffPWM+0x26>
     ef4:	84 b5       	in	r24, 0x24	; 36
     ef6:	8f 77       	andi	r24, 0x7F	; 127
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <turnOffPWM+0x3e>
     efa:	84 b5       	in	r24, 0x24	; 36
     efc:	8f 7d       	andi	r24, 0xDF	; 223
     efe:	84 bd       	out	0x24, r24	; 36
     f00:	08 95       	ret
     f02:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <turnOffPWM+0x50>
     f0a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f0e:	8f 7d       	andi	r24, 0xDF	; 223
     f10:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f14:	08 95       	ret
     f16:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <turnOffPWM+0x6c>
     f1e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <turnOffPWM+0x6c>
     f26:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     f30:	08 95       	ret
     f32:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     f36:	8f 77       	andi	r24, 0x7F	; 127
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <turnOffPWM+0x88>
     f3a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     f3e:	8f 7d       	andi	r24, 0xDF	; 223
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <turnOffPWM+0x88>
     f42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     f46:	87 7f       	andi	r24, 0xF7	; 247
     f48:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     f4c:	08 95       	ret
     f4e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     f52:	8f 77       	andi	r24, 0x7F	; 127
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <turnOffPWM+0xa4>
     f56:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <turnOffPWM+0xa4>
     f5e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     f62:	87 7f       	andi	r24, 0xF7	; 247
     f64:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     f68:	08 95       	ret

00000f6a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	f9 01       	movw	r30, r18
     f76:	e8 5f       	subi	r30, 0xF8	; 248
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f7c:	f9 01       	movw	r30, r18
     f7e:	e2 5b       	subi	r30, 0xB2	; 178
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f84:	f9 01       	movw	r30, r18
     f86:	ec 56       	subi	r30, 0x6C	; 108
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     f8c:	cc 23       	and	r28, r28
     f8e:	b9 f0       	breq	.+46     	; 0xfbe <digitalWrite+0x54>
     f90:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f92:	81 11       	cpse	r24, r1
     f94:	95 df       	rcall	.-214    	; 0xec0 <turnOffPWM>

	out = portOutputRegister(port);
     f96:	ec 2f       	mov	r30, r28
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	e6 52       	subi	r30, 0x26	; 38
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	a5 91       	lpm	r26, Z+
     fa4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fa6:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fa8:	f8 94       	cli

	if (val == LOW) {
     faa:	11 11       	cpse	r17, r1
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <digitalWrite+0x4c>
		*out &= ~bit;
     fae:	8c 91       	ld	r24, X
     fb0:	d0 95       	com	r29
     fb2:	d8 23       	and	r29, r24
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <digitalWrite+0x50>
	} else {
		*out |= bit;
     fb6:	ec 91       	ld	r30, X
     fb8:	de 2b       	or	r29, r30
     fba:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     fbc:	9f bf       	out	0x3f, r25	; 63
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	08 95       	ret

00000fc6 <_ZN6StringD1Ev>:

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	09 f0       	breq	.+2      	; 0xfd2 <_ZN6StringD1Ev+0xc>
     fd0:	8e c1       	rjmp	.+796    	; 0x12ee <free>
     fd2:	08 95       	ret

00000fd4 <_ZN6String10invalidateEv>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
     fda:	88 81       	ld	r24, Y
     fdc:	99 81       	ldd	r25, Y+1	; 0x01
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <_ZN6String10invalidateEv+0x10>
     fe2:	85 d1       	rcall	.+778    	; 0x12ee <free>
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	18 82       	st	Y, r1
     fe8:	1d 82       	std	Y+5, r1	; 0x05
     fea:	1c 82       	std	Y+4, r1	; 0x04
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	1a 82       	std	Y+2, r1	; 0x02
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <_ZN6String12changeBufferEj>:
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
    1000:	8b 01       	movw	r16, r22
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	88 81       	ld	r24, Y
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	fa d1       	rcall	.+1012   	; 0x1400 <realloc>
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	31 f0       	breq	.+12     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    1010:	99 83       	std	Y+1, r25	; 0x01
    1012:	88 83       	st	Y, r24
    1014:	1b 83       	std	Y+3, r17	; 0x03
    1016:	0a 83       	std	Y+2, r16	; 0x02
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	01 c0       	rjmp	.+2      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <_ZN6String7reserveEj>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
    102e:	88 81       	ld	r24, Y
    1030:	99 81       	ldd	r25, Y+1	; 0x01
    1032:	89 2b       	or	r24, r25
    1034:	29 f0       	breq	.+10     	; 0x1040 <_ZN6String7reserveEj+0x18>
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	86 17       	cp	r24, r22
    103c:	97 07       	cpc	r25, r23
    103e:	58 f4       	brcc	.+22     	; 0x1056 <_ZN6String7reserveEj+0x2e>
    1040:	ce 01       	movw	r24, r28
    1042:	d9 df       	rcall	.-78     	; 0xff6 <_ZN6String12changeBufferEj>
    1044:	88 23       	and	r24, r24
    1046:	41 f0       	breq	.+16     	; 0x1058 <_ZN6String7reserveEj+0x30>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	89 2b       	or	r24, r25
    104e:	19 f4       	brne	.+6      	; 0x1056 <_ZN6String7reserveEj+0x2e>
    1050:	e8 81       	ld	r30, Y
    1052:	f9 81       	ldd	r31, Y+1	; 0x01
    1054:	10 82       	st	Z, r1
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <_ZN6String4copyEPKcj>:
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	7b 01       	movw	r14, r22
    106e:	8a 01       	movw	r16, r20
    1070:	ba 01       	movw	r22, r20
    1072:	da df       	rcall	.-76     	; 0x1028 <_ZN6String7reserveEj>
    1074:	81 11       	cpse	r24, r1
    1076:	03 c0       	rjmp	.+6      	; 0x107e <_ZN6String4copyEPKcj+0x20>
    1078:	ce 01       	movw	r24, r28
    107a:	ac df       	rcall	.-168    	; 0xfd4 <_ZN6String10invalidateEv>
    107c:	06 c0       	rjmp	.+12     	; 0x108a <_ZN6String4copyEPKcj+0x2c>
    107e:	1d 83       	std	Y+5, r17	; 0x05
    1080:	0c 83       	std	Y+4, r16	; 0x04
    1082:	b7 01       	movw	r22, r14
    1084:	88 81       	ld	r24, Y
    1086:	99 81       	ldd	r25, Y+1	; 0x01
    1088:	a4 d2       	rcall	.+1352   	; 0x15d2 <strcpy>
    108a:	ce 01       	movw	r24, r28
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <_ZN6StringC1EPKc>:
    109a:	fc 01       	movw	r30, r24
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
    10a0:	13 82       	std	Z+3, r1	; 0x03
    10a2:	12 82       	std	Z+2, r1	; 0x02
    10a4:	15 82       	std	Z+5, r1	; 0x05
    10a6:	14 82       	std	Z+4, r1	; 0x04
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <_ZN6StringC1EPKc+0x26>
    10ae:	fb 01       	movw	r30, r22
    10b0:	01 90       	ld	r0, Z+
    10b2:	00 20       	and	r0, r0
    10b4:	e9 f7       	brne	.-6      	; 0x10b0 <_ZN6StringC1EPKc+0x16>
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	af 01       	movw	r20, r30
    10ba:	46 1b       	sub	r20, r22
    10bc:	57 0b       	sbc	r21, r23
    10be:	cf cf       	rjmp	.-98     	; 0x105e <_ZN6String4copyEPKcj>
    10c0:	08 95       	ret

000010c2 <_ZN6StringaSEPKc>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	61 15       	cp	r22, r1
    10ca:	71 05       	cpc	r23, r1
    10cc:	51 f0       	breq	.+20     	; 0x10e2 <_ZN6StringaSEPKc+0x20>
    10ce:	fb 01       	movw	r30, r22
    10d0:	01 90       	ld	r0, Z+
    10d2:	00 20       	and	r0, r0
    10d4:	e9 f7       	brne	.-6      	; 0x10d0 <_ZN6StringaSEPKc+0xe>
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	af 01       	movw	r20, r30
    10da:	46 1b       	sub	r20, r22
    10dc:	57 0b       	sbc	r21, r23
    10de:	bf df       	rcall	.-130    	; 0x105e <_ZN6String4copyEPKcj>
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <_ZN6StringaSEPKc+0x22>
    10e2:	78 df       	rcall	.-272    	; 0xfd4 <_ZN6String10invalidateEv>
    10e4:	ce 01       	movw	r24, r28
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <_ZN6String6concatEPKcj>:
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	61 15       	cp	r22, r1
    10fa:	71 05       	cpc	r23, r1
    10fc:	11 f4       	brne	.+4      	; 0x1102 <_ZN6String6concatEPKcj+0x16>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	1a c0       	rjmp	.+52     	; 0x1136 <_ZN6String6concatEPKcj+0x4a>
    1102:	41 15       	cp	r20, r1
    1104:	51 05       	cpc	r21, r1
    1106:	b1 f0       	breq	.+44     	; 0x1134 <_ZN6String6concatEPKcj+0x48>
    1108:	7b 01       	movw	r14, r22
    110a:	ec 01       	movw	r28, r24
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	8a 01       	movw	r16, r20
    1112:	08 0f       	add	r16, r24
    1114:	19 1f       	adc	r17, r25
    1116:	b8 01       	movw	r22, r16
    1118:	ce 01       	movw	r24, r28
    111a:	86 df       	rcall	.-244    	; 0x1028 <_ZN6String7reserveEj>
    111c:	88 23       	and	r24, r24
    111e:	79 f3       	breq	.-34     	; 0x10fe <_ZN6String6concatEPKcj+0x12>
    1120:	28 81       	ld	r18, Y
    1122:	39 81       	ldd	r19, Y+1	; 0x01
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	b7 01       	movw	r22, r14
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	51 d2       	rcall	.+1186   	; 0x15d2 <strcpy>
    1130:	1d 83       	std	Y+5, r17	; 0x05
    1132:	0c 83       	std	Y+4, r16	; 0x04
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	08 95       	ret

00001144 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	1f 92       	push	r1
    114a:	1f 92       	push	r1
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    1150:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    1152:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	be 01       	movw	r22, r28
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	c6 df       	rcall	.-116    	; 0x10ec <_ZN6String6concatEPKcj>
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <__udivmodsi4>:
    116a:	a1 e2       	ldi	r26, 0x21	; 33
    116c:	1a 2e       	mov	r1, r26
    116e:	aa 1b       	sub	r26, r26
    1170:	bb 1b       	sub	r27, r27
    1172:	fd 01       	movw	r30, r26
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <__udivmodsi4_ep>

00001176 <__udivmodsi4_loop>:
    1176:	aa 1f       	adc	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	ee 1f       	adc	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	a2 17       	cp	r26, r18
    1180:	b3 07       	cpc	r27, r19
    1182:	e4 07       	cpc	r30, r20
    1184:	f5 07       	cpc	r31, r21
    1186:	20 f0       	brcs	.+8      	; 0x1190 <__udivmodsi4_ep>
    1188:	a2 1b       	sub	r26, r18
    118a:	b3 0b       	sbc	r27, r19
    118c:	e4 0b       	sbc	r30, r20
    118e:	f5 0b       	sbc	r31, r21

00001190 <__udivmodsi4_ep>:
    1190:	66 1f       	adc	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	1a 94       	dec	r1
    119a:	69 f7       	brne	.-38     	; 0x1176 <__udivmodsi4_loop>
    119c:	60 95       	com	r22
    119e:	70 95       	com	r23
    11a0:	80 95       	com	r24
    11a2:	90 95       	com	r25
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	bd 01       	movw	r22, r26
    11aa:	cf 01       	movw	r24, r30
    11ac:	08 95       	ret

000011ae <__tablejump2__>:
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	88 1f       	adc	r24, r24
    11b4:	8b bf       	out	0x3b, r24	; 59
    11b6:	07 90       	elpm	r0, Z+
    11b8:	f6 91       	elpm	r31, Z
    11ba:	e0 2d       	mov	r30, r0
    11bc:	19 94       	eijmp

000011be <malloc>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	10 f4       	brcc	.+4      	; 0x11d0 <malloc+0x12>
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <__flp>
    11d4:	f0 91 6d 03 	lds	r31, 0x036D	; 0x80036d <__flp+0x1>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	19 f1       	breq	.+70     	; 0x122a <malloc+0x6c>
    11e4:	40 81       	ld	r20, Z
    11e6:	51 81       	ldd	r21, Z+1	; 0x01
    11e8:	02 81       	ldd	r16, Z+2	; 0x02
    11ea:	13 81       	ldd	r17, Z+3	; 0x03
    11ec:	48 17       	cp	r20, r24
    11ee:	59 07       	cpc	r21, r25
    11f0:	c8 f0       	brcs	.+50     	; 0x1224 <malloc+0x66>
    11f2:	84 17       	cp	r24, r20
    11f4:	95 07       	cpc	r25, r21
    11f6:	69 f4       	brne	.+26     	; 0x1212 <malloc+0x54>
    11f8:	10 97       	sbiw	r26, 0x00	; 0
    11fa:	31 f0       	breq	.+12     	; 0x1208 <malloc+0x4a>
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	0c 93       	st	X, r16
    1200:	12 97       	sbiw	r26, 0x02	; 2
    1202:	13 96       	adiw	r26, 0x03	; 3
    1204:	1c 93       	st	X, r17
    1206:	27 c0       	rjmp	.+78     	; 0x1256 <malloc+0x98>
    1208:	00 93 6c 03 	sts	0x036C, r16	; 0x80036c <__flp>
    120c:	10 93 6d 03 	sts	0x036D, r17	; 0x80036d <__flp+0x1>
    1210:	22 c0       	rjmp	.+68     	; 0x1256 <malloc+0x98>
    1212:	21 15       	cp	r18, r1
    1214:	31 05       	cpc	r19, r1
    1216:	19 f0       	breq	.+6      	; 0x121e <malloc+0x60>
    1218:	42 17       	cp	r20, r18
    121a:	53 07       	cpc	r21, r19
    121c:	18 f4       	brcc	.+6      	; 0x1224 <malloc+0x66>
    121e:	9a 01       	movw	r18, r20
    1220:	bd 01       	movw	r22, r26
    1222:	ef 01       	movw	r28, r30
    1224:	df 01       	movw	r26, r30
    1226:	f8 01       	movw	r30, r16
    1228:	db cf       	rjmp	.-74     	; 0x11e0 <malloc+0x22>
    122a:	21 15       	cp	r18, r1
    122c:	31 05       	cpc	r19, r1
    122e:	f9 f0       	breq	.+62     	; 0x126e <malloc+0xb0>
    1230:	28 1b       	sub	r18, r24
    1232:	39 0b       	sbc	r19, r25
    1234:	24 30       	cpi	r18, 0x04	; 4
    1236:	31 05       	cpc	r19, r1
    1238:	80 f4       	brcc	.+32     	; 0x125a <malloc+0x9c>
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	9b 81       	ldd	r25, Y+3	; 0x03
    123e:	61 15       	cp	r22, r1
    1240:	71 05       	cpc	r23, r1
    1242:	21 f0       	breq	.+8      	; 0x124c <malloc+0x8e>
    1244:	fb 01       	movw	r30, r22
    1246:	93 83       	std	Z+3, r25	; 0x03
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <malloc+0x96>
    124c:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__flp+0x1>
    1250:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__flp>
    1254:	fe 01       	movw	r30, r28
    1256:	32 96       	adiw	r30, 0x02	; 2
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <malloc+0x124>
    125a:	fe 01       	movw	r30, r28
    125c:	e2 0f       	add	r30, r18
    125e:	f3 1f       	adc	r31, r19
    1260:	81 93       	st	Z+, r24
    1262:	91 93       	st	Z+, r25
    1264:	22 50       	subi	r18, 0x02	; 2
    1266:	31 09       	sbc	r19, r1
    1268:	39 83       	std	Y+1, r19	; 0x01
    126a:	28 83       	st	Y, r18
    126c:	3a c0       	rjmp	.+116    	; 0x12e2 <malloc+0x124>
    126e:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    1272:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    1276:	23 2b       	or	r18, r19
    1278:	41 f4       	brne	.+16     	; 0x128a <malloc+0xcc>
    127a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    127e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1282:	30 93 6b 03 	sts	0x036B, r19	; 0x80036b <__brkval+0x1>
    1286:	20 93 6a 03 	sts	0x036A, r18	; 0x80036a <__brkval>
    128a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    128e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1292:	21 15       	cp	r18, r1
    1294:	31 05       	cpc	r19, r1
    1296:	41 f4       	brne	.+16     	; 0x12a8 <malloc+0xea>
    1298:	2d b7       	in	r18, 0x3d	; 61
    129a:	3e b7       	in	r19, 0x3e	; 62
    129c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    12a0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    12a4:	24 1b       	sub	r18, r20
    12a6:	35 0b       	sbc	r19, r21
    12a8:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__brkval>
    12ac:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__brkval+0x1>
    12b0:	e2 17       	cp	r30, r18
    12b2:	f3 07       	cpc	r31, r19
    12b4:	a0 f4       	brcc	.+40     	; 0x12de <malloc+0x120>
    12b6:	2e 1b       	sub	r18, r30
    12b8:	3f 0b       	sbc	r19, r31
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	78 f0       	brcs	.+30     	; 0x12de <malloc+0x120>
    12c0:	ac 01       	movw	r20, r24
    12c2:	4e 5f       	subi	r20, 0xFE	; 254
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255
    12c6:	24 17       	cp	r18, r20
    12c8:	35 07       	cpc	r19, r21
    12ca:	48 f0       	brcs	.+18     	; 0x12de <malloc+0x120>
    12cc:	4e 0f       	add	r20, r30
    12ce:	5f 1f       	adc	r21, r31
    12d0:	50 93 6b 03 	sts	0x036B, r21	; 0x80036b <__brkval+0x1>
    12d4:	40 93 6a 03 	sts	0x036A, r20	; 0x80036a <__brkval>
    12d8:	81 93       	st	Z+, r24
    12da:	91 93       	st	Z+, r25
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <malloc+0x124>
    12de:	e0 e0       	ldi	r30, 0x00	; 0
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	cf 01       	movw	r24, r30
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <free>:
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <free+0xa>
    12f6:	81 c0       	rjmp	.+258    	; 0x13fa <free+0x10c>
    12f8:	fc 01       	movw	r30, r24
    12fa:	32 97       	sbiw	r30, 0x02	; 2
    12fc:	13 82       	std	Z+3, r1	; 0x03
    12fe:	12 82       	std	Z+2, r1	; 0x02
    1300:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <__flp>
    1304:	b0 91 6d 03 	lds	r27, 0x036D	; 0x80036d <__flp+0x1>
    1308:	10 97       	sbiw	r26, 0x00	; 0
    130a:	81 f4       	brne	.+32     	; 0x132c <free+0x3e>
    130c:	20 81       	ld	r18, Z
    130e:	31 81       	ldd	r19, Z+1	; 0x01
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    1318:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    131c:	28 17       	cp	r18, r24
    131e:	39 07       	cpc	r19, r25
    1320:	51 f5       	brne	.+84     	; 0x1376 <free+0x88>
    1322:	f0 93 6b 03 	sts	0x036B, r31	; 0x80036b <__brkval+0x1>
    1326:	e0 93 6a 03 	sts	0x036A, r30	; 0x80036a <__brkval>
    132a:	67 c0       	rjmp	.+206    	; 0x13fa <free+0x10c>
    132c:	ed 01       	movw	r28, r26
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	ce 17       	cp	r28, r30
    1334:	df 07       	cpc	r29, r31
    1336:	40 f4       	brcc	.+16     	; 0x1348 <free+0x5a>
    1338:	4a 81       	ldd	r20, Y+2	; 0x02
    133a:	5b 81       	ldd	r21, Y+3	; 0x03
    133c:	9e 01       	movw	r18, r28
    133e:	41 15       	cp	r20, r1
    1340:	51 05       	cpc	r21, r1
    1342:	f1 f0       	breq	.+60     	; 0x1380 <free+0x92>
    1344:	ea 01       	movw	r28, r20
    1346:	f5 cf       	rjmp	.-22     	; 0x1332 <free+0x44>
    1348:	d3 83       	std	Z+3, r29	; 0x03
    134a:	c2 83       	std	Z+2, r28	; 0x02
    134c:	40 81       	ld	r20, Z
    134e:	51 81       	ldd	r21, Z+1	; 0x01
    1350:	84 0f       	add	r24, r20
    1352:	95 1f       	adc	r25, r21
    1354:	c8 17       	cp	r28, r24
    1356:	d9 07       	cpc	r29, r25
    1358:	59 f4       	brne	.+22     	; 0x1370 <free+0x82>
    135a:	88 81       	ld	r24, Y
    135c:	99 81       	ldd	r25, Y+1	; 0x01
    135e:	84 0f       	add	r24, r20
    1360:	95 1f       	adc	r25, r21
    1362:	02 96       	adiw	r24, 0x02	; 2
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	29 f4       	brne	.+10     	; 0x1380 <free+0x92>
    1376:	f0 93 6d 03 	sts	0x036D, r31	; 0x80036d <__flp+0x1>
    137a:	e0 93 6c 03 	sts	0x036C, r30	; 0x80036c <__flp>
    137e:	3d c0       	rjmp	.+122    	; 0x13fa <free+0x10c>
    1380:	e9 01       	movw	r28, r18
    1382:	fb 83       	std	Y+3, r31	; 0x03
    1384:	ea 83       	std	Y+2, r30	; 0x02
    1386:	49 91       	ld	r20, Y+
    1388:	59 91       	ld	r21, Y+
    138a:	c4 0f       	add	r28, r20
    138c:	d5 1f       	adc	r29, r21
    138e:	ec 17       	cp	r30, r28
    1390:	fd 07       	cpc	r31, r29
    1392:	61 f4       	brne	.+24     	; 0x13ac <free+0xbe>
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	84 0f       	add	r24, r20
    139a:	95 1f       	adc	r25, r21
    139c:	02 96       	adiw	r24, 0x02	; 2
    139e:	e9 01       	movw	r28, r18
    13a0:	99 83       	std	Y+1, r25	; 0x01
    13a2:	88 83       	st	Y, r24
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	12 96       	adiw	r26, 0x02	; 2
    13b2:	8d 91       	ld	r24, X+
    13b4:	9c 91       	ld	r25, X
    13b6:	13 97       	sbiw	r26, 0x03	; 3
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <free+0xd4>
    13bc:	fd 01       	movw	r30, r26
    13be:	dc 01       	movw	r26, r24
    13c0:	f7 cf       	rjmp	.-18     	; 0x13b0 <free+0xc2>
    13c2:	8d 91       	ld	r24, X+
    13c4:	9c 91       	ld	r25, X
    13c6:	11 97       	sbiw	r26, 0x01	; 1
    13c8:	9d 01       	movw	r18, r26
    13ca:	2e 5f       	subi	r18, 0xFE	; 254
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__brkval>
    13d6:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__brkval+0x1>
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	69 f4       	brne	.+26     	; 0x13fa <free+0x10c>
    13e0:	30 97       	sbiw	r30, 0x00	; 0
    13e2:	29 f4       	brne	.+10     	; 0x13ee <free+0x100>
    13e4:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__flp+0x1>
    13e8:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__flp>
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <free+0x104>
    13ee:	13 82       	std	Z+3, r1	; 0x03
    13f0:	12 82       	std	Z+2, r1	; 0x02
    13f2:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <__brkval+0x1>
    13f6:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <__brkval>
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <realloc>:
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	81 f4       	brne	.+32     	; 0x1440 <realloc+0x40>
    1420:	cb 01       	movw	r24, r22
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	7f 90       	pop	r7
    143c:	6f 90       	pop	r6
    143e:	bf ce       	rjmp	.-642    	; 0x11be <malloc>
    1440:	fc 01       	movw	r30, r24
    1442:	e6 0f       	add	r30, r22
    1444:	f7 1f       	adc	r31, r23
    1446:	9c 01       	movw	r18, r24
    1448:	22 50       	subi	r18, 0x02	; 2
    144a:	31 09       	sbc	r19, r1
    144c:	e2 17       	cp	r30, r18
    144e:	f3 07       	cpc	r31, r19
    1450:	08 f4       	brcc	.+2      	; 0x1454 <realloc+0x54>
    1452:	a5 c0       	rjmp	.+330    	; 0x159e <realloc+0x19e>
    1454:	ec 01       	movw	r28, r24
    1456:	d9 01       	movw	r26, r18
    1458:	0d 91       	ld	r16, X+
    145a:	1c 91       	ld	r17, X
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	06 17       	cp	r16, r22
    1460:	17 07       	cpc	r17, r23
    1462:	a8 f0       	brcs	.+42     	; 0x148e <realloc+0x8e>
    1464:	05 30       	cpi	r16, 0x05	; 5
    1466:	11 05       	cpc	r17, r1
    1468:	08 f4       	brcc	.+2      	; 0x146c <realloc+0x6c>
    146a:	97 c0       	rjmp	.+302    	; 0x159a <realloc+0x19a>
    146c:	c8 01       	movw	r24, r16
    146e:	04 97       	sbiw	r24, 0x04	; 4
    1470:	86 17       	cp	r24, r22
    1472:	97 07       	cpc	r25, r23
    1474:	08 f4       	brcc	.+2      	; 0x1478 <realloc+0x78>
    1476:	91 c0       	rjmp	.+290    	; 0x159a <realloc+0x19a>
    1478:	02 50       	subi	r16, 0x02	; 2
    147a:	11 09       	sbc	r17, r1
    147c:	06 1b       	sub	r16, r22
    147e:	17 0b       	sbc	r17, r23
    1480:	01 93       	st	Z+, r16
    1482:	11 93       	st	Z+, r17
    1484:	6d 93       	st	X+, r22
    1486:	7c 93       	st	X, r23
    1488:	cf 01       	movw	r24, r30
    148a:	31 df       	rcall	.-414    	; 0x12ee <free>
    148c:	86 c0       	rjmp	.+268    	; 0x159a <realloc+0x19a>
    148e:	5b 01       	movw	r10, r22
    1490:	a0 1a       	sub	r10, r16
    1492:	b1 0a       	sbc	r11, r17
    1494:	4c 01       	movw	r8, r24
    1496:	80 0e       	add	r8, r16
    1498:	91 1e       	adc	r9, r17
    149a:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <__flp>
    149e:	b0 91 6d 03 	lds	r27, 0x036D	; 0x80036d <__flp+0x1>
    14a2:	61 2c       	mov	r6, r1
    14a4:	71 2c       	mov	r7, r1
    14a6:	e1 2c       	mov	r14, r1
    14a8:	f1 2c       	mov	r15, r1
    14aa:	10 97       	sbiw	r26, 0x00	; 0
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <realloc+0xb0>
    14ae:	46 c0       	rjmp	.+140    	; 0x153c <realloc+0x13c>
    14b0:	8d 91       	ld	r24, X+
    14b2:	9c 91       	ld	r25, X
    14b4:	11 97       	sbiw	r26, 0x01	; 1
    14b6:	a8 15       	cp	r26, r8
    14b8:	b9 05       	cpc	r27, r9
    14ba:	b1 f5       	brne	.+108    	; 0x1528 <realloc+0x128>
    14bc:	6c 01       	movw	r12, r24
    14be:	42 e0       	ldi	r20, 0x02	; 2
    14c0:	c4 0e       	add	r12, r20
    14c2:	d1 1c       	adc	r13, r1
    14c4:	ca 14       	cp	r12, r10
    14c6:	db 04       	cpc	r13, r11
    14c8:	78 f1       	brcs	.+94     	; 0x1528 <realloc+0x128>
    14ca:	4c 01       	movw	r8, r24
    14cc:	8a 18       	sub	r8, r10
    14ce:	9b 08       	sbc	r9, r11
    14d0:	64 01       	movw	r12, r8
    14d2:	42 e0       	ldi	r20, 0x02	; 2
    14d4:	c4 0e       	add	r12, r20
    14d6:	d1 1c       	adc	r13, r1
    14d8:	12 96       	adiw	r26, 0x02	; 2
    14da:	bc 90       	ld	r11, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	13 96       	adiw	r26, 0x03	; 3
    14e0:	ac 91       	ld	r26, X
    14e2:	b5 e0       	ldi	r27, 0x05	; 5
    14e4:	cb 16       	cp	r12, r27
    14e6:	d1 04       	cpc	r13, r1
    14e8:	40 f0       	brcs	.+16     	; 0x14fa <realloc+0xfa>
    14ea:	b2 82       	std	Z+2, r11	; 0x02
    14ec:	a3 83       	std	Z+3, r26	; 0x03
    14ee:	91 82       	std	Z+1, r9	; 0x01
    14f0:	80 82       	st	Z, r8
    14f2:	d9 01       	movw	r26, r18
    14f4:	6d 93       	st	X+, r22
    14f6:	7c 93       	st	X, r23
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <realloc+0x10c>
    14fa:	0e 5f       	subi	r16, 0xFE	; 254
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	80 0f       	add	r24, r16
    1500:	91 1f       	adc	r25, r17
    1502:	f9 01       	movw	r30, r18
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
    1508:	eb 2d       	mov	r30, r11
    150a:	fa 2f       	mov	r31, r26
    150c:	e1 14       	cp	r14, r1
    150e:	f1 04       	cpc	r15, r1
    1510:	31 f0       	breq	.+12     	; 0x151e <realloc+0x11e>
    1512:	d7 01       	movw	r26, r14
    1514:	13 96       	adiw	r26, 0x03	; 3
    1516:	fc 93       	st	X, r31
    1518:	ee 93       	st	-X, r30
    151a:	12 97       	sbiw	r26, 0x02	; 2
    151c:	3e c0       	rjmp	.+124    	; 0x159a <realloc+0x19a>
    151e:	f0 93 6d 03 	sts	0x036D, r31	; 0x80036d <__flp+0x1>
    1522:	e0 93 6c 03 	sts	0x036C, r30	; 0x80036c <__flp>
    1526:	39 c0       	rjmp	.+114    	; 0x159a <realloc+0x19a>
    1528:	68 16       	cp	r6, r24
    152a:	79 06       	cpc	r7, r25
    152c:	08 f4       	brcc	.+2      	; 0x1530 <realloc+0x130>
    152e:	3c 01       	movw	r6, r24
    1530:	7d 01       	movw	r14, r26
    1532:	12 96       	adiw	r26, 0x02	; 2
    1534:	0d 90       	ld	r0, X+
    1536:	bc 91       	ld	r27, X
    1538:	a0 2d       	mov	r26, r0
    153a:	b7 cf       	rjmp	.-146    	; 0x14aa <realloc+0xaa>
    153c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <__brkval>
    1540:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <__brkval+0x1>
    1544:	88 16       	cp	r8, r24
    1546:	99 06       	cpc	r9, r25
    1548:	e1 f4       	brne	.+56     	; 0x1582 <realloc+0x182>
    154a:	66 16       	cp	r6, r22
    154c:	77 06       	cpc	r7, r23
    154e:	c8 f4       	brcc	.+50     	; 0x1582 <realloc+0x182>
    1550:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1554:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	41 f4       	brne	.+16     	; 0x156c <realloc+0x16c>
    155c:	8d b7       	in	r24, 0x3d	; 61
    155e:	9e b7       	in	r25, 0x3e	; 62
    1560:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1564:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1568:	84 1b       	sub	r24, r20
    156a:	95 0b       	sbc	r25, r21
    156c:	e8 17       	cp	r30, r24
    156e:	f9 07       	cpc	r31, r25
    1570:	b0 f4       	brcc	.+44     	; 0x159e <realloc+0x19e>
    1572:	f0 93 6b 03 	sts	0x036B, r31	; 0x80036b <__brkval+0x1>
    1576:	e0 93 6a 03 	sts	0x036A, r30	; 0x80036a <__brkval>
    157a:	f9 01       	movw	r30, r18
    157c:	71 83       	std	Z+1, r23	; 0x01
    157e:	60 83       	st	Z, r22
    1580:	0c c0       	rjmp	.+24     	; 0x159a <realloc+0x19a>
    1582:	cb 01       	movw	r24, r22
    1584:	1c de       	rcall	.-968    	; 0x11be <malloc>
    1586:	7c 01       	movw	r14, r24
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	49 f0       	breq	.+18     	; 0x159e <realloc+0x19e>
    158c:	a8 01       	movw	r20, r16
    158e:	be 01       	movw	r22, r28
    1590:	17 d0       	rcall	.+46     	; 0x15c0 <memcpy>
    1592:	ce 01       	movw	r24, r28
    1594:	ac de       	rcall	.-680    	; 0x12ee <free>
    1596:	c7 01       	movw	r24, r14
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <realloc+0x1a2>
    159a:	ce 01       	movw	r24, r28
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <realloc+0x1a2>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	9f 90       	pop	r9
    15b8:	8f 90       	pop	r8
    15ba:	7f 90       	pop	r7
    15bc:	6f 90       	pop	r6
    15be:	08 95       	ret

000015c0 <memcpy>:
    15c0:	fb 01       	movw	r30, r22
    15c2:	dc 01       	movw	r26, r24
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <memcpy+0xa>
    15c6:	01 90       	ld	r0, Z+
    15c8:	0d 92       	st	X+, r0
    15ca:	41 50       	subi	r20, 0x01	; 1
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	d8 f7       	brcc	.-10     	; 0x15c6 <memcpy+0x6>
    15d0:	08 95       	ret

000015d2 <strcpy>:
    15d2:	fb 01       	movw	r30, r22
    15d4:	dc 01       	movw	r26, r24
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	00 20       	and	r0, r0
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <strcpy+0x4>
    15de:	08 95       	ret

000015e0 <__do_global_dtors>:
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	cc ef       	ldi	r28, 0xFC	; 252
    15e4:	d0 e0       	ldi	r29, 0x00	; 0
    15e6:	00 e0       	ldi	r16, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__do_global_dtors+0x14>
    15ea:	80 2f       	mov	r24, r16
    15ec:	fe 01       	movw	r30, r28
    15ee:	df dd       	rcall	.-1090   	; 0x11ae <__tablejump2__>
    15f0:	21 96       	adiw	r28, 0x01	; 1
    15f2:	01 1d       	adc	r16, r1
    15f4:	cd 3f       	cpi	r28, 0xFD	; 253
    15f6:	d1 07       	cpc	r29, r17
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	08 07       	cpc	r16, r24
    15fc:	b1 f7       	brne	.-20     	; 0x15ea <__do_global_dtors+0xa>
    15fe:	f8 94       	cli

00001600 <__stop_program>:
    1600:	ff cf       	rjmp	.-2      	; 0x1600 <__stop_program>
