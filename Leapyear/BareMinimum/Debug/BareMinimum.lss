
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  000019b4  00001a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  0080024c  0080024c  00001a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a4b0  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002317  00000000  00000000  0000c384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002608  00000000  00000000  0000e69b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b54  00000000  00000000  00010ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028c1  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000491c  00000000  00000000  000140b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000189d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
       2:	00 00       	nop
       4:	75 c1       	rjmp	.+746    	; 0x2f0 <__bad_interrupt>
       6:	00 00       	nop
       8:	73 c1       	rjmp	.+742    	; 0x2f0 <__bad_interrupt>
       a:	00 00       	nop
       c:	71 c1       	rjmp	.+738    	; 0x2f0 <__bad_interrupt>
       e:	00 00       	nop
      10:	6f c1       	rjmp	.+734    	; 0x2f0 <__bad_interrupt>
      12:	00 00       	nop
      14:	6d c1       	rjmp	.+730    	; 0x2f0 <__bad_interrupt>
      16:	00 00       	nop
      18:	6b c1       	rjmp	.+726    	; 0x2f0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	69 c1       	rjmp	.+722    	; 0x2f0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	67 c1       	rjmp	.+718    	; 0x2f0 <__bad_interrupt>
      22:	00 00       	nop
      24:	65 c1       	rjmp	.+714    	; 0x2f0 <__bad_interrupt>
      26:	00 00       	nop
      28:	63 c1       	rjmp	.+710    	; 0x2f0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	61 c1       	rjmp	.+706    	; 0x2f0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5f c1       	rjmp	.+702    	; 0x2f0 <__bad_interrupt>
      32:	00 00       	nop
      34:	5d c1       	rjmp	.+698    	; 0x2f0 <__bad_interrupt>
      36:	00 00       	nop
      38:	5b c1       	rjmp	.+694    	; 0x2f0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	59 c1       	rjmp	.+690    	; 0x2f0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	57 c1       	rjmp	.+686    	; 0x2f0 <__bad_interrupt>
      42:	00 00       	nop
      44:	55 c1       	rjmp	.+682    	; 0x2f0 <__bad_interrupt>
      46:	00 00       	nop
      48:	53 c1       	rjmp	.+678    	; 0x2f0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	51 c1       	rjmp	.+674    	; 0x2f0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4f c1       	rjmp	.+670    	; 0x2f0 <__bad_interrupt>
      52:	00 00       	nop
      54:	4d c1       	rjmp	.+666    	; 0x2f0 <__bad_interrupt>
      56:	00 00       	nop
      58:	4b c1       	rjmp	.+662    	; 0x2f0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_23>
      60:	47 c1       	rjmp	.+654    	; 0x2f0 <__bad_interrupt>
      62:	00 00       	nop
      64:	c4 c7       	rjmp	.+3976   	; 0xfee <__vector_25>
      66:	00 00       	nop
      68:	f8 c7       	rjmp	.+4080   	; 0x105a <__vector_26>
      6a:	00 00       	nop
      6c:	41 c1       	rjmp	.+642    	; 0x2f0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3f c1       	rjmp	.+638    	; 0x2f0 <__bad_interrupt>
      72:	00 00       	nop
      74:	3d c1       	rjmp	.+634    	; 0x2f0 <__bad_interrupt>
      76:	00 00       	nop
      78:	3b c1       	rjmp	.+630    	; 0x2f0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	39 c1       	rjmp	.+626    	; 0x2f0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	37 c1       	rjmp	.+622    	; 0x2f0 <__bad_interrupt>
      82:	00 00       	nop
      84:	35 c1       	rjmp	.+618    	; 0x2f0 <__bad_interrupt>
      86:	00 00       	nop
      88:	33 c1       	rjmp	.+614    	; 0x2f0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	31 c1       	rjmp	.+610    	; 0x2f0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2f c1       	rjmp	.+606    	; 0x2f0 <__bad_interrupt>
      92:	00 00       	nop
      94:	2d c1       	rjmp	.+602    	; 0x2f0 <__bad_interrupt>
      96:	00 00       	nop
      98:	2b c1       	rjmp	.+598    	; 0x2f0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	29 c1       	rjmp	.+594    	; 0x2f0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	27 c1       	rjmp	.+590    	; 0x2f0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	25 c1       	rjmp	.+586    	; 0x2f0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	23 c1       	rjmp	.+582    	; 0x2f0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	21 c1       	rjmp	.+578    	; 0x2f0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	1f c1       	rjmp	.+574    	; 0x2f0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1d c1       	rjmp	.+570    	; 0x2f0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1b c1       	rjmp	.+566    	; 0x2f0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	19 c1       	rjmp	.+562    	; 0x2f0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	17 c1       	rjmp	.+558    	; 0x2f0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	15 c1       	rjmp	.+554    	; 0x2f0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	13 c1       	rjmp	.+550    	; 0x2f0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	11 c1       	rjmp	.+546    	; 0x2f0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	0f c1       	rjmp	.+542    	; 0x2f0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0d c1       	rjmp	.+538    	; 0x2f0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0b c1       	rjmp	.+534    	; 0x2f0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	09 c1       	rjmp	.+530    	; 0x2f0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	07 c1       	rjmp	.+526    	; 0x2f0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 00       	.word	0x0008	; ????
      e6:	00 00       	nop
      e8:	be 92       	st	-X, r11
      ea:	24 49       	sbci	r18, 0x94	; 148
      ec:	12 3e       	cpi	r17, 0xE2	; 226
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	be cd       	rjmp	.-1156   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
      f4:	cc cc       	rjmp	.-1640   	; 0xfffffa8e <__eeprom_end+0xff7efa8e>
      f6:	4c 3e       	cpi	r20, 0xEC	; 236
      f8:	00 00       	nop
      fa:	00 80       	ld	r0, Z
      fc:	be ab       	std	Y+54, r27	; 0x36
      fe:	aa aa       	std	Y+50, r10	; 0x32
     100:	aa 3e       	cpi	r26, 0xEA	; 234
     102:	00 00       	nop
     104:	00 00       	nop
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	00 08       	sbc	r0, r0
     112:	41 78       	andi	r20, 0x81	; 129
     114:	d3 bb       	out	0x13, r29	; 19
     116:	43 87       	std	Z+11, r20	; 0x0b
     118:	d1 13       	cpse	r29, r17
     11a:	3d 19       	sub	r19, r13
     11c:	0e 3c       	cpi	r16, 0xCE	; 206
     11e:	c3 bd       	out	0x23, r28	; 35
     120:	42 82       	std	Z+2, r4	; 0x02
     122:	ad 2b       	or	r26, r29
     124:	3e 68       	ori	r19, 0x8E	; 142
     126:	ec 82       	std	Y+4, r14	; 0x04
     128:	76 be       	out	0x36, r7	; 54
     12a:	d9 8f       	std	Y+25, r29	; 0x19
     12c:	e1 a9       	ldd	r30, Z+49	; 0x31
     12e:	3e 4c       	sbci	r19, 0xCE	; 206
     130:	80 ef       	ldi	r24, 0xF0	; 240
     132:	ff be       	out	0x3f, r15	; 63
     134:	01 c4       	rjmp	.+2050   	; 0x938 <__divsf3+0x12>
     136:	ff 7f       	andi	r31, 0xFF	; 255
     138:	3f 00       	.word	0x003f	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	1f 0b       	sbc	r17, r31
     140:	24 0b       	sbc	r18, r20
     142:	29 0b       	sbc	r18, r25
     144:	33 0b       	sbc	r19, r19
     146:	3d 0b       	sbc	r19, r29
     148:	b6 0b       	sbc	r27, r22
     14a:	47 0b       	sbc	r20, r23
     14c:	4f 0b       	sbc	r20, r31
     14e:	57 0b       	sbc	r21, r23
     150:	61 0b       	sbc	r22, r17
     152:	6b 0b       	sbc	r22, r27
     154:	75 0b       	sbc	r23, r21
     156:	84 0b       	sbc	r24, r20
     158:	8e 0b       	sbc	r24, r30
     15a:	b6 0b       	sbc	r27, r22
     15c:	98 0b       	sbc	r25, r24
     15e:	a2 0b       	sbc	r26, r18
     160:	ac 0b       	sbc	r26, r28
     162:	d9 0b       	sbc	r29, r25
     164:	dc 0b       	sbc	r29, r28
     166:	cb 0b       	sbc	r28, r27
     168:	cf 0b       	sbc	r28, r31
     16a:	d5 0b       	sbc	r29, r21
     16c:	13 0c       	add	r1, r3
     16e:	e0 0b       	sbc	r30, r16
     170:	e4 0b       	sbc	r30, r20
     172:	ea 0b       	sbc	r30, r26
     174:	ee 0b       	sbc	r30, r30
     176:	f2 0b       	sbc	r31, r18
     178:	f8 0b       	sbc	r31, r24
     17a:	fc 0b       	sbc	r31, r28
     17c:	00 0c       	add	r0, r0
     17e:	13 0c       	add	r1, r3
     180:	06 0c       	add	r0, r6
     182:	0a 0c       	add	r0, r10
     184:	0e 0c       	add	r0, r14

00000186 <__trampolines_end>:
     186:	00 00       	nop
     188:	0a 0b       	sbc	r16, r26
     18a:	02 09       	sbc	r16, r2
     18c:	0c 0d       	add	r16, r12
     18e:	0e 08       	sbc	r0, r14
     190:	07 03       	mulsu	r16, r23
     192:	04 01       	movw	r0, r8
	...
     1b0:	00 00       	nop
     1b2:	12 11       	cpse	r17, r2
     1b4:	10 00       	.word	0x0010	; ????
	...

000001cc <digital_pin_to_bit_mask_PGM>:
     1cc:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1dc:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1ec:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1fc:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     20c:	04 08 10 20 40 80                                   ... @.

00000212 <digital_pin_to_port_PGM>:
     212:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     222:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     232:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     242:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     252:	0b 0b 0b 0b 0b 0b                                   ......

00000258 <port_to_output_PGM>:
     258:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     268:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000272 <port_to_mode_PGM>:
     272:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     282:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000028c <__ctors_start>:
     28c:	a4 02       	muls	r26, r20
     28e:	5f 08       	sbc	r5, r15

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d1 e2       	ldi	r29, 0x21	; 33
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	0c bf       	out	0x3c, r16	; 60

000002a0 <__do_copy_data>:
     2a0:	12 e0       	ldi	r17, 0x02	; 2
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b2 e0       	ldi	r27, 0x02	; 2
     2a6:	e4 eb       	ldi	r30, 0xB4	; 180
     2a8:	f9 e1       	ldi	r31, 0x19	; 25
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	0b bf       	out	0x3b, r16	; 59
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x14>
     2b0:	07 90       	elpm	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	ac 34       	cpi	r26, 0x4C	; 76
     2b6:	b1 07       	cpc	r27, r17
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0x10>

000002ba <__do_clear_bss>:
     2ba:	23 e0       	ldi	r18, 0x03	; 3
     2bc:	ac e4       	ldi	r26, 0x4C	; 76
     2be:	b2 e0       	ldi	r27, 0x02	; 2
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	ae 30       	cpi	r26, 0x0E	; 14
     2c6:	b2 07       	cpc	r27, r18
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>

000002ca <__do_global_ctors>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	c8 e4       	ldi	r28, 0x48	; 72
     2ce:	d1 e0       	ldi	r29, 0x01	; 1
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <__do_global_ctors+0x16>
     2d4:	21 97       	sbiw	r28, 0x01	; 1
     2d6:	01 09       	sbc	r16, r1
     2d8:	80 2f       	mov	r24, r16
     2da:	fe 01       	movw	r30, r28
     2dc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__tablejump2__>
     2e0:	c6 34       	cpi	r28, 0x46	; 70
     2e2:	d1 07       	cpc	r29, r17
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	08 07       	cpc	r16, r24
     2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__do_global_ctors+0xa>
     2ea:	17 d7       	rcall	.+3630   	; 0x111a <main>
     2ec:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <_exit>

000002f0 <__bad_interrupt>:
     2f0:	87 ce       	rjmp	.-754    	; 0x0 <__vectors>

000002f2 <setup>:

const long interval = 500;
unsigned long previousMillis = 0;

void setup(){
	pinMode(red,OUTPUT);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	8a e0       	ldi	r24, 0x0A	; 10
     2f6:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
	pinMode(green,OUTPUT);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	89 e0       	ldi	r24, 0x09	; 9
     2fe:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
	pinMode(blue,OUTPUT);
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	88 e0       	ldi	r24, 0x08	; 8
     306:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     30a:	26 e0       	ldi	r18, 0x06	; 6
     30c:	40 e8       	ldi	r20, 0x80	; 128
     30e:	55 e2       	ldi	r21, 0x25	; 37
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	88 e6       	ldi	r24, 0x68	; 104
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	07 d6       	rcall	.+3086   	; 0xf28 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	lcd.begin(16,2);
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	42 e0       	ldi	r20, 0x02	; 2
     31e:	60 e1       	ldi	r22, 0x10	; 16
     320:	80 e5       	ldi	r24, 0x50	; 80
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	df d1       	rcall	.+958    	; 0x6e4 <_ZN13LiquidCrystal5beginEhhh>
	lcd.print("Temp ");
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	72 e0       	ldi	r23, 0x02	; 2
     32a:	80 e5       	ldi	r24, 0x50	; 80
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	3e d7       	rcall	.+3708   	; 0x11ac <_ZN5Print5printEPKc>
	lcd.setCursor(11,0);
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	6b e0       	ldi	r22, 0x0B	; 11
     334:	80 e5       	ldi	r24, 0x50	; 80
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	bc d1       	rcall	.+888    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(grad);
     33a:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     33e:	80 e5       	ldi	r24, 0x50	; 80
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	35 d7       	rcall	.+3690   	; 0x11ae <_ZN5Print5printEc>
	lcd.setCursor(0,1);
     344:	41 e0       	ldi	r20, 0x01	; 1
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	80 e5       	ldi	r24, 0x50	; 80
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	b2 d1       	rcall	.+868    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Farve:");
     34e:	68 e0       	ldi	r22, 0x08	; 8
     350:	72 e0       	ldi	r23, 0x02	; 2
     352:	80 e5       	ldi	r24, 0x50	; 80
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	2a c7       	rjmp	.+3668   	; 0x11ac <_ZN5Print5printEPKc>

00000358 <loop>:
     358:	8f 92       	push	r8
}

void loop(){
     35a:	9f 92       	push	r9
     35c:	af 92       	push	r10
     35e:	bf 92       	push	r11
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
	float sensorReading = analogRead(A0);
     368:	86 e3       	ldi	r24, 0x36	; 54
     36a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <analogRead>
	float temp = log(10000.0 * (1024.0/sensorReading - 1));
     36e:	bc 01       	movw	r22, r24
     370:	99 0f       	add	r25, r25
     372:	88 0b       	sbc	r24, r24
     374:	99 0b       	sbc	r25, r25
     376:	41 d3       	rcall	.+1666   	; 0x9fa <__floatsisf>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e8       	ldi	r24, 0x80	; 128
     382:	94 e4       	ldi	r25, 0x44	; 68
     384:	d0 d2       	rcall	.+1440   	; 0x926 <__divsf3>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	62 d2       	rcall	.+1220   	; 0x854 <__subsf3>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e4       	ldi	r19, 0x40	; 64
     394:	4c e1       	ldi	r20, 0x1C	; 28
     396:	56 e4       	ldi	r21, 0x46	; 70
     398:	29 d4       	rcall	.+2130   	; 0xbec <__mulsf3>
     39a:	e8 d3       	rcall	.+2000   	; 0xb6c <log>
     39c:	6b 01       	movw	r12, r22
     39e:	7c 01       	movw	r14, r24
	float tempK = 1/(0.001129148+(0.000234125+(0.0000000876741*temp*temp))*temp);
	float tempC = tempK - 273.15;
	
	unsigned long currentMillis = millis();
     3a0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <millis>
     3a4:	4b 01       	movw	r8, r22
     3a6:	5c 01       	movw	r10, r24

	if (currentMillis - previousMillis >= interval){
     3a8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     3ac:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__data_end+0x1>
     3b0:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <__data_end+0x2>
     3b4:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <__data_end+0x3>
     3b8:	a5 01       	movw	r20, r10
     3ba:	94 01       	movw	r18, r8
     3bc:	28 1b       	sub	r18, r24
     3be:	39 0b       	sbc	r19, r25
     3c0:	4a 0b       	sbc	r20, r26
     3c2:	5b 0b       	sbc	r21, r27
     3c4:	da 01       	movw	r26, r20
     3c6:	c9 01       	movw	r24, r18
     3c8:	84 3f       	cpi	r24, 0xF4	; 244
     3ca:	91 40       	sbci	r25, 0x01	; 1
     3cc:	a1 05       	cpc	r26, r1
     3ce:	b1 05       	cpc	r27, r1
     3d0:	08 f4       	brcc	.+2      	; 0x3d4 <loop+0x7c>
     3d2:	b1 c0       	rjmp	.+354    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>

void loop(){
	float sensorReading = analogRead(A0);
	float temp = log(10000.0 * (1024.0/sensorReading - 1));
	float tempK = 1/(0.001129148+(0.000234125+(0.0000000876741*temp*temp))*temp);
	float tempC = tempK - 273.15;
     3d4:	29 e5       	ldi	r18, 0x59	; 89
     3d6:	37 e4       	ldi	r19, 0x47	; 71
     3d8:	4c eb       	ldi	r20, 0xBC	; 188
     3da:	53 e3       	ldi	r21, 0x33	; 51
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	05 d4       	rcall	.+2058   	; 0xbec <__mulsf3>
     3e2:	a7 01       	movw	r20, r14
     3e4:	96 01       	movw	r18, r12
     3e6:	02 d4       	rcall	.+2052   	; 0xbec <__mulsf3>
     3e8:	23 e7       	ldi	r18, 0x73	; 115
     3ea:	3f e7       	ldi	r19, 0x7F	; 127
     3ec:	45 e7       	ldi	r20, 0x75	; 117
     3ee:	59 e3       	ldi	r21, 0x39	; 57
     3f0:	32 d2       	rcall	.+1124   	; 0x856 <__addsf3>
     3f2:	a7 01       	movw	r20, r14
     3f4:	96 01       	movw	r18, r12
     3f6:	fa d3       	rcall	.+2036   	; 0xbec <__mulsf3>
     3f8:	2b ee       	ldi	r18, 0xEB	; 235
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	43 e9       	ldi	r20, 0x93	; 147
     3fe:	5a e3       	ldi	r21, 0x3A	; 58
     400:	2a d2       	rcall	.+1108   	; 0x856 <__addsf3>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e8       	ldi	r24, 0x80	; 128
     40c:	9f e3       	ldi	r25, 0x3F	; 63
     40e:	8b d2       	rcall	.+1302   	; 0x926 <__divsf3>
     410:	23 e3       	ldi	r18, 0x33	; 51
     412:	33 e9       	ldi	r19, 0x93	; 147
     414:	48 e8       	ldi	r20, 0x88	; 136
     416:	53 e4       	ldi	r21, 0x43	; 67
     418:	1d d2       	rcall	.+1082   	; 0x854 <__subsf3>
     41a:	6b 01       	movw	r12, r22
     41c:	7c 01       	movw	r14, r24
	
	unsigned long currentMillis = millis();

	if (currentMillis - previousMillis >= interval){
		previousMillis = currentMillis;
     41e:	80 92 4c 02 	sts	0x024C, r8	; 0x80024c <__data_end>
     422:	90 92 4d 02 	sts	0x024D, r9	; 0x80024d <__data_end+0x1>
     426:	a0 92 4e 02 	sts	0x024E, r10	; 0x80024e <__data_end+0x2>
     42a:	b0 92 4f 02 	sts	0x024F, r11	; 0x80024f <__data_end+0x3>
		
		if (tempC > 26)
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 ed       	ldi	r20, 0xD0	; 208
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	91 d3       	rcall	.+1826   	; 0xb5a <__gesf2>
     438:	18 16       	cp	r1, r24
     43a:	bc f4       	brge	.+46     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		{
			analogWrite(red,duty);
     43c:	60 e4       	ldi	r22, 0x40	; 64
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			analogWrite(green,off);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			analogWrite(blue,off);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			lcd.setCursor(7,1);
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	67 e0       	ldi	r22, 0x07	; 7
     45e:	80 e5       	ldi	r24, 0x50	; 80
     460:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print("Red");
     462:	27 d1       	rcall	.+590    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
     464:	6f e0       	ldi	r22, 0x0F	; 15
     466:	72 e0       	ldi	r23, 0x02	; 2
			
		}
		else if (tempC < 25)
     468:	48 c0       	rjmp	.+144    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	48 ec       	ldi	r20, 0xC8	; 200
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	53 d2       	rcall	.+1190   	; 0x91e <__cmpsf2>
     478:	87 ff       	sbrs	r24, 7
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		{
			analogWrite(red,off);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			analogWrite(green,off);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	89 e0       	ldi	r24, 0x09	; 9
     48c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			analogWrite(blue,duty);
     490:	60 e4       	ldi	r22, 0x40	; 64
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	88 e0       	ldi	r24, 0x08	; 8
			lcd.setCursor(7,1);
     496:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	80 e5       	ldi	r24, 0x50	; 80
     4a0:	92 e0       	ldi	r25, 0x02	; 2
			lcd.print("blue");
     4a2:	07 d1       	rcall	.+526    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
     4a4:	63 e1       	ldi	r22, 0x13	; 19
		}
		else if (tempC >= 25 && tempC < 26)
     4a6:	72 e0       	ldi	r23, 0x02	; 2
     4a8:	28 c0       	rjmp	.+80     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	48 ec       	ldi	r20, 0xC8	; 200
     4b0:	51 e4       	ldi	r21, 0x41	; 65
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	51 d3       	rcall	.+1698   	; 0xb5a <__gesf2>
     4b8:	87 fd       	sbrc	r24, 7
     4ba:	22 c0       	rjmp	.+68     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 ed       	ldi	r20, 0xD0	; 208
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	2a d2       	rcall	.+1108   	; 0x91e <__cmpsf2>
     4ca:	87 ff       	sbrs	r24, 7
     4cc:	19 c0       	rjmp	.+50     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		{
			analogWrite(red,off);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
			analogWrite(green,duty);
     4d8:	60 e4       	ldi	r22, 0x40	; 64
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	89 e0       	ldi	r24, 0x09	; 9
			analogWrite(blue,off);
     4de:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
			lcd.setCursor(7,1);
     4e6:	88 e0       	ldi	r24, 0x08	; 8
     4e8:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <analogWrite>
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	67 e0       	ldi	r22, 0x07	; 7
			lcd.print("green");
     4f0:	80 e5       	ldi	r24, 0x50	; 80
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	de d0       	rcall	.+444    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
     4f6:	68 e1       	ldi	r22, 0x18	; 24
     4f8:	72 e0       	ldi	r23, 0x02	; 2
     4fa:	80 e5       	ldi	r24, 0x50	; 80
		}
		Serial.println(tempC);
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	56 d6       	rcall	.+3244   	; 0x11ac <_ZN5Print5printEPKc>
     500:	22 e0       	ldi	r18, 0x02	; 2
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	b7 01       	movw	r22, r14
     506:	a6 01       	movw	r20, r12
     508:	88 e6       	ldi	r24, 0x68	; 104
		lcd.setCursor(6,0);
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	7a d7       	rcall	.+3828   	; 0x1402 <_ZN5Print7printlnEdi>
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	66 e0       	ldi	r22, 0x06	; 6
     512:	80 e5       	ldi	r24, 0x50	; 80
     514:	92 e0       	ldi	r25, 0x02	; 2
		lcd.print(tempC);
     516:	cd d0       	rcall	.+410    	; 0x6b2 <_ZN13LiquidCrystal9setCursorEhh>
     518:	22 e0       	ldi	r18, 0x02	; 2
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	b7 01       	movw	r22, r14
     51e:	a6 01       	movw	r20, r12
     520:	80 e5       	ldi	r24, 0x50	; 80
	}
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	bf 90       	pop	r11
     52e:	af 90       	pop	r10
     530:	9f 90       	pop	r9
			lcd.setCursor(7,1);
			lcd.print("green");
		}
		Serial.println(tempC);
		lcd.setCursor(6,0);
		lcd.print(tempC);
     532:	8f 90       	pop	r8
     534:	65 c7       	rjmp	.+3786   	; 0x1400 <_ZN5Print5printEdi>
	}
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	9f 90       	pop	r9
     544:	8f 90       	pop	r8
     546:	08 95       	ret

00000548 <_GLOBAL__sub_I_lcd>:
     548:	cf 92       	push	r12
     54a:	ef 92       	push	r14
     54c:	0f 93       	push	r16
#include <Arduino.h>
#include <LiquidCrystal.h>

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	c8 2e       	mov	r12, r24
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	e9 2e       	mov	r14, r25
     556:	04 e0       	ldi	r16, 0x04	; 4
     558:	25 e0       	ldi	r18, 0x05	; 5
     55a:	4b e0       	ldi	r20, 0x0B	; 11
     55c:	6c e0       	ldi	r22, 0x0C	; 12
     55e:	80 e5       	ldi	r24, 0x50	; 80
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	54 d1       	rcall	.+680    	; 0x80c <_ZN13LiquidCrystalC1Ehhhhhh>
		}
		Serial.println(tempC);
		lcd.setCursor(6,0);
		lcd.print(tempC);
	}
     564:	0f 91       	pop	r16
     566:	ef 90       	pop	r14
     568:	cf 90       	pop	r12
     56a:	08 95       	ret

0000056c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	08 95       	ret

00000572 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     572:	08 95       	ret

00000574 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	8e 81       	ldd	r24, Y+6	; 0x06
     57e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a3 d7       	rcall	.+3910   	; 0x14ce <delayMicroseconds>
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	8e 81       	ldd	r24, Y+6	; 0x06
     58c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	9c d7       	rcall	.+3896   	; 0x14ce <delayMicroseconds>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	8e 81       	ldd	r24, Y+6	; 0x06
     59a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     59e:	84 e6       	ldi	r24, 0x64	; 100
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	93 c7       	rjmp	.+3878   	; 0x14ce <delayMicroseconds>

000005a8 <_ZN13LiquidCrystal10write4bitsEh>:
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	6c 01       	movw	r12, r24
     5ba:	7c 01       	movw	r14, r24
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	e8 0e       	add	r14, r24
     5c0:	f1 1c       	adc	r15, r1
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
     5c6:	06 2f       	mov	r16, r22
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	b8 01       	movw	r22, r16
     5cc:	0c 2e       	mov	r0, r28
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
     5d0:	75 95       	asr	r23
     5d2:	67 95       	ror	r22
     5d4:	0a 94       	dec	r0
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <_ZN13LiquidCrystal10write4bitsEh+0x28>
     5d8:	61 70       	andi	r22, 0x01	; 1
     5da:	f7 01       	movw	r30, r14
     5dc:	81 91       	ld	r24, Z+
     5de:	7f 01       	movw	r14, r30
     5e0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     5e4:	21 96       	adiw	r28, 0x01	; 1
     5e6:	c4 30       	cpi	r28, 0x04	; 4
     5e8:	d1 05       	cpc	r29, r1
     5ea:	79 f7       	brne	.-34     	; 0x5ca <_ZN13LiquidCrystal10write4bitsEh+0x22>
     5ec:	c6 01       	movw	r24, r12
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	ba cf       	rjmp	.-140    	; 0x574 <_ZN13LiquidCrystal11pulseEnableEv>

00000600 <_ZN13LiquidCrystal10write8bitsEh>:
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	6c 01       	movw	r12, r24
     612:	7c 01       	movw	r14, r24
     614:	87 e0       	ldi	r24, 0x07	; 7
     616:	e8 0e       	add	r14, r24
     618:	f1 1c       	adc	r15, r1
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d0 e0       	ldi	r29, 0x00	; 0
     61e:	06 2f       	mov	r16, r22
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	b8 01       	movw	r22, r16
     624:	0c 2e       	mov	r0, r28
     626:	02 c0       	rjmp	.+4      	; 0x62c <_ZN13LiquidCrystal10write8bitsEh+0x2c>
     628:	75 95       	asr	r23
     62a:	67 95       	ror	r22
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <_ZN13LiquidCrystal10write8bitsEh+0x28>
     630:	61 70       	andi	r22, 0x01	; 1
     632:	f7 01       	movw	r30, r14
     634:	81 91       	ld	r24, Z+
     636:	7f 01       	movw	r14, r30
     638:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     63c:	21 96       	adiw	r28, 0x01	; 1
     63e:	c8 30       	cpi	r28, 0x08	; 8
     640:	d1 05       	cpc	r29, r1
     642:	79 f7       	brne	.-34     	; 0x622 <_ZN13LiquidCrystal10write8bitsEh+0x22>
     644:	c6 01       	movw	r24, r12
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	8e cf       	rjmp	.-228    	; 0x574 <_ZN13LiquidCrystal11pulseEnableEv>

00000658 <_ZN13LiquidCrystal4sendEhh>:
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ec 01       	movw	r28, r24
     660:	16 2f       	mov	r17, r22
     662:	64 2f       	mov	r22, r20
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	8f 3f       	cpi	r24, 0xFF	; 255
     66e:	19 f0       	breq	.+6      	; 0x676 <_ZN13LiquidCrystal4sendEhh+0x1e>
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     676:	8f 85       	ldd	r24, Y+15	; 0x0f
     678:	61 2f       	mov	r22, r17
     67a:	84 ff       	sbrs	r24, 4
     67c:	05 c0       	rjmp	.+10     	; 0x688 <_ZN13LiquidCrystal4sendEhh+0x30>
     67e:	ce 01       	movw	r24, r28
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	bc cf       	rjmp	.-136    	; 0x600 <_ZN13LiquidCrystal10write8bitsEh>
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	75 95       	asr	r23
     68e:	67 95       	ror	r22
     690:	8a 95       	dec	r24
     692:	e1 f7       	brne	.-8      	; 0x68c <_ZN13LiquidCrystal4sendEhh+0x34>
     694:	ce 01       	movw	r24, r28
     696:	88 df       	rcall	.-240    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>
     698:	61 2f       	mov	r22, r17
     69a:	ce 01       	movw	r24, r28
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	82 cf       	rjmp	.-252    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>

000006a4 <_ZN13LiquidCrystal7commandEh>:
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	d8 cf       	rjmp	.-80     	; 0x658 <_ZN13LiquidCrystal4sendEhh>

000006a8 <_ZN13LiquidCrystal5clearEv>:
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	fc df       	rcall	.-8      	; 0x6a4 <_ZN13LiquidCrystal7commandEh>
     6ac:	80 ed       	ldi	r24, 0xD0	; 208
     6ae:	97 e0       	ldi	r25, 0x07	; 7
     6b0:	0e c7       	rjmp	.+3612   	; 0x14ce <delayMicroseconds>

000006b2 <_ZN13LiquidCrystal9setCursorEhh>:
     6b2:	fc 01       	movw	r30, r24
     6b4:	44 30       	cpi	r20, 0x04	; 4
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <_ZN13LiquidCrystal9setCursorEhh+0x8>
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	83 89       	ldd	r24, Z+19	; 0x13
     6bc:	48 17       	cp	r20, r24
     6be:	10 f0       	brcs	.+4      	; 0x6c4 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     6c0:	4f ef       	ldi	r20, 0xFF	; 255
     6c2:	48 0f       	add	r20, r24
     6c4:	df 01       	movw	r26, r30
     6c6:	a4 0f       	add	r26, r20
     6c8:	b1 1d       	adc	r27, r1
     6ca:	54 96       	adiw	r26, 0x14	; 20
     6cc:	9c 91       	ld	r25, X
     6ce:	69 0f       	add	r22, r25
     6d0:	60 68       	ori	r22, 0x80	; 128
     6d2:	cf 01       	movw	r24, r30
     6d4:	e7 cf       	rjmp	.-50     	; 0x6a4 <_ZN13LiquidCrystal7commandEh>

000006d6 <_ZN13LiquidCrystal7displayEv>:
     6d6:	fc 01       	movw	r30, r24
     6d8:	60 89       	ldd	r22, Z+16	; 0x10
     6da:	26 2f       	mov	r18, r22
     6dc:	24 60       	ori	r18, 0x04	; 4
     6de:	20 8b       	std	Z+16, r18	; 0x10
     6e0:	6c 60       	ori	r22, 0x0C	; 12
     6e2:	e0 cf       	rjmp	.-64     	; 0x6a4 <_ZN13LiquidCrystal7commandEh>

000006e4 <_ZN13LiquidCrystal5beginEhhh>:
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	42 30       	cpi	r20, 0x02	; 2
     6f4:	18 f0       	brcs	.+6      	; 0x6fc <_ZN13LiquidCrystal5beginEhhh+0x18>
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	88 60       	ori	r24, 0x08	; 8
     6fa:	8f 87       	std	Y+15, r24	; 0x0f
     6fc:	4b 8b       	std	Y+19, r20	; 0x13
     6fe:	1c 8a       	std	Y+20, r1	; 0x14
     700:	80 e4       	ldi	r24, 0x40	; 64
     702:	8d 8b       	std	Y+21, r24	; 0x15
     704:	6e 8b       	std	Y+22, r22	; 0x16
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	60 5c       	subi	r22, 0xC0	; 192
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	6f 8b       	std	Y+23, r22	; 0x17
     70e:	22 23       	and	r18, r18
     710:	29 f0       	breq	.+10     	; 0x71c <_ZN13LiquidCrystal5beginEhhh+0x38>
     712:	41 30       	cpi	r20, 0x01	; 1
     714:	19 f4       	brne	.+6      	; 0x71c <_ZN13LiquidCrystal5beginEhhh+0x38>
     716:	8f 85       	ldd	r24, Y+15	; 0x0f
     718:	84 60       	ori	r24, 0x04	; 4
     71a:	8f 87       	std	Y+15, r24	; 0x0f
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
     724:	8d 81       	ldd	r24, Y+5	; 0x05
     726:	8f 3f       	cpi	r24, 0xFF	; 255
     728:	19 f0       	breq	.+6      	; 0x730 <_ZN13LiquidCrystal5beginEhhh+0x4c>
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	8e 81       	ldd	r24, Y+6	; 0x06
     734:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
     738:	7e 01       	movw	r14, r28
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	e8 0e       	add	r14, r24
     73e:	f1 1c       	adc	r15, r1
     740:	00 e0       	ldi	r16, 0x00	; 0
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	8f 85       	ldd	r24, Y+15	; 0x0f
     746:	84 fd       	sbrc	r24, 4
     748:	03 c0       	rjmp	.+6      	; 0x750 <_ZN13LiquidCrystal5beginEhhh+0x6c>
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_ZN13LiquidCrystal5beginEhhh+0x70>
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	08 17       	cp	r16, r24
     756:	19 07       	cpc	r17, r25
     758:	4c f4       	brge	.+18     	; 0x76c <_ZN13LiquidCrystal5beginEhhh+0x88>
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	f7 01       	movw	r30, r14
     75e:	81 91       	ld	r24, Z+
     760:	7f 01       	movw	r14, r30
     762:	0e 94 14 0c 	call	0x1828	; 0x1828 <pinMode>
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	ec cf       	rjmp	.-40     	; 0x744 <_ZN13LiquidCrystal5beginEhhh+0x60>
     76c:	80 e5       	ldi	r24, 0x50	; 80
     76e:	93 ec       	ldi	r25, 0xC3	; 195
     770:	ae d6       	rcall	.+3420   	; 0x14ce <delayMicroseconds>
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	19 f0       	breq	.+6      	; 0x78e <_ZN13LiquidCrystal5beginEhhh+0xaa>
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <digitalWrite>
     78e:	6f 85       	ldd	r22, Y+15	; 0x0f
     790:	64 fd       	sbrc	r22, 4
     792:	16 c0       	rjmp	.+44     	; 0x7c0 <_ZN13LiquidCrystal5beginEhhh+0xdc>
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	ce 01       	movw	r24, r28
     798:	07 df       	rcall	.-498    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>
     79a:	84 e9       	ldi	r24, 0x94	; 148
     79c:	91 e1       	ldi	r25, 0x11	; 17
     79e:	97 d6       	rcall	.+3374   	; 0x14ce <delayMicroseconds>
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 df       	rcall	.-510    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>
     7a6:	84 e9       	ldi	r24, 0x94	; 148
     7a8:	91 e1       	ldi	r25, 0x11	; 17
     7aa:	91 d6       	rcall	.+3362   	; 0x14ce <delayMicroseconds>
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	ce 01       	movw	r24, r28
     7b0:	fb de       	rcall	.-522    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>
     7b2:	86 e9       	ldi	r24, 0x96	; 150
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	8b d6       	rcall	.+3350   	; 0x14ce <delayMicroseconds>
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	ce 01       	movw	r24, r28
     7bc:	f5 de       	rcall	.-534    	; 0x5a8 <_ZN13LiquidCrystal10write4bitsEh>
     7be:	11 c0       	rjmp	.+34     	; 0x7e2 <_ZN13LiquidCrystal5beginEhhh+0xfe>
     7c0:	60 62       	ori	r22, 0x20	; 32
     7c2:	ce 01       	movw	r24, r28
     7c4:	6f df       	rcall	.-290    	; 0x6a4 <_ZN13LiquidCrystal7commandEh>
     7c6:	84 e9       	ldi	r24, 0x94	; 148
     7c8:	91 e1       	ldi	r25, 0x11	; 17
     7ca:	81 d6       	rcall	.+3330   	; 0x14ce <delayMicroseconds>
     7cc:	6f 85       	ldd	r22, Y+15	; 0x0f
     7ce:	60 62       	ori	r22, 0x20	; 32
     7d0:	ce 01       	movw	r24, r28
     7d2:	68 df       	rcall	.-304    	; 0x6a4 <_ZN13LiquidCrystal7commandEh>
     7d4:	86 e9       	ldi	r24, 0x96	; 150
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	7a d6       	rcall	.+3316   	; 0x14ce <delayMicroseconds>
     7da:	6f 85       	ldd	r22, Y+15	; 0x0f
     7dc:	60 62       	ori	r22, 0x20	; 32
     7de:	ce 01       	movw	r24, r28
     7e0:	61 df       	rcall	.-318    	; 0x6a4 <_ZN13LiquidCrystal7commandEh>
     7e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e4:	60 62       	ori	r22, 0x20	; 32
     7e6:	ce 01       	movw	r24, r28
     7e8:	5d df       	rcall	.-326    	; 0x6a4 <_ZN13LiquidCrystal7commandEh>
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	88 8b       	std	Y+16, r24	; 0x10
     7ee:	ce 01       	movw	r24, r28
     7f0:	72 df       	rcall	.-284    	; 0x6d6 <_ZN13LiquidCrystal7displayEv>
     7f2:	ce 01       	movw	r24, r28
     7f4:	59 df       	rcall	.-334    	; 0x6a8 <_ZN13LiquidCrystal5clearEv>
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	89 8b       	std	Y+17, r24	; 0x11
     7fa:	66 e0       	ldi	r22, 0x06	; 6
     7fc:	ce 01       	movw	r24, r28
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	4c cf       	rjmp	.-360    	; 0x6a4 <_ZN13LiquidCrystal7commandEh>

0000080c <_ZN13LiquidCrystalC1Ehhhhhh>:
     80c:	cf 92       	push	r12
     80e:	ef 92       	push	r14
     810:	0f 93       	push	r16
     812:	fc 01       	movw	r30, r24
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	12 82       	std	Z+2, r1	; 0x02
     818:	82 e2       	ldi	r24, 0x22	; 34
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	80 83       	st	Z, r24
     820:	64 83       	std	Z+4, r22	; 0x04
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	85 83       	std	Z+5, r24	; 0x05
     826:	46 83       	std	Z+6, r20	; 0x06
     828:	27 83       	std	Z+7, r18	; 0x07
     82a:	00 87       	std	Z+8, r16	; 0x08
     82c:	e1 86       	std	Z+9, r14	; 0x09
     82e:	c2 86       	std	Z+10, r12	; 0x0a
     830:	13 86       	std	Z+11, r1	; 0x0b
     832:	14 86       	std	Z+12, r1	; 0x0c
     834:	15 86       	std	Z+13, r1	; 0x0d
     836:	16 86       	std	Z+14, r1	; 0x0e
     838:	17 86       	std	Z+15, r1	; 0x0f
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	60 e1       	ldi	r22, 0x10	; 16
     840:	cf 01       	movw	r24, r30
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	cf 90       	pop	r12
     848:	4d cf       	rjmp	.-358    	; 0x6e4 <_ZN13LiquidCrystal5beginEhhh>

0000084a <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	05 df       	rcall	.-502    	; 0x658 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	08 95       	ret

00000854 <__subsf3>:
     854:	50 58       	subi	r21, 0x80	; 128

00000856 <__addsf3>:
     856:	bb 27       	eor	r27, r27
     858:	aa 27       	eor	r26, r26
     85a:	0e d0       	rcall	.+28     	; 0x878 <__addsf3x>
     85c:	44 c1       	rjmp	.+648    	; 0xae6 <__fp_round>
     85e:	35 d1       	rcall	.+618    	; 0xaca <__fp_pscA>
     860:	30 f0       	brcs	.+12     	; 0x86e <__addsf3+0x18>
     862:	3a d1       	rcall	.+628    	; 0xad8 <__fp_pscB>
     864:	20 f0       	brcs	.+8      	; 0x86e <__addsf3+0x18>
     866:	31 f4       	brne	.+12     	; 0x874 <__addsf3+0x1e>
     868:	9f 3f       	cpi	r25, 0xFF	; 255
     86a:	11 f4       	brne	.+4      	; 0x870 <__addsf3+0x1a>
     86c:	1e f4       	brtc	.+6      	; 0x874 <__addsf3+0x1e>
     86e:	2a c1       	rjmp	.+596    	; 0xac4 <__fp_nan>
     870:	0e f4       	brtc	.+2      	; 0x874 <__addsf3+0x1e>
     872:	e0 95       	com	r30
     874:	e7 fb       	bst	r30, 7
     876:	20 c1       	rjmp	.+576    	; 0xab8 <__fp_inf>

00000878 <__addsf3x>:
     878:	e9 2f       	mov	r30, r25
     87a:	46 d1       	rcall	.+652    	; 0xb08 <__fp_split3>
     87c:	80 f3       	brcs	.-32     	; 0x85e <__addsf3+0x8>
     87e:	ba 17       	cp	r27, r26
     880:	62 07       	cpc	r22, r18
     882:	73 07       	cpc	r23, r19
     884:	84 07       	cpc	r24, r20
     886:	95 07       	cpc	r25, r21
     888:	18 f0       	brcs	.+6      	; 0x890 <__addsf3x+0x18>
     88a:	71 f4       	brne	.+28     	; 0x8a8 <__addsf3x+0x30>
     88c:	9e f5       	brtc	.+102    	; 0x8f4 <__addsf3x+0x7c>
     88e:	5e c1       	rjmp	.+700    	; 0xb4c <__fp_zero>
     890:	0e f4       	brtc	.+2      	; 0x894 <__addsf3x+0x1c>
     892:	e0 95       	com	r30
     894:	0b 2e       	mov	r0, r27
     896:	ba 2f       	mov	r27, r26
     898:	a0 2d       	mov	r26, r0
     89a:	0b 01       	movw	r0, r22
     89c:	b9 01       	movw	r22, r18
     89e:	90 01       	movw	r18, r0
     8a0:	0c 01       	movw	r0, r24
     8a2:	ca 01       	movw	r24, r20
     8a4:	a0 01       	movw	r20, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	ff 27       	eor	r31, r31
     8aa:	59 1b       	sub	r21, r25
     8ac:	99 f0       	breq	.+38     	; 0x8d4 <__addsf3x+0x5c>
     8ae:	59 3f       	cpi	r21, 0xF9	; 249
     8b0:	50 f4       	brcc	.+20     	; 0x8c6 <__addsf3x+0x4e>
     8b2:	50 3e       	cpi	r21, 0xE0	; 224
     8b4:	68 f1       	brcs	.+90     	; 0x910 <__addsf3x+0x98>
     8b6:	1a 16       	cp	r1, r26
     8b8:	f0 40       	sbci	r31, 0x00	; 0
     8ba:	a2 2f       	mov	r26, r18
     8bc:	23 2f       	mov	r18, r19
     8be:	34 2f       	mov	r19, r20
     8c0:	44 27       	eor	r20, r20
     8c2:	58 5f       	subi	r21, 0xF8	; 248
     8c4:	f3 cf       	rjmp	.-26     	; 0x8ac <__addsf3x+0x34>
     8c6:	46 95       	lsr	r20
     8c8:	37 95       	ror	r19
     8ca:	27 95       	ror	r18
     8cc:	a7 95       	ror	r26
     8ce:	f0 40       	sbci	r31, 0x00	; 0
     8d0:	53 95       	inc	r21
     8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__addsf3x+0x4e>
     8d4:	7e f4       	brtc	.+30     	; 0x8f4 <__addsf3x+0x7c>
     8d6:	1f 16       	cp	r1, r31
     8d8:	ba 0b       	sbc	r27, r26
     8da:	62 0b       	sbc	r22, r18
     8dc:	73 0b       	sbc	r23, r19
     8de:	84 0b       	sbc	r24, r20
     8e0:	ba f0       	brmi	.+46     	; 0x910 <__addsf3x+0x98>
     8e2:	91 50       	subi	r25, 0x01	; 1
     8e4:	a1 f0       	breq	.+40     	; 0x90e <__addsf3x+0x96>
     8e6:	ff 0f       	add	r31, r31
     8e8:	bb 1f       	adc	r27, r27
     8ea:	66 1f       	adc	r22, r22
     8ec:	77 1f       	adc	r23, r23
     8ee:	88 1f       	adc	r24, r24
     8f0:	c2 f7       	brpl	.-16     	; 0x8e2 <__addsf3x+0x6a>
     8f2:	0e c0       	rjmp	.+28     	; 0x910 <__addsf3x+0x98>
     8f4:	ba 0f       	add	r27, r26
     8f6:	62 1f       	adc	r22, r18
     8f8:	73 1f       	adc	r23, r19
     8fa:	84 1f       	adc	r24, r20
     8fc:	48 f4       	brcc	.+18     	; 0x910 <__addsf3x+0x98>
     8fe:	87 95       	ror	r24
     900:	77 95       	ror	r23
     902:	67 95       	ror	r22
     904:	b7 95       	ror	r27
     906:	f7 95       	ror	r31
     908:	9e 3f       	cpi	r25, 0xFE	; 254
     90a:	08 f0       	brcs	.+2      	; 0x90e <__addsf3x+0x96>
     90c:	b3 cf       	rjmp	.-154    	; 0x874 <__addsf3+0x1e>
     90e:	93 95       	inc	r25
     910:	88 0f       	add	r24, r24
     912:	08 f0       	brcs	.+2      	; 0x916 <__addsf3x+0x9e>
     914:	99 27       	eor	r25, r25
     916:	ee 0f       	add	r30, r30
     918:	97 95       	ror	r25
     91a:	87 95       	ror	r24
     91c:	08 95       	ret

0000091e <__cmpsf2>:
     91e:	a8 d0       	rcall	.+336    	; 0xa70 <__fp_cmp>
     920:	08 f4       	brcc	.+2      	; 0x924 <__cmpsf2+0x6>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	08 95       	ret

00000926 <__divsf3>:
     926:	0c d0       	rcall	.+24     	; 0x940 <__divsf3x>
     928:	de c0       	rjmp	.+444    	; 0xae6 <__fp_round>
     92a:	d6 d0       	rcall	.+428    	; 0xad8 <__fp_pscB>
     92c:	40 f0       	brcs	.+16     	; 0x93e <__divsf3+0x18>
     92e:	cd d0       	rcall	.+410    	; 0xaca <__fp_pscA>
     930:	30 f0       	brcs	.+12     	; 0x93e <__divsf3+0x18>
     932:	21 f4       	brne	.+8      	; 0x93c <__divsf3+0x16>
     934:	5f 3f       	cpi	r21, 0xFF	; 255
     936:	19 f0       	breq	.+6      	; 0x93e <__divsf3+0x18>
     938:	bf c0       	rjmp	.+382    	; 0xab8 <__fp_inf>
     93a:	51 11       	cpse	r21, r1
     93c:	08 c1       	rjmp	.+528    	; 0xb4e <__fp_szero>
     93e:	c2 c0       	rjmp	.+388    	; 0xac4 <__fp_nan>

00000940 <__divsf3x>:
     940:	e3 d0       	rcall	.+454    	; 0xb08 <__fp_split3>
     942:	98 f3       	brcs	.-26     	; 0x92a <__divsf3+0x4>

00000944 <__divsf3_pse>:
     944:	99 23       	and	r25, r25
     946:	c9 f3       	breq	.-14     	; 0x93a <__divsf3+0x14>
     948:	55 23       	and	r21, r21
     94a:	b1 f3       	breq	.-20     	; 0x938 <__divsf3+0x12>
     94c:	95 1b       	sub	r25, r21
     94e:	55 0b       	sbc	r21, r21
     950:	bb 27       	eor	r27, r27
     952:	aa 27       	eor	r26, r26
     954:	62 17       	cp	r22, r18
     956:	73 07       	cpc	r23, r19
     958:	84 07       	cpc	r24, r20
     95a:	38 f0       	brcs	.+14     	; 0x96a <__divsf3_pse+0x26>
     95c:	9f 5f       	subi	r25, 0xFF	; 255
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	22 0f       	add	r18, r18
     962:	33 1f       	adc	r19, r19
     964:	44 1f       	adc	r20, r20
     966:	aa 1f       	adc	r26, r26
     968:	a9 f3       	breq	.-22     	; 0x954 <__divsf3_pse+0x10>
     96a:	33 d0       	rcall	.+102    	; 0x9d2 <__divsf3_pse+0x8e>
     96c:	0e 2e       	mov	r0, r30
     96e:	3a f0       	brmi	.+14     	; 0x97e <__divsf3_pse+0x3a>
     970:	e0 e8       	ldi	r30, 0x80	; 128
     972:	30 d0       	rcall	.+96     	; 0x9d4 <__divsf3_pse+0x90>
     974:	91 50       	subi	r25, 0x01	; 1
     976:	50 40       	sbci	r21, 0x00	; 0
     978:	e6 95       	lsr	r30
     97a:	00 1c       	adc	r0, r0
     97c:	ca f7       	brpl	.-14     	; 0x970 <__divsf3_pse+0x2c>
     97e:	29 d0       	rcall	.+82     	; 0x9d2 <__divsf3_pse+0x8e>
     980:	fe 2f       	mov	r31, r30
     982:	27 d0       	rcall	.+78     	; 0x9d2 <__divsf3_pse+0x8e>
     984:	66 0f       	add	r22, r22
     986:	77 1f       	adc	r23, r23
     988:	88 1f       	adc	r24, r24
     98a:	bb 1f       	adc	r27, r27
     98c:	26 17       	cp	r18, r22
     98e:	37 07       	cpc	r19, r23
     990:	48 07       	cpc	r20, r24
     992:	ab 07       	cpc	r26, r27
     994:	b0 e8       	ldi	r27, 0x80	; 128
     996:	09 f0       	breq	.+2      	; 0x99a <__divsf3_pse+0x56>
     998:	bb 0b       	sbc	r27, r27
     99a:	80 2d       	mov	r24, r0
     99c:	bf 01       	movw	r22, r30
     99e:	ff 27       	eor	r31, r31
     9a0:	93 58       	subi	r25, 0x83	; 131
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	2a f0       	brmi	.+10     	; 0x9b0 <__divsf3_pse+0x6c>
     9a6:	9e 3f       	cpi	r25, 0xFE	; 254
     9a8:	51 05       	cpc	r21, r1
     9aa:	68 f0       	brcs	.+26     	; 0x9c6 <__divsf3_pse+0x82>
     9ac:	85 c0       	rjmp	.+266    	; 0xab8 <__fp_inf>
     9ae:	cf c0       	rjmp	.+414    	; 0xb4e <__fp_szero>
     9b0:	5f 3f       	cpi	r21, 0xFF	; 255
     9b2:	ec f3       	brlt	.-6      	; 0x9ae <__divsf3_pse+0x6a>
     9b4:	98 3e       	cpi	r25, 0xE8	; 232
     9b6:	dc f3       	brlt	.-10     	; 0x9ae <__divsf3_pse+0x6a>
     9b8:	86 95       	lsr	r24
     9ba:	77 95       	ror	r23
     9bc:	67 95       	ror	r22
     9be:	b7 95       	ror	r27
     9c0:	f7 95       	ror	r31
     9c2:	9f 5f       	subi	r25, 0xFF	; 255
     9c4:	c9 f7       	brne	.-14     	; 0x9b8 <__divsf3_pse+0x74>
     9c6:	88 0f       	add	r24, r24
     9c8:	91 1d       	adc	r25, r1
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret
     9d2:	e1 e0       	ldi	r30, 0x01	; 1
     9d4:	66 0f       	add	r22, r22
     9d6:	77 1f       	adc	r23, r23
     9d8:	88 1f       	adc	r24, r24
     9da:	bb 1f       	adc	r27, r27
     9dc:	62 17       	cp	r22, r18
     9de:	73 07       	cpc	r23, r19
     9e0:	84 07       	cpc	r24, r20
     9e2:	ba 07       	cpc	r27, r26
     9e4:	20 f0       	brcs	.+8      	; 0x9ee <__divsf3_pse+0xaa>
     9e6:	62 1b       	sub	r22, r18
     9e8:	73 0b       	sbc	r23, r19
     9ea:	84 0b       	sbc	r24, r20
     9ec:	ba 0b       	sbc	r27, r26
     9ee:	ee 1f       	adc	r30, r30
     9f0:	88 f7       	brcc	.-30     	; 0x9d4 <__divsf3_pse+0x90>
     9f2:	e0 95       	com	r30
     9f4:	08 95       	ret

000009f6 <__floatunsisf>:
     9f6:	e8 94       	clt
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__floatsisf+0x12>

000009fa <__floatsisf>:
     9fa:	97 fb       	bst	r25, 7
     9fc:	3e f4       	brtc	.+14     	; 0xa0c <__floatsisf+0x12>
     9fe:	90 95       	com	r25
     a00:	80 95       	com	r24
     a02:	70 95       	com	r23
     a04:	61 95       	neg	r22
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	8f 4f       	sbci	r24, 0xFF	; 255
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	99 23       	and	r25, r25
     a0e:	a9 f0       	breq	.+42     	; 0xa3a <__floatsisf+0x40>
     a10:	f9 2f       	mov	r31, r25
     a12:	96 e9       	ldi	r25, 0x96	; 150
     a14:	bb 27       	eor	r27, r27
     a16:	93 95       	inc	r25
     a18:	f6 95       	lsr	r31
     a1a:	87 95       	ror	r24
     a1c:	77 95       	ror	r23
     a1e:	67 95       	ror	r22
     a20:	b7 95       	ror	r27
     a22:	f1 11       	cpse	r31, r1
     a24:	f8 cf       	rjmp	.-16     	; 0xa16 <__floatsisf+0x1c>
     a26:	fa f4       	brpl	.+62     	; 0xa66 <__floatsisf+0x6c>
     a28:	bb 0f       	add	r27, r27
     a2a:	11 f4       	brne	.+4      	; 0xa30 <__floatsisf+0x36>
     a2c:	60 ff       	sbrs	r22, 0
     a2e:	1b c0       	rjmp	.+54     	; 0xa66 <__floatsisf+0x6c>
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	8f 4f       	sbci	r24, 0xFF	; 255
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	16 c0       	rjmp	.+44     	; 0xa66 <__floatsisf+0x6c>
     a3a:	88 23       	and	r24, r24
     a3c:	11 f0       	breq	.+4      	; 0xa42 <__floatsisf+0x48>
     a3e:	96 e9       	ldi	r25, 0x96	; 150
     a40:	11 c0       	rjmp	.+34     	; 0xa64 <__floatsisf+0x6a>
     a42:	77 23       	and	r23, r23
     a44:	21 f0       	breq	.+8      	; 0xa4e <__floatsisf+0x54>
     a46:	9e e8       	ldi	r25, 0x8E	; 142
     a48:	87 2f       	mov	r24, r23
     a4a:	76 2f       	mov	r23, r22
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__floatsisf+0x5e>
     a4e:	66 23       	and	r22, r22
     a50:	71 f0       	breq	.+28     	; 0xa6e <__floatsisf+0x74>
     a52:	96 e8       	ldi	r25, 0x86	; 134
     a54:	86 2f       	mov	r24, r22
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	2a f0       	brmi	.+10     	; 0xa66 <__floatsisf+0x6c>
     a5c:	9a 95       	dec	r25
     a5e:	66 0f       	add	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	88 1f       	adc	r24, r24
     a64:	da f7       	brpl	.-10     	; 0xa5c <__floatsisf+0x62>
     a66:	88 0f       	add	r24, r24
     a68:	96 95       	lsr	r25
     a6a:	87 95       	ror	r24
     a6c:	97 f9       	bld	r25, 7
     a6e:	08 95       	ret

00000a70 <__fp_cmp>:
     a70:	99 0f       	add	r25, r25
     a72:	00 08       	sbc	r0, r0
     a74:	55 0f       	add	r21, r21
     a76:	aa 0b       	sbc	r26, r26
     a78:	e0 e8       	ldi	r30, 0x80	; 128
     a7a:	fe ef       	ldi	r31, 0xFE	; 254
     a7c:	16 16       	cp	r1, r22
     a7e:	17 06       	cpc	r1, r23
     a80:	e8 07       	cpc	r30, r24
     a82:	f9 07       	cpc	r31, r25
     a84:	c0 f0       	brcs	.+48     	; 0xab6 <__fp_cmp+0x46>
     a86:	12 16       	cp	r1, r18
     a88:	13 06       	cpc	r1, r19
     a8a:	e4 07       	cpc	r30, r20
     a8c:	f5 07       	cpc	r31, r21
     a8e:	98 f0       	brcs	.+38     	; 0xab6 <__fp_cmp+0x46>
     a90:	62 1b       	sub	r22, r18
     a92:	73 0b       	sbc	r23, r19
     a94:	84 0b       	sbc	r24, r20
     a96:	95 0b       	sbc	r25, r21
     a98:	39 f4       	brne	.+14     	; 0xaa8 <__fp_cmp+0x38>
     a9a:	0a 26       	eor	r0, r26
     a9c:	61 f0       	breq	.+24     	; 0xab6 <__fp_cmp+0x46>
     a9e:	23 2b       	or	r18, r19
     aa0:	24 2b       	or	r18, r20
     aa2:	25 2b       	or	r18, r21
     aa4:	21 f4       	brne	.+8      	; 0xaae <__fp_cmp+0x3e>
     aa6:	08 95       	ret
     aa8:	0a 26       	eor	r0, r26
     aaa:	09 f4       	brne	.+2      	; 0xaae <__fp_cmp+0x3e>
     aac:	a1 40       	sbci	r26, 0x01	; 1
     aae:	a6 95       	lsr	r26
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	81 1d       	adc	r24, r1
     ab4:	81 1d       	adc	r24, r1
     ab6:	08 95       	ret

00000ab8 <__fp_inf>:
     ab8:	97 f9       	bld	r25, 7
     aba:	9f 67       	ori	r25, 0x7F	; 127
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	08 95       	ret

00000ac4 <__fp_nan>:
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	80 ec       	ldi	r24, 0xC0	; 192
     ac8:	08 95       	ret

00000aca <__fp_pscA>:
     aca:	00 24       	eor	r0, r0
     acc:	0a 94       	dec	r0
     ace:	16 16       	cp	r1, r22
     ad0:	17 06       	cpc	r1, r23
     ad2:	18 06       	cpc	r1, r24
     ad4:	09 06       	cpc	r0, r25
     ad6:	08 95       	ret

00000ad8 <__fp_pscB>:
     ad8:	00 24       	eor	r0, r0
     ada:	0a 94       	dec	r0
     adc:	12 16       	cp	r1, r18
     ade:	13 06       	cpc	r1, r19
     ae0:	14 06       	cpc	r1, r20
     ae2:	05 06       	cpc	r0, r21
     ae4:	08 95       	ret

00000ae6 <__fp_round>:
     ae6:	09 2e       	mov	r0, r25
     ae8:	03 94       	inc	r0
     aea:	00 0c       	add	r0, r0
     aec:	11 f4       	brne	.+4      	; 0xaf2 <__fp_round+0xc>
     aee:	88 23       	and	r24, r24
     af0:	52 f0       	brmi	.+20     	; 0xb06 <__fp_round+0x20>
     af2:	bb 0f       	add	r27, r27
     af4:	40 f4       	brcc	.+16     	; 0xb06 <__fp_round+0x20>
     af6:	bf 2b       	or	r27, r31
     af8:	11 f4       	brne	.+4      	; 0xafe <__fp_round+0x18>
     afa:	60 ff       	sbrs	r22, 0
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <__fp_round+0x20>
     afe:	6f 5f       	subi	r22, 0xFF	; 255
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	8f 4f       	sbci	r24, 0xFF	; 255
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	08 95       	ret

00000b08 <__fp_split3>:
     b08:	57 fd       	sbrc	r21, 7
     b0a:	90 58       	subi	r25, 0x80	; 128
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	59 f0       	breq	.+22     	; 0xb28 <__fp_splitA+0x10>
     b12:	5f 3f       	cpi	r21, 0xFF	; 255
     b14:	71 f0       	breq	.+28     	; 0xb32 <__fp_splitA+0x1a>
     b16:	47 95       	ror	r20

00000b18 <__fp_splitA>:
     b18:	88 0f       	add	r24, r24
     b1a:	97 fb       	bst	r25, 7
     b1c:	99 1f       	adc	r25, r25
     b1e:	61 f0       	breq	.+24     	; 0xb38 <__fp_splitA+0x20>
     b20:	9f 3f       	cpi	r25, 0xFF	; 255
     b22:	79 f0       	breq	.+30     	; 0xb42 <__fp_splitA+0x2a>
     b24:	87 95       	ror	r24
     b26:	08 95       	ret
     b28:	12 16       	cp	r1, r18
     b2a:	13 06       	cpc	r1, r19
     b2c:	14 06       	cpc	r1, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	f2 cf       	rjmp	.-28     	; 0xb16 <__fp_split3+0xe>
     b32:	46 95       	lsr	r20
     b34:	f1 df       	rcall	.-30     	; 0xb18 <__fp_splitA>
     b36:	08 c0       	rjmp	.+16     	; 0xb48 <__fp_splitA+0x30>
     b38:	16 16       	cp	r1, r22
     b3a:	17 06       	cpc	r1, r23
     b3c:	18 06       	cpc	r1, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	f1 cf       	rjmp	.-30     	; 0xb24 <__fp_splitA+0xc>
     b42:	86 95       	lsr	r24
     b44:	71 05       	cpc	r23, r1
     b46:	61 05       	cpc	r22, r1
     b48:	08 94       	sec
     b4a:	08 95       	ret

00000b4c <__fp_zero>:
     b4c:	e8 94       	clt

00000b4e <__fp_szero>:
     b4e:	bb 27       	eor	r27, r27
     b50:	66 27       	eor	r22, r22
     b52:	77 27       	eor	r23, r23
     b54:	cb 01       	movw	r24, r22
     b56:	97 f9       	bld	r25, 7
     b58:	08 95       	ret

00000b5a <__gesf2>:
     b5a:	8a df       	rcall	.-236    	; 0xa70 <__fp_cmp>
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <__gesf2+0x6>
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	08 95       	ret
     b62:	0e f0       	brts	.+2      	; 0xb66 <__gesf2+0xc>
     b64:	a6 c0       	rjmp	.+332    	; 0xcb2 <__fp_mpack>
     b66:	ae cf       	rjmp	.-164    	; 0xac4 <__fp_nan>
     b68:	68 94       	set
     b6a:	a6 cf       	rjmp	.-180    	; 0xab8 <__fp_inf>

00000b6c <log>:
     b6c:	d5 df       	rcall	.-86     	; 0xb18 <__fp_splitA>
     b6e:	c8 f3       	brcs	.-14     	; 0xb62 <__gesf2+0x8>
     b70:	99 23       	and	r25, r25
     b72:	d1 f3       	breq	.-12     	; 0xb68 <__gesf2+0xe>
     b74:	c6 f3       	brts	.-16     	; 0xb66 <__gesf2+0xc>
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	1f 93       	push	r17
     b7c:	0f 93       	push	r16
     b7e:	ff 92       	push	r15
     b80:	c9 2f       	mov	r28, r25
     b82:	dd 27       	eor	r29, r29
     b84:	88 23       	and	r24, r24
     b86:	2a f0       	brmi	.+10     	; 0xb92 <log+0x26>
     b88:	21 97       	sbiw	r28, 0x01	; 1
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	da f7       	brpl	.-10     	; 0xb88 <log+0x1c>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e8       	ldi	r20, 0x80	; 128
     b98:	5f eb       	ldi	r21, 0xBF	; 191
     b9a:	9f e3       	ldi	r25, 0x3F	; 63
     b9c:	88 39       	cpi	r24, 0x98	; 152
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <log+0x3c>
     ba0:	80 3e       	cpi	r24, 0xE0	; 224
     ba2:	30 f0       	brcs	.+12     	; 0xbb0 <log+0x44>
     ba4:	21 96       	adiw	r28, 0x01	; 1
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	56 de       	rcall	.-852    	; 0x856 <__addsf3>
     baa:	e4 ee       	ldi	r30, 0xE4	; 228
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <log+0x4a>
     bb0:	52 de       	rcall	.-860    	; 0x856 <__addsf3>
     bb2:	e1 e1       	ldi	r30, 0x11	; 17
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	8b d0       	rcall	.+278    	; 0xcce <__fp_powser>
     bb8:	8b 01       	movw	r16, r22
     bba:	be 01       	movw	r22, r28
     bbc:	ec 01       	movw	r28, r24
     bbe:	fb 2e       	mov	r15, r27
     bc0:	6f 57       	subi	r22, 0x7F	; 127
     bc2:	71 09       	sbc	r23, r1
     bc4:	75 95       	asr	r23
     bc6:	77 1f       	adc	r23, r23
     bc8:	88 0b       	sbc	r24, r24
     bca:	99 0b       	sbc	r25, r25
     bcc:	16 df       	rcall	.-468    	; 0x9fa <__floatsisf>
     bce:	28 e1       	ldi	r18, 0x18	; 24
     bd0:	32 e7       	ldi	r19, 0x72	; 114
     bd2:	41 e3       	ldi	r20, 0x31	; 49
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	16 d0       	rcall	.+44     	; 0xc04 <__mulsf3x>
     bd8:	af 2d       	mov	r26, r15
     bda:	98 01       	movw	r18, r16
     bdc:	ae 01       	movw	r20, r28
     bde:	ff 90       	pop	r15
     be0:	0f 91       	pop	r16
     be2:	1f 91       	pop	r17
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	47 de       	rcall	.-882    	; 0x878 <__addsf3x>
     bea:	7d cf       	rjmp	.-262    	; 0xae6 <__fp_round>

00000bec <__mulsf3>:
     bec:	0b d0       	rcall	.+22     	; 0xc04 <__mulsf3x>
     bee:	7b cf       	rjmp	.-266    	; 0xae6 <__fp_round>
     bf0:	6c df       	rcall	.-296    	; 0xaca <__fp_pscA>
     bf2:	28 f0       	brcs	.+10     	; 0xbfe <__mulsf3+0x12>
     bf4:	71 df       	rcall	.-286    	; 0xad8 <__fp_pscB>
     bf6:	18 f0       	brcs	.+6      	; 0xbfe <__mulsf3+0x12>
     bf8:	95 23       	and	r25, r21
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__mulsf3+0x12>
     bfc:	5d cf       	rjmp	.-326    	; 0xab8 <__fp_inf>
     bfe:	62 cf       	rjmp	.-316    	; 0xac4 <__fp_nan>
     c00:	11 24       	eor	r1, r1
     c02:	a5 cf       	rjmp	.-182    	; 0xb4e <__fp_szero>

00000c04 <__mulsf3x>:
     c04:	81 df       	rcall	.-254    	; 0xb08 <__fp_split3>
     c06:	a0 f3       	brcs	.-24     	; 0xbf0 <__mulsf3+0x4>

00000c08 <__mulsf3_pse>:
     c08:	95 9f       	mul	r25, r21
     c0a:	d1 f3       	breq	.-12     	; 0xc00 <__mulsf3+0x14>
     c0c:	95 0f       	add	r25, r21
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	55 1f       	adc	r21, r21
     c12:	62 9f       	mul	r22, r18
     c14:	f0 01       	movw	r30, r0
     c16:	72 9f       	mul	r23, r18
     c18:	bb 27       	eor	r27, r27
     c1a:	f0 0d       	add	r31, r0
     c1c:	b1 1d       	adc	r27, r1
     c1e:	63 9f       	mul	r22, r19
     c20:	aa 27       	eor	r26, r26
     c22:	f0 0d       	add	r31, r0
     c24:	b1 1d       	adc	r27, r1
     c26:	aa 1f       	adc	r26, r26
     c28:	64 9f       	mul	r22, r20
     c2a:	66 27       	eor	r22, r22
     c2c:	b0 0d       	add	r27, r0
     c2e:	a1 1d       	adc	r26, r1
     c30:	66 1f       	adc	r22, r22
     c32:	82 9f       	mul	r24, r18
     c34:	22 27       	eor	r18, r18
     c36:	b0 0d       	add	r27, r0
     c38:	a1 1d       	adc	r26, r1
     c3a:	62 1f       	adc	r22, r18
     c3c:	73 9f       	mul	r23, r19
     c3e:	b0 0d       	add	r27, r0
     c40:	a1 1d       	adc	r26, r1
     c42:	62 1f       	adc	r22, r18
     c44:	83 9f       	mul	r24, r19
     c46:	a0 0d       	add	r26, r0
     c48:	61 1d       	adc	r22, r1
     c4a:	22 1f       	adc	r18, r18
     c4c:	74 9f       	mul	r23, r20
     c4e:	33 27       	eor	r19, r19
     c50:	a0 0d       	add	r26, r0
     c52:	61 1d       	adc	r22, r1
     c54:	23 1f       	adc	r18, r19
     c56:	84 9f       	mul	r24, r20
     c58:	60 0d       	add	r22, r0
     c5a:	21 1d       	adc	r18, r1
     c5c:	82 2f       	mov	r24, r18
     c5e:	76 2f       	mov	r23, r22
     c60:	6a 2f       	mov	r22, r26
     c62:	11 24       	eor	r1, r1
     c64:	9f 57       	subi	r25, 0x7F	; 127
     c66:	50 40       	sbci	r21, 0x00	; 0
     c68:	8a f0       	brmi	.+34     	; 0xc8c <__mulsf3_pse+0x84>
     c6a:	e1 f0       	breq	.+56     	; 0xca4 <__mulsf3_pse+0x9c>
     c6c:	88 23       	and	r24, r24
     c6e:	4a f0       	brmi	.+18     	; 0xc82 <__mulsf3_pse+0x7a>
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	bb 1f       	adc	r27, r27
     c76:	66 1f       	adc	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	88 1f       	adc	r24, r24
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	50 40       	sbci	r21, 0x00	; 0
     c80:	a9 f7       	brne	.-22     	; 0xc6c <__mulsf3_pse+0x64>
     c82:	9e 3f       	cpi	r25, 0xFE	; 254
     c84:	51 05       	cpc	r21, r1
     c86:	70 f0       	brcs	.+28     	; 0xca4 <__mulsf3_pse+0x9c>
     c88:	17 cf       	rjmp	.-466    	; 0xab8 <__fp_inf>
     c8a:	61 cf       	rjmp	.-318    	; 0xb4e <__fp_szero>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	ec f3       	brlt	.-6      	; 0xc8a <__mulsf3_pse+0x82>
     c90:	98 3e       	cpi	r25, 0xE8	; 232
     c92:	dc f3       	brlt	.-10     	; 0xc8a <__mulsf3_pse+0x82>
     c94:	86 95       	lsr	r24
     c96:	77 95       	ror	r23
     c98:	67 95       	ror	r22
     c9a:	b7 95       	ror	r27
     c9c:	f7 95       	ror	r31
     c9e:	e7 95       	ror	r30
     ca0:	9f 5f       	subi	r25, 0xFF	; 255
     ca2:	c1 f7       	brne	.-16     	; 0xc94 <__mulsf3_pse+0x8c>
     ca4:	fe 2b       	or	r31, r30
     ca6:	88 0f       	add	r24, r24
     ca8:	91 1d       	adc	r25, r1
     caa:	96 95       	lsr	r25
     cac:	87 95       	ror	r24
     cae:	97 f9       	bld	r25, 7
     cb0:	08 95       	ret

00000cb2 <__fp_mpack>:
     cb2:	9f 3f       	cpi	r25, 0xFF	; 255
     cb4:	31 f0       	breq	.+12     	; 0xcc2 <__fp_mpack_finite+0xc>

00000cb6 <__fp_mpack_finite>:
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	20 f4       	brcc	.+8      	; 0xcc2 <__fp_mpack_finite+0xc>
     cba:	87 95       	ror	r24
     cbc:	77 95       	ror	r23
     cbe:	67 95       	ror	r22
     cc0:	b7 95       	ror	r27
     cc2:	88 0f       	add	r24, r24
     cc4:	91 1d       	adc	r25, r1
     cc6:	96 95       	lsr	r25
     cc8:	87 95       	ror	r24
     cca:	97 f9       	bld	r25, 7
     ccc:	08 95       	ret

00000cce <__fp_powser>:
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	1f 93       	push	r17
     cd4:	0f 93       	push	r16
     cd6:	ff 92       	push	r15
     cd8:	ef 92       	push	r14
     cda:	df 92       	push	r13
     cdc:	7b 01       	movw	r14, r22
     cde:	8c 01       	movw	r16, r24
     ce0:	68 94       	set
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <__fp_powser+0x20>
     ce4:	da 2e       	mov	r13, r26
     ce6:	ef 01       	movw	r28, r30
     ce8:	8d df       	rcall	.-230    	; 0xc04 <__mulsf3x>
     cea:	fe 01       	movw	r30, r28
     cec:	e8 94       	clt
     cee:	a5 91       	lpm	r26, Z+
     cf0:	25 91       	lpm	r18, Z+
     cf2:	35 91       	lpm	r19, Z+
     cf4:	45 91       	lpm	r20, Z+
     cf6:	55 91       	lpm	r21, Z+
     cf8:	ae f3       	brts	.-22     	; 0xce4 <__fp_powser+0x16>
     cfa:	ef 01       	movw	r28, r30
     cfc:	bd dd       	rcall	.-1158   	; 0x878 <__addsf3x>
     cfe:	fe 01       	movw	r30, r28
     d00:	97 01       	movw	r18, r14
     d02:	a8 01       	movw	r20, r16
     d04:	da 94       	dec	r13
     d06:	79 f7       	brne	.-34     	; 0xce6 <__fp_powser+0x18>
     d08:	df 90       	pop	r13
     d0a:	ef 90       	pop	r14
     d0c:	ff 90       	pop	r15
     d0e:	0f 91       	pop	r16
     d10:	1f 91       	pop	r17
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d18:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d1a:	91 8d       	ldd	r25, Z+25	; 0x19
     d1c:	22 8d       	ldd	r18, Z+26	; 0x1a
     d1e:	89 2f       	mov	r24, r25
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	80 5c       	subi	r24, 0xC0	; 192
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	82 1b       	sub	r24, r18
     d28:	91 09       	sbc	r25, r1
}
     d2a:	8f 73       	andi	r24, 0x3F	; 63
     d2c:	99 27       	eor	r25, r25
     d2e:	08 95       	ret

00000d30 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d30:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d32:	91 8d       	ldd	r25, Z+25	; 0x19
     d34:	82 8d       	ldd	r24, Z+26	; 0x1a
     d36:	98 17       	cp	r25, r24
     d38:	31 f0       	breq	.+12     	; 0xd46 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d3c:	e8 0f       	add	r30, r24
     d3e:	f1 1d       	adc	r31, r1
     d40:	85 8d       	ldd	r24, Z+29	; 0x1d
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d4a:	08 95       	ret

00000d4c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d4c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d4e:	91 8d       	ldd	r25, Z+25	; 0x19
     d50:	82 8d       	ldd	r24, Z+26	; 0x1a
     d52:	98 17       	cp	r25, r24
     d54:	61 f0       	breq	.+24     	; 0xd6e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d56:	82 8d       	ldd	r24, Z+26	; 0x1a
     d58:	df 01       	movw	r26, r30
     d5a:	a8 0f       	add	r26, r24
     d5c:	b1 1d       	adc	r27, r1
     d5e:	5d 96       	adiw	r26, 0x1d	; 29
     d60:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d62:	92 8d       	ldd	r25, Z+26	; 0x1a
     d64:	9f 5f       	subi	r25, 0xFF	; 255
     d66:	9f 73       	andi	r25, 0x3F	; 63
     d68:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d72:	08 95       	ret

00000d74 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     d74:	fc 01       	movw	r30, r24
     d76:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     d78:	44 8d       	ldd	r20, Z+28	; 0x1c
     d7a:	25 2f       	mov	r18, r21
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	84 2f       	mov	r24, r20
     d80:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     d82:	82 1b       	sub	r24, r18
     d84:	93 0b       	sbc	r25, r19
     d86:	54 17       	cp	r21, r20
     d88:	10 f0       	brcs	.+4      	; 0xd8e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     d8a:	cf 96       	adiw	r24, 0x3f	; 63
     d8c:	08 95       	ret
  return tail - head - 1;
     d8e:	01 97       	sbiw	r24, 0x01	; 1
}
     d90:	08 95       	ret

00000d92 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d92:	86 e5       	ldi	r24, 0x56	; 86
     d94:	98 e0       	ldi	r25, 0x08	; 8
     d96:	89 2b       	or	r24, r25
     d98:	39 f0       	breq	.+14     	; 0xda8 <_Z14serialEventRunv+0x16>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	89 2b       	or	r24, r25
     da0:	19 f0       	breq	.+6      	; 0xda8 <_Z14serialEventRunv+0x16>
     da2:	84 d1       	rcall	.+776    	; 0x10ac <_Z17Serial0_availablev>
     da4:	81 11       	cpse	r24, r1
     da6:	25 c0       	rjmp	.+74     	; 0xdf2 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	89 2b       	or	r24, r25
     dae:	41 f0       	breq	.+16     	; 0xdc0 <_Z14serialEventRunv+0x2e>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	89 2b       	or	r24, r25
     db6:	21 f0       	breq	.+8      	; 0xdc0 <_Z14serialEventRunv+0x2e>
     db8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dbc:	81 11       	cpse	r24, r1
     dbe:	1c c0       	rjmp	.+56     	; 0xdf8 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	89 2b       	or	r24, r25
     dc6:	41 f0       	breq	.+16     	; 0xdd8 <_Z14serialEventRunv+0x46>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	89 2b       	or	r24, r25
     dce:	21 f0       	breq	.+8      	; 0xdd8 <_Z14serialEventRunv+0x46>
     dd0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dd4:	81 11       	cpse	r24, r1
     dd6:	13 c0       	rjmp	.+38     	; 0xdfe <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	89 2b       	or	r24, r25
     dde:	a1 f0       	breq	.+40     	; 0xe08 <_Z14serialEventRunv+0x76>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	89 2b       	or	r24, r25
     de6:	81 f0       	breq	.+32     	; 0xe08 <_Z14serialEventRunv+0x76>
     de8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dec:	81 11       	cpse	r24, r1
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <_Z14serialEventRunv+0x72>
     df0:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     df2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     df6:	d8 cf       	rjmp	.-80     	; 0xda8 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     df8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     dfc:	e1 cf       	rjmp	.-62     	; 0xdc0 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     dfe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e02:	ea cf       	rjmp	.-44     	; 0xdd8 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     e04:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     e08:	08 95       	ret

00000e0a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     e0a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     e0c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e0e:	df 01       	movw	r26, r30
     e10:	a8 0f       	add	r26, r24
     e12:	b1 1d       	adc	r27, r1
     e14:	a3 5a       	subi	r26, 0xA3	; 163
     e16:	bf 4f       	sbci	r27, 0xFF	; 255
     e18:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     e1a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	8f 73       	andi	r24, 0x3F	; 63
     e22:	99 27       	eor	r25, r25
     e24:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e26:	a6 89       	ldd	r26, Z+22	; 0x16
     e28:	b7 89       	ldd	r27, Z+23	; 0x17
     e2a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e2c:	a0 89       	ldd	r26, Z+16	; 0x10
     e2e:	b1 89       	ldd	r27, Z+17	; 0x11
     e30:	8c 91       	ld	r24, X
     e32:	83 70       	andi	r24, 0x03	; 3
     e34:	80 64       	ori	r24, 0x40	; 64
     e36:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     e38:	93 8d       	ldd	r25, Z+27	; 0x1b
     e3a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e3c:	98 13       	cpse	r25, r24
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e40:	02 88       	ldd	r0, Z+18	; 0x12
     e42:	f3 89       	ldd	r31, Z+19	; 0x13
     e44:	e0 2d       	mov	r30, r0
     e46:	80 81       	ld	r24, Z
     e48:	8f 7d       	andi	r24, 0xDF	; 223
     e4a:	80 83       	st	Z, r24
     e4c:	08 95       	ret

00000e4e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	ec 01       	movw	r28, r24
  _written = true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e60:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e62:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e64:	98 13       	cpse	r25, r24
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <_ZN14HardwareSerial5writeEh+0x24>
     e68:	e8 89       	ldd	r30, Y+16	; 0x10
     e6a:	f9 89       	ldd	r31, Y+17	; 0x11
     e6c:	80 81       	ld	r24, Z
     e6e:	85 fd       	sbrc	r24, 5
     e70:	25 c0       	rjmp	.+74     	; 0xebc <_ZN14HardwareSerial5writeEh+0x6e>
     e72:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e74:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	0f 5f       	subi	r16, 0xFF	; 255
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	0f 73       	andi	r16, 0x3F	; 63
     e7e:	11 27       	eor	r17, r17
     e80:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e84:	e8 12       	cpse	r14, r24
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	07 fc       	sbrc	r0, 7
     e8c:	fa cf       	rjmp	.-12     	; 0xe82 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e8e:	e8 89       	ldd	r30, Y+16	; 0x10
     e90:	f9 89       	ldd	r31, Y+17	; 0x11
     e92:	80 81       	ld	r24, Z
     e94:	85 ff       	sbrs	r24, 5
     e96:	f5 cf       	rjmp	.-22     	; 0xe82 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e98:	ce 01       	movw	r24, r28
     e9a:	b7 df       	rcall	.-146    	; 0xe0a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e9c:	f2 cf       	rjmp	.-28     	; 0xe82 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea0:	fe 01       	movw	r30, r28
     ea2:	e8 0f       	add	r30, r24
     ea4:	f1 1d       	adc	r31, r1
     ea6:	e3 5a       	subi	r30, 0xA3	; 163
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     eac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eae:	f8 94       	cli
    _tx_buffer_head = i;
     eb0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     eb2:	ea 89       	ldd	r30, Y+18	; 0x12
     eb4:	fb 89       	ldd	r31, Y+19	; 0x13
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ebc:	9f b7       	in	r25, 0x3f	; 63
     ebe:	f8 94       	cli
      *_udr = c;
     ec0:	ee 89       	ldd	r30, Y+22	; 0x16
     ec2:	ff 89       	ldd	r31, Y+23	; 0x17
     ec4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ec6:	e8 89       	ldd	r30, Y+16	; 0x10
     ec8:	f9 89       	ldd	r31, Y+17	; 0x11
     eca:	80 81       	ld	r24, Z
     ecc:	83 70       	andi	r24, 0x03	; 3
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ed2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     eec:	88 8d       	ldd	r24, Y+24	; 0x18
     eee:	88 23       	and	r24, r24
     ef0:	c1 f0       	breq	.+48     	; 0xf22 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ef2:	ea 89       	ldd	r30, Y+18	; 0x12
     ef4:	fb 89       	ldd	r31, Y+19	; 0x13
     ef6:	80 81       	ld	r24, Z
     ef8:	85 fd       	sbrc	r24, 5
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <_ZN14HardwareSerial5flushEv+0x20>
     efc:	a8 89       	ldd	r26, Y+16	; 0x10
     efe:	b9 89       	ldd	r27, Y+17	; 0x11
     f00:	8c 91       	ld	r24, X
     f02:	86 fd       	sbrc	r24, 6
     f04:	0e c0       	rjmp	.+28     	; 0xf22 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	07 fc       	sbrc	r0, 7
     f0a:	f5 cf       	rjmp	.-22     	; 0xef6 <_ZN14HardwareSerial5flushEv+0x10>
     f0c:	80 81       	ld	r24, Z
     f0e:	85 ff       	sbrs	r24, 5
     f10:	f2 cf       	rjmp	.-28     	; 0xef6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     f12:	a8 89       	ldd	r26, Y+16	; 0x10
     f14:	b9 89       	ldd	r27, Y+17	; 0x11
     f16:	8c 91       	ld	r24, X
     f18:	85 ff       	sbrs	r24, 5
     f1a:	ed cf       	rjmp	.-38     	; 0xef6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     f1c:	ce 01       	movw	r24, r28
     f1e:	75 df       	rcall	.-278    	; 0xe0a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f20:	e8 cf       	rjmp	.-48     	; 0xef2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	6a 01       	movw	r12, r20
     f3a:	7b 01       	movw	r14, r22
     f3c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f3e:	e8 89       	ldd	r30, Y+16	; 0x10
     f40:	f9 89       	ldd	r31, Y+17	; 0x11
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f46:	41 15       	cp	r20, r1
     f48:	51 4e       	sbci	r21, 0xE1	; 225
     f4a:	61 05       	cpc	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	a9 f0       	breq	.+42     	; 0xf7a <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	79 e0       	ldi	r23, 0x09	; 9
     f54:	8d e3       	ldi	r24, 0x3D	; 61
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a7 01       	movw	r20, r14
     f5a:	96 01       	movw	r18, r12
     f5c:	ff d4       	rcall	.+2558   	; 0x195c <__udivmodsi4>
     f5e:	da 01       	movw	r26, r20
     f60:	c9 01       	movw	r24, r18
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	b6 95       	lsr	r27
     f6a:	a7 95       	ror	r26
     f6c:	97 95       	ror	r25
     f6e:	87 95       	ror	r24
     f70:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f72:	21 15       	cp	r18, r1
     f74:	80 e1       	ldi	r24, 0x10	; 16
     f76:	38 07       	cpc	r19, r24
     f78:	a0 f0       	brcs	.+40     	; 0xfa2 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
     f7a:	e8 89       	ldd	r30, Y+16	; 0x10
     f7c:	f9 89       	ldd	r31, Y+17	; 0x11
     f7e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f80:	60 e8       	ldi	r22, 0x80	; 128
     f82:	74 e8       	ldi	r23, 0x84	; 132
     f84:	8e e1       	ldi	r24, 0x1E	; 30
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a7 01       	movw	r20, r14
     f8a:	96 01       	movw	r18, r12
     f8c:	e7 d4       	rcall	.+2510   	; 0x195c <__udivmodsi4>
     f8e:	da 01       	movw	r26, r20
     f90:	c9 01       	movw	r24, r18
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	a1 09       	sbc	r26, r1
     f96:	b1 09       	sbc	r27, r1
     f98:	b6 95       	lsr	r27
     f9a:	a7 95       	ror	r26
     f9c:	97 95       	ror	r25
     f9e:	87 95       	ror	r24
     fa0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     fa2:	ec 85       	ldd	r30, Y+12	; 0x0c
     fa4:	fd 85       	ldd	r31, Y+13	; 0x0d
     fa6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     fa8:	ee 85       	ldd	r30, Y+14	; 0x0e
     faa:	ff 85       	ldd	r31, Y+15	; 0x0f
     fac:	20 83       	st	Z, r18

  _written = false;
     fae:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     fb0:	ec 89       	ldd	r30, Y+20	; 0x14
     fb2:	fd 89       	ldd	r31, Y+21	; 0x15
     fb4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     fb6:	ea 89       	ldd	r30, Y+18	; 0x12
     fb8:	fb 89       	ldd	r31, Y+19	; 0x13
     fba:	80 81       	ld	r24, Z
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     fc0:	ea 89       	ldd	r30, Y+18	; 0x12
     fc2:	fb 89       	ldd	r31, Y+19	; 0x13
     fc4:	80 81       	ld	r24, Z
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     fca:	ea 89       	ldd	r30, Y+18	; 0x12
     fcc:	fb 89       	ldd	r31, Y+19	; 0x13
     fce:	80 81       	ld	r24, Z
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fd4:	ea 89       	ldd	r30, Y+18	; 0x12
     fd6:	fb 89       	ldd	r31, Y+19	; 0x13
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	80 83       	st	Z, r24
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	08 95       	ret

00000fee <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	0b b6       	in	r0, 0x3b	; 59
     ffa:	0f 92       	push	r0
     ffc:	2f 93       	push	r18
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	ef 93       	push	r30
    1004:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1006:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <Serial+0x10>
    100a:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <Serial+0x11>
    100e:	80 81       	ld	r24, Z
    1010:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <Serial+0x16>
    1014:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <Serial+0x17>
    1018:	82 fd       	sbrc	r24, 2
    101a:	12 c0       	rjmp	.+36     	; 0x1040 <__EEPROM_REGION_LENGTH__+0x40>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    101c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    101e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <Serial+0x19>
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1026:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <Serial+0x1a>
    102a:	82 17       	cp	r24, r18
    102c:	51 f0       	breq	.+20     	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
      _rx_buffer[_rx_buffer_head] = c;
    102e:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <Serial+0x19>
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	e8 59       	subi	r30, 0x98	; 152
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    103a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <Serial+0x19>
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1040:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	9f 91       	pop	r25
    1048:	8f 91       	pop	r24
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0b be       	out	0x3b, r0	; 59
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    105a:	1f 92       	push	r1
    105c:	0f 92       	push	r0
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	0f 92       	push	r0
    1062:	11 24       	eor	r1, r1
    1064:	0b b6       	in	r0, 0x3b	; 59
    1066:	0f 92       	push	r0
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1080:	88 e6       	ldi	r24, 0x68	; 104
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	c2 de       	rcall	.-636    	; 0xe0a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0b be       	out	0x3b, r0	; 59
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    10ac:	88 e6       	ldi	r24, 0x68	; 104
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	33 de       	rcall	.-922    	; 0xd18 <_ZN14HardwareSerial9availableEv>
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	89 2b       	or	r24, r25
    10b6:	09 f4       	brne	.+2      	; 0x10ba <_Z17Serial0_availablev+0xe>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
}
    10ba:	82 2f       	mov	r24, r18
    10bc:	08 95       	ret

000010be <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    10be:	e8 e6       	ldi	r30, 0x68	; 104
    10c0:	f2 e0       	ldi	r31, 0x02	; 2
    10c2:	13 82       	std	Z+3, r1	; 0x03
    10c4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    10c6:	88 ee       	ldi	r24, 0xE8	; 232
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	a0 e0       	ldi	r26, 0x00	; 0
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	84 83       	std	Z+4, r24	; 0x04
    10d0:	95 83       	std	Z+5, r25	; 0x05
    10d2:	a6 83       	std	Z+6, r26	; 0x06
    10d4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10d6:	8e e2       	ldi	r24, 0x2E	; 46
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	85 ec       	ldi	r24, 0xC5	; 197
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	95 87       	std	Z+13, r25	; 0x0d
    10e4:	84 87       	std	Z+12, r24	; 0x0c
    10e6:	84 ec       	ldi	r24, 0xC4	; 196
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	97 87       	std	Z+15, r25	; 0x0f
    10ec:	86 87       	std	Z+14, r24	; 0x0e
    10ee:	80 ec       	ldi	r24, 0xC0	; 192
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	91 8b       	std	Z+17, r25	; 0x11
    10f4:	80 8b       	std	Z+16, r24	; 0x10
    10f6:	81 ec       	ldi	r24, 0xC1	; 193
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	93 8b       	std	Z+19, r25	; 0x13
    10fc:	82 8b       	std	Z+18, r24	; 0x12
    10fe:	82 ec       	ldi	r24, 0xC2	; 194
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	95 8b       	std	Z+21, r25	; 0x15
    1104:	84 8b       	std	Z+20, r24	; 0x14
    1106:	86 ec       	ldi	r24, 0xC6	; 198
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	97 8b       	std	Z+23, r25	; 0x17
    110c:	86 8b       	std	Z+22, r24	; 0x16
    110e:	11 8e       	std	Z+25, r1	; 0x19
    1110:	12 8e       	std	Z+26, r1	; 0x1a
    1112:	13 8e       	std	Z+27, r1	; 0x1b
    1114:	14 8e       	std	Z+28, r1	; 0x1c
    1116:	08 95       	ret

00001118 <initVariant>:
    1118:	08 95       	ret

0000111a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    111a:	e4 d1       	rcall	.+968    	; 0x14e4 <init>

	initVariant();
    111c:	fd df       	rcall	.-6      	; 0x1118 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    111e:	e9 d8       	rcall	.-3630   	; 0x2f2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1120:	c9 ec       	ldi	r28, 0xC9	; 201
    1122:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1124:	19 d9       	rcall	.-3534   	; 0x358 <loop>
		if (serialEventRun) serialEventRun();
    1126:	20 97       	sbiw	r28, 0x00	; 0
    1128:	e9 f3       	breq	.-6      	; 0x1124 <main+0xa>
    112a:	33 de       	rcall	.-922    	; 0xd92 <_Z14serialEventRunv>
    112c:	fb cf       	rjmp	.-10     	; 0x1124 <main+0xa>

0000112e <_ZN5Print5writeEPKhj>:
    112e:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	6c 01       	movw	r12, r24
    1140:	7a 01       	movw	r14, r20
    1142:	8b 01       	movw	r16, r22
    1144:	c0 e0       	ldi	r28, 0x00	; 0
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	ce 15       	cp	r28, r14
    114a:	df 05       	cpc	r29, r15
    114c:	81 f0       	breq	.+32     	; 0x116e <_ZN5Print5writeEPKhj+0x40>
    114e:	d8 01       	movw	r26, r16
    1150:	6d 91       	ld	r22, X+
    1152:	8d 01       	movw	r16, r26
    1154:	d6 01       	movw	r26, r12
    1156:	ed 91       	ld	r30, X+
    1158:	fc 91       	ld	r31, X
    115a:	01 90       	ld	r0, Z+
    115c:	f0 81       	ld	r31, Z
    115e:	e0 2d       	mov	r30, r0
    1160:	c6 01       	movw	r24, r12
    1162:	19 95       	eicall
    1164:	89 2b       	or	r24, r25
    1166:	11 f0       	breq	.+4      	; 0x116c <_ZN5Print5writeEPKhj+0x3e>
    1168:	21 96       	adiw	r28, 0x01	; 1
    116a:	ee cf       	rjmp	.-36     	; 0x1148 <_ZN5Print5writeEPKhj+0x1a>
    116c:	7e 01       	movw	r14, r28
    116e:	c7 01       	movw	r24, r14
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	08 95       	ret

00001182 <_ZN5Print5writeEPKc>:
    1182:	61 15       	cp	r22, r1
    1184:	71 05       	cpc	r23, r1
    1186:	79 f0       	breq	.+30     	; 0x11a6 <_ZN5Print5writeEPKc+0x24>
    1188:	fb 01       	movw	r30, r22
    118a:	01 90       	ld	r0, Z+
    118c:	00 20       	and	r0, r0
    118e:	e9 f7       	brne	.-6      	; 0x118a <_ZN5Print5writeEPKc+0x8>
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	af 01       	movw	r20, r30
    1194:	46 1b       	sub	r20, r22
    1196:	57 0b       	sbc	r21, r23
    1198:	dc 01       	movw	r26, r24
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	02 80       	ldd	r0, Z+2	; 0x02
    11a0:	f3 81       	ldd	r31, Z+3	; 0x03
    11a2:	e0 2d       	mov	r30, r0
    11a4:	19 94       	eijmp
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	08 95       	ret

000011ac <_ZN5Print5printEPKc>:
    11ac:	ea cf       	rjmp	.-44     	; 0x1182 <_ZN5Print5writeEPKc>

000011ae <_ZN5Print5printEc>:
    11ae:	dc 01       	movw	r26, r24
    11b0:	ed 91       	ld	r30, X+
    11b2:	fc 91       	ld	r31, X
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	19 94       	eijmp

000011bc <_ZN5Print7printlnEv>:
    11bc:	6c e3       	ldi	r22, 0x3C	; 60
    11be:	72 e0       	ldi	r23, 0x02	; 2
    11c0:	e0 cf       	rjmp	.-64     	; 0x1182 <_ZN5Print5writeEPKc>

000011c2 <_ZN5Print11printNumberEmh>:
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	a1 97       	sbiw	r28, 0x21	; 33
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	7c 01       	movw	r14, r24
    11e8:	fa 01       	movw	r30, r20
    11ea:	cb 01       	movw	r24, r22
    11ec:	19 a2       	std	Y+33, r1	; 0x21
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <_ZN5Print11printNumberEmh+0x32>
    11f2:	2a e0       	ldi	r18, 0x0A	; 10
    11f4:	8e 01       	movw	r16, r28
    11f6:	0f 5d       	subi	r16, 0xDF	; 223
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	82 2e       	mov	r8, r18
    11fc:	91 2c       	mov	r9, r1
    11fe:	a1 2c       	mov	r10, r1
    1200:	b1 2c       	mov	r11, r1
    1202:	bf 01       	movw	r22, r30
    1204:	a5 01       	movw	r20, r10
    1206:	94 01       	movw	r18, r8
    1208:	a9 d3       	rcall	.+1874   	; 0x195c <__udivmodsi4>
    120a:	f9 01       	movw	r30, r18
    120c:	ca 01       	movw	r24, r20
    120e:	01 50       	subi	r16, 0x01	; 1
    1210:	11 09       	sbc	r17, r1
    1212:	6a 30       	cpi	r22, 0x0A	; 10
    1214:	10 f4       	brcc	.+4      	; 0x121a <_ZN5Print11printNumberEmh+0x58>
    1216:	60 5d       	subi	r22, 0xD0	; 208
    1218:	01 c0       	rjmp	.+2      	; 0x121c <_ZN5Print11printNumberEmh+0x5a>
    121a:	69 5c       	subi	r22, 0xC9	; 201
    121c:	d8 01       	movw	r26, r16
    121e:	6c 93       	st	X, r22
    1220:	23 2b       	or	r18, r19
    1222:	24 2b       	or	r18, r20
    1224:	25 2b       	or	r18, r21
    1226:	69 f7       	brne	.-38     	; 0x1202 <_ZN5Print11printNumberEmh+0x40>
    1228:	b8 01       	movw	r22, r16
    122a:	c7 01       	movw	r24, r14
    122c:	aa df       	rcall	.-172    	; 0x1182 <_ZN5Print5writeEPKc>
    122e:	a1 96       	adiw	r28, 0x21	; 33
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	9f 90       	pop	r9
    124c:	8f 90       	pop	r8
    124e:	08 95       	ret

00001250 <_ZN5Print5printEmi>:
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	41 f4       	brne	.+16     	; 0x1266 <_ZN5Print5printEmi+0x16>
    1256:	dc 01       	movw	r26, r24
    1258:	ed 91       	ld	r30, X+
    125a:	fc 91       	ld	r31, X
    125c:	01 90       	ld	r0, Z+
    125e:	f0 81       	ld	r31, Z
    1260:	e0 2d       	mov	r30, r0
    1262:	64 2f       	mov	r22, r20
    1264:	19 94       	eijmp
    1266:	ad cf       	rjmp	.-166    	; 0x11c2 <_ZN5Print11printNumberEmh>

00001268 <_ZN5Print5printEji>:
    1268:	9a 01       	movw	r18, r20
    126a:	ab 01       	movw	r20, r22
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	ef cf       	rjmp	.-34     	; 0x1250 <_ZN5Print5printEmi>

00001272 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1272:	7f 92       	push	r7
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	8c 01       	movw	r16, r24
    128e:	6a 01       	movw	r12, r20
    1290:	7b 01       	movw	r14, r22
    1292:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1294:	9a 01       	movw	r18, r20
    1296:	ab 01       	movw	r20, r22
    1298:	c7 01       	movw	r24, r14
    129a:	b6 01       	movw	r22, r12
    129c:	5b d3       	rcall	.+1718   	; 0x1954 <__unordsf2>
    129e:	88 23       	and	r24, r24
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    12a2:	6f e3       	ldi	r22, 0x3F	; 63
    12a4:	72 e0       	ldi	r23, 0x02	; 2
    12a6:	24 c0       	rjmp	.+72     	; 0x12f0 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    12a8:	46 01       	movw	r8, r12
    12aa:	57 01       	movw	r10, r14
    12ac:	e8 94       	clt
    12ae:	b7 f8       	bld	r11, 7
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	5f e7       	ldi	r21, 0x7F	; 127
    12b8:	c5 01       	movw	r24, r10
    12ba:	b4 01       	movw	r22, r8
    12bc:	4b d3       	rcall	.+1686   	; 0x1954 <__unordsf2>
    12be:	81 11       	cpse	r24, r1
    12c0:	0c c0       	rjmp	.+24     	; 0x12da <_ZN5Print10printFloatEdh+0x68>
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	5f e7       	ldi	r21, 0x7F	; 127
    12ca:	c5 01       	movw	r24, r10
    12cc:	b4 01       	movw	r22, r8
    12ce:	27 db       	rcall	.-2482   	; 0x91e <__cmpsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	1c f4       	brge	.+6      	; 0x12da <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    12d4:	63 e4       	ldi	r22, 0x43	; 67
    12d6:	72 e0       	ldi	r23, 0x02	; 2
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    12da:	2f ef       	ldi	r18, 0xFF	; 255
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	5f e4       	ldi	r21, 0x4F	; 79
    12e2:	c7 01       	movw	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	39 dc       	rcall	.-1934   	; 0xb5a <__gesf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	8c f4       	brge	.+34     	; 0x130e <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    12ec:	67 e4       	ldi	r22, 0x47	; 71
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    130a:	7f 90       	pop	r7
    130c:	3a cf       	rjmp	.-396    	; 0x1182 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    130e:	2f ef       	ldi	r18, 0xFF	; 255
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	5f ec       	ldi	r21, 0xCF	; 207
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	01 db       	rcall	.-2558   	; 0x91e <__cmpsf2>
    131c:	87 fd       	sbrc	r24, 7
    131e:	e6 cf       	rjmp	.-52     	; 0x12ec <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	f9 da       	rcall	.-2574   	; 0x91e <__cmpsf2>
    132c:	87 ff       	sbrs	r24, 7
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    1330:	6d e2       	ldi	r22, 0x2D	; 45
    1332:	c8 01       	movw	r24, r16
    1334:	3c df       	rcall	.-392    	; 0x11ae <_ZN5Print5printEc>
    1336:	ec 01       	movw	r28, r24
    1338:	f7 fa       	bst	r15, 7
     number = -number;
    133a:	f0 94       	com	r15
    133c:	f7 f8       	bld	r15, 7
    133e:	f0 94       	com	r15
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <_ZN5Print10printFloatEdh+0xd4>
    1342:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1344:	d0 e0       	ldi	r29, 0x00	; 0
    1346:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1348:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1350:	7b 14       	cp	r7, r11
    1352:	39 f0       	breq	.+14     	; 0x1362 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e2       	ldi	r20, 0x20	; 32
    135a:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    135c:	e4 da       	rcall	.-2616   	; 0x926 <__divsf3>
    135e:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    1360:	f7 cf       	rjmp	.-18     	; 0x1350 <_ZN5Print10printFloatEdh+0xde>
    1362:	a7 01       	movw	r20, r14
    1364:	96 01       	movw	r18, r12
    1366:	77 da       	rcall	.-2834   	; 0x856 <__addsf3>
    1368:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    136a:	7c 01       	movw	r14, r24
    136c:	c7 d2       	rcall	.+1422   	; 0x18fc <__fixunssfsi>
    136e:	4b 01       	movw	r8, r22
    1370:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	ab 01       	movw	r20, r22
    1376:	bc 01       	movw	r22, r24
    1378:	c8 01       	movw	r24, r16
    137a:	23 df       	rcall	.-442    	; 0x11c2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    137c:	c8 0f       	add	r28, r24
    137e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1380:	77 20       	and	r7, r7
    1382:	79 f1       	breq	.+94     	; 0x13e2 <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1384:	c5 01       	movw	r24, r10
    1386:	b4 01       	movw	r22, r8
    1388:	36 db       	rcall	.-2452   	; 0x9f6 <__floatunsisf>
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	c7 01       	movw	r24, r14
    1390:	b6 01       	movw	r22, r12
    1392:	60 da       	rcall	.-2880   	; 0x854 <__subsf3>
    1394:	6b 01       	movw	r12, r22
    1396:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1398:	6e e2       	ldi	r22, 0x2E	; 46
    139a:	c8 01       	movw	r24, r16
    139c:	08 df       	rcall	.-496    	; 0x11ae <_ZN5Print5printEc>
    139e:	c8 0f       	add	r28, r24
    13a0:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	c7 01       	movw	r24, r14
    13ac:	b6 01       	movw	r22, r12
    13ae:	1e dc       	rcall	.-1988   	; 0xbec <__mulsf3>
    13b0:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    13b2:	5c 01       	movw	r10, r24
    13b4:	a3 d2       	rcall	.+1350   	; 0x18fc <__fixunssfsi>
    13b6:	6b 01       	movw	r12, r22
    n += print(toPrint);
    13b8:	7c 01       	movw	r14, r24
    13ba:	4a e0       	ldi	r20, 0x0A	; 10
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	c8 01       	movw	r24, r16
    13c0:	53 df       	rcall	.-346    	; 0x1268 <_ZN5Print5printEji>
    13c2:	c8 0f       	add	r28, r24
    13c4:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    13c6:	b6 01       	movw	r22, r12
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	14 db       	rcall	.-2520   	; 0x9f6 <__floatunsisf>
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	c5 01       	movw	r24, r10
    13d4:	b4 01       	movw	r22, r8
    13d6:	3e da       	rcall	.-2948   	; 0x854 <__subsf3>
    13d8:	6b 01       	movw	r12, r22
    13da:	7c 01       	movw	r14, r24
    13dc:	7a 94       	dec	r7
    13de:	71 10       	cpse	r7, r1
    13e0:	e0 cf       	rjmp	.-64     	; 0x13a2 <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    13e2:	ce 01       	movw	r24, r28
    13e4:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    13e6:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	9f 90       	pop	r9
    13fa:	8f 90       	pop	r8
    13fc:	7f 90       	pop	r7
    13fe:	08 95       	ret

00001400 <_ZN5Print5printEdi>:
    1400:	38 cf       	rjmp	.-400    	; 0x1272 <_ZN5Print10printFloatEdh>

00001402 <_ZN5Print7printlnEdi>:
    1402:	0f 93       	push	r16
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    140c:	32 df       	rcall	.-412    	; 0x1272 <_ZN5Print10printFloatEdh>
    140e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1410:	ce 01       	movw	r24, r28
    1412:	d4 de       	rcall	.-600    	; 0x11bc <_ZN5Print7printlnEv>
  return n;
}
    1414:	80 0f       	add	r24, r16
    1416:	91 1f       	adc	r25, r17
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <__vector_23>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <timer0_millis>
    143c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <timer0_millis+0x1>
    1440:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <timer0_millis+0x2>
    1444:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <timer0_millis+0x3>
    1448:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <timer0_fract>
    144c:	23 e0       	ldi	r18, 0x03	; 3
    144e:	23 0f       	add	r18, r19
    1450:	2d 37       	cpi	r18, 0x7D	; 125
    1452:	20 f4       	brcc	.+8      	; 0x145c <__vector_23+0x3a>
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	a1 1d       	adc	r26, r1
    1458:	b1 1d       	adc	r27, r1
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <__vector_23+0x44>
    145c:	26 e8       	ldi	r18, 0x86	; 134
    145e:	23 0f       	add	r18, r19
    1460:	02 96       	adiw	r24, 0x02	; 2
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <timer0_fract>
    146a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <timer0_millis>
    146e:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <timer0_millis+0x1>
    1472:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <timer0_millis+0x2>
    1476:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <timer0_millis+0x3>
    147a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timer0_overflow_count>
    147e:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timer0_overflow_count+0x1>
    1482:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <timer0_overflow_count+0x2>
    1486:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <timer0_overflow_count+0x3>
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	a1 1d       	adc	r26, r1
    148e:	b1 1d       	adc	r27, r1
    1490:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <timer0_overflow_count>
    1494:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <timer0_overflow_count+0x1>
    1498:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <timer0_overflow_count+0x2>
    149c:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <timer0_overflow_count+0x3>
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <millis>:
    14b6:	2f b7       	in	r18, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <timer0_millis>
    14be:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <timer0_millis+0x1>
    14c2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <timer0_millis+0x2>
    14c6:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <timer0_millis+0x3>
    14ca:	2f bf       	out	0x3f, r18	; 63
    14cc:	08 95       	ret

000014ce <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	91 05       	cpc	r25, r1
    14d2:	38 f0       	brcs	.+14     	; 0x14e2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    14dc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <delayMicroseconds+0x10>
    14e2:	08 95       	ret

000014e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    14e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    14e6:	84 b5       	in	r24, 0x24	; 36
    14e8:	82 60       	ori	r24, 0x02	; 2
    14ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    14ec:	84 b5       	in	r24, 0x24	; 36
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    14f2:	85 b5       	in	r24, 0x25	; 37
    14f4:	82 60       	ori	r24, 0x02	; 2
    14f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    14f8:	85 b5       	in	r24, 0x25	; 37
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    14fe:	ee e6       	ldi	r30, 0x6E	; 110
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1508:	e1 e8       	ldi	r30, 0x81	; 129
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    150e:	80 81       	ld	r24, Z
    1510:	82 60       	ori	r24, 0x02	; 2
    1512:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    151a:	e0 e8       	ldi	r30, 0x80	; 128
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1524:	e1 eb       	ldi	r30, 0xB1	; 177
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	84 60       	ori	r24, 0x04	; 4
    152c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    152e:	e0 eb       	ldi	r30, 0xB0	; 176
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1538:	e1 e9       	ldi	r30, 0x91	; 145
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	82 60       	ori	r24, 0x02	; 2
    1540:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1542:	80 81       	ld	r24, Z
    1544:	81 60       	ori	r24, 0x01	; 1
    1546:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1548:	e0 e9       	ldi	r30, 0x90	; 144
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1552:	e1 ea       	ldi	r30, 0xA1	; 161
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	82 60       	ori	r24, 0x02	; 2
    155a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1562:	e0 ea       	ldi	r30, 0xA0	; 160
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	81 60       	ori	r24, 0x01	; 1
    156a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    156c:	e1 e2       	ldi	r30, 0x21	; 33
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	80 81       	ld	r24, Z
    1572:	82 60       	ori	r24, 0x02	; 2
    1574:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1576:	80 81       	ld	r24, Z
    1578:	81 60       	ori	r24, 0x01	; 1
    157a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    157c:	e0 e2       	ldi	r30, 0x20	; 32
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	80 81       	ld	r24, Z
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1586:	ea e7       	ldi	r30, 0x7A	; 122
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1590:	80 81       	ld	r24, Z
    1592:	82 60       	ori	r24, 0x02	; 2
    1594:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    159c:	80 81       	ld	r24, Z
    159e:	80 68       	ori	r24, 0x80	; 128
    15a0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    15a6:	08 95       	ret

000015a8 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    15a8:	86 33       	cpi	r24, 0x36	; 54
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <analogRead+0x6>
    15ac:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    15ae:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    15b2:	28 2f       	mov	r18, r24
    15b4:	28 70       	andi	r18, 0x08	; 8
    15b6:	97 7f       	andi	r25, 0xF7	; 247
    15b8:	92 2b       	or	r25, r18
    15ba:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    15be:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <analog_reference>
    15c2:	90 e4       	ldi	r25, 0x40	; 64
    15c4:	29 9f       	mul	r18, r25
    15c6:	90 01       	movw	r18, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	87 70       	andi	r24, 0x07	; 7
    15cc:	82 2b       	or	r24, r18
    15ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    15d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    15d6:	80 64       	ori	r24, 0x40	; 64
    15d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    15dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    15e0:	86 fd       	sbrc	r24, 6
    15e2:	fc cf       	rjmp	.-8      	; 0x15dc <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    15e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    15e8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    15ec:	90 e0       	ldi	r25, 0x00	; 0
}
    15ee:	92 2b       	or	r25, r18
    15f0:	08 95       	ret

000015f2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	18 2f       	mov	r17, r24
    15fa:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	14 d1       	rcall	.+552    	; 0x1828 <pinMode>
	if (val == 0)
    1600:	20 97       	sbiw	r28, 0x00	; 0
    1602:	11 f4       	brne	.+4      	; 0x1608 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <analogWrite+0x1e>
	}
	else if (val == 255)
    1608:	cf 3f       	cpi	r28, 0xFF	; 255
    160a:	d1 05       	cpc	r29, r1
    160c:	31 f4       	brne	.+12     	; 0x161a <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1616:	1f 91       	pop	r17
    1618:	43 c1       	rjmp	.+646    	; 0x18a0 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    161a:	e1 2f       	mov	r30, r17
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ea 57       	subi	r30, 0x7A	; 122
    1620:	fe 4f       	sbci	r31, 0xFE	; 254
    1622:	e4 91       	lpm	r30, Z
    1624:	8e 2f       	mov	r24, r30
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	fc 01       	movw	r30, r24
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	e2 31       	cpi	r30, 0x12	; 18
    162e:	f1 05       	cpc	r31, r1
    1630:	08 f0       	brcs	.+2      	; 0x1634 <analogWrite+0x42>
    1632:	9c c0       	rjmp	.+312    	; 0x176c <analogWrite+0x17a>
    1634:	88 27       	eor	r24, r24
    1636:	e1 56       	subi	r30, 0x61	; 97
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	b1 c1       	rjmp	.+866    	; 0x19a0 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    163e:	84 b5       	in	r24, 0x24	; 36
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1644:	c7 bd       	out	0x27, r28	; 39
				break;
    1646:	97 c0       	rjmp	.+302    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1648:	84 b5       	in	r24, 0x24	; 36
    164a:	80 62       	ori	r24, 0x20	; 32
    164c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    164e:	c8 bd       	out	0x28, r28	; 40
				break;
    1650:	92 c0       	rjmp	.+292    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1652:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    165c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    1660:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    1664:	88 c0       	rjmp	.+272    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1666:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    166a:	80 62       	ori	r24, 0x20	; 32
    166c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    1670:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    1674:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    1678:	7e c0       	rjmp	.+252    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    167a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    167e:	88 60       	ori	r24, 0x08	; 8
    1680:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    1684:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    1688:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    168c:	74 c0       	rjmp	.+232    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    168e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    1698:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    169c:	6c c0       	rjmp	.+216    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    169e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    16a2:	80 62       	ori	r24, 0x20	; 32
    16a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    16a8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    16ac:	64 c0       	rjmp	.+200    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    16ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    16b8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    16bc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    16c0:	5a c0       	rjmp	.+180    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    16c2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    16c6:	80 62       	ori	r24, 0x20	; 32
    16c8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    16cc:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    16d0:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    16d4:	50 c0       	rjmp	.+160    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    16d6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    16e0:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    16e4:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    16e8:	46 c0       	rjmp	.+140    	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    16ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    16ee:	80 68       	ori	r24, 0x80	; 128
    16f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    16f4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    16f8:	8f 7b       	andi	r24, 0xBF	; 191
    16fa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    16fe:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    1702:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    1706:	37 c0       	rjmp	.+110    	; 0x1776 <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    1708:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    170c:	80 62       	ori	r24, 0x20	; 32
    170e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    1712:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    1716:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    171a:	2d c0       	rjmp	.+90     	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    171c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1720:	88 60       	ori	r24, 0x08	; 8
    1722:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    1726:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    172a:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    172e:	23 c0       	rjmp	.+70     	; 0x1776 <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    1730:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1734:	80 68       	ori	r24, 0x80	; 128
    1736:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    173a:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    173e:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    1742:	19 c0       	rjmp	.+50     	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    1744:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1748:	80 62       	ori	r24, 0x20	; 32
    174a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    174e:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    1752:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    1758:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    1762:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    1766:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    176c:	c0 38       	cpi	r28, 0x80	; 128
    176e:	d1 05       	cpc	r29, r1
    1770:	0c f0       	brlt	.+2      	; 0x1774 <analogWrite+0x182>
    1772:	4d cf       	rjmp	.-358    	; 0x160e <analogWrite+0x1c>
    1774:	47 cf       	rjmp	.-370    	; 0x1604 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	08 95       	ret

0000177e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	fc 01       	movw	r30, r24
    1782:	31 97       	sbiw	r30, 0x01	; 1
    1784:	e2 31       	cpi	r30, 0x12	; 18
    1786:	f1 05       	cpc	r31, r1
    1788:	08 f0       	brcs	.+2      	; 0x178c <turnOffPWM+0xe>
    178a:	4d c0       	rjmp	.+154    	; 0x1826 <turnOffPWM+0xa8>
    178c:	88 27       	eor	r24, r24
    178e:	ef 54       	subi	r30, 0x4F	; 79
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	05 c1       	rjmp	.+522    	; 0x19a0 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1796:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    179a:	8f 77       	andi	r24, 0x7F	; 127
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    179e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    17a2:	8f 7d       	andi	r24, 0xDF	; 223
    17a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    17a8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    17aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    17ae:	87 7f       	andi	r24, 0xF7	; 247
    17b0:	f9 cf       	rjmp	.-14     	; 0x17a4 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    17b2:	84 b5       	in	r24, 0x24	; 36
    17b4:	8f 77       	andi	r24, 0x7F	; 127
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    17b8:	84 b5       	in	r24, 0x24	; 36
    17ba:	8f 7d       	andi	r24, 0xDF	; 223
    17bc:	84 bd       	out	0x24, r24	; 36
    17be:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    17c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    17c4:	8f 77       	andi	r24, 0x7F	; 127
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    17c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    17cc:	8f 7d       	andi	r24, 0xDF	; 223
    17ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    17d2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    17d4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    17d8:	8f 77       	andi	r24, 0x7F	; 127
    17da:	07 c0       	rjmp	.+14     	; 0x17ea <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    17dc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    17e0:	8f 7d       	andi	r24, 0xDF	; 223
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    17e4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    17e8:	87 7f       	andi	r24, 0xF7	; 247
    17ea:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    17ee:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    17f0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    17f4:	8f 77       	andi	r24, 0x7F	; 127
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    17f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    17fc:	8f 7d       	andi	r24, 0xDF	; 223
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1800:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1804:	87 7f       	andi	r24, 0xF7	; 247
    1806:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    180a:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    180c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1810:	8f 77       	andi	r24, 0x7F	; 127
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1814:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1818:	8f 7d       	andi	r24, 0xDF	; 223
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    181c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1826:	08 95       	ret

00001828 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	e4 53       	subi	r30, 0x34	; 52
    1832:	fe 4f       	sbci	r31, 0xFE	; 254
    1834:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1836:	fc 01       	movw	r30, r24
    1838:	ee 5e       	subi	r30, 0xEE	; 238
    183a:	fd 4f       	sbci	r31, 0xFD	; 253
    183c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    183e:	88 23       	and	r24, r24
    1840:	61 f1       	breq	.+88     	; 0x189a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	fc 01       	movw	r30, r24
    184a:	ee 58       	subi	r30, 0x8E	; 142
    184c:	fd 4f       	sbci	r31, 0xFD	; 253
    184e:	c5 91       	lpm	r28, Z+
    1850:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1852:	fc 01       	movw	r30, r24
    1854:	e8 5a       	subi	r30, 0xA8	; 168
    1856:	fd 4f       	sbci	r31, 0xFD	; 253
    1858:	a5 91       	lpm	r26, Z+
    185a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    185c:	61 11       	cpse	r22, r1
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1860:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1862:	f8 94       	cli
		*reg &= ~bit;
    1864:	88 81       	ld	r24, Y
    1866:	20 95       	com	r18
    1868:	82 23       	and	r24, r18
    186a:	88 83       	st	Y, r24
		*out &= ~bit;
    186c:	ec 91       	ld	r30, X
    186e:	2e 23       	and	r18, r30
    1870:	0b c0       	rjmp	.+22     	; 0x1888 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1872:	62 30       	cpi	r22, 0x02	; 2
    1874:	61 f4       	brne	.+24     	; 0x188e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1876:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1878:	f8 94       	cli
		*reg &= ~bit;
    187a:	88 81       	ld	r24, Y
    187c:	32 2f       	mov	r19, r18
    187e:	30 95       	com	r19
    1880:	83 23       	and	r24, r19
    1882:	88 83       	st	Y, r24
		*out |= bit;
    1884:	ec 91       	ld	r30, X
    1886:	2e 2b       	or	r18, r30
    1888:	2c 93       	st	X, r18
		SREG = oldSREG;
    188a:	9f bf       	out	0x3f, r25	; 63
    188c:	06 c0       	rjmp	.+12     	; 0x189a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    188e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1890:	f8 94       	cli
		*reg |= bit;
    1892:	e8 81       	ld	r30, Y
    1894:	2e 2b       	or	r18, r30
    1896:	28 83       	st	Y, r18
		SREG = oldSREG;
    1898:	8f bf       	out	0x3f, r24	; 63
	}
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	ea 57       	subi	r30, 0x7A	; 122
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    18b2:	f9 01       	movw	r30, r18
    18b4:	e4 53       	subi	r30, 0x34	; 52
    18b6:	fe 4f       	sbci	r31, 0xFE	; 254
    18b8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    18ba:	f9 01       	movw	r30, r18
    18bc:	ee 5e       	subi	r30, 0xEE	; 238
    18be:	fd 4f       	sbci	r31, 0xFD	; 253
    18c0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    18c2:	cc 23       	and	r28, r28
    18c4:	b9 f0       	breq	.+46     	; 0x18f4 <digitalWrite+0x54>
    18c6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18c8:	81 11       	cpse	r24, r1
    18ca:	59 df       	rcall	.-334    	; 0x177e <turnOffPWM>

	out = portOutputRegister(port);
    18cc:	ec 2f       	mov	r30, r28
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	e8 5a       	subi	r30, 0xA8	; 168
    18d6:	fd 4f       	sbci	r31, 0xFD	; 253
    18d8:	a5 91       	lpm	r26, Z+
    18da:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    18dc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    18de:	f8 94       	cli

	if (val == LOW) {
    18e0:	11 11       	cpse	r17, r1
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <digitalWrite+0x4c>
		*out &= ~bit;
    18e4:	8c 91       	ld	r24, X
    18e6:	d0 95       	com	r29
    18e8:	d8 23       	and	r29, r24
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <digitalWrite+0x50>
	} else {
		*out |= bit;
    18ec:	ec 91       	ld	r30, X
    18ee:	de 2b       	or	r29, r30
    18f0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    18f2:	9f bf       	out	0x3f, r25	; 63
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <__fixunssfsi>:
    18fc:	0d d9       	rcall	.-3558   	; 0xb18 <__fp_splitA>
    18fe:	88 f0       	brcs	.+34     	; 0x1922 <__fixunssfsi+0x26>
    1900:	9f 57       	subi	r25, 0x7F	; 127
    1902:	90 f0       	brcs	.+36     	; 0x1928 <__fixunssfsi+0x2c>
    1904:	b9 2f       	mov	r27, r25
    1906:	99 27       	eor	r25, r25
    1908:	b7 51       	subi	r27, 0x17	; 23
    190a:	a0 f0       	brcs	.+40     	; 0x1934 <__fixunssfsi+0x38>
    190c:	d1 f0       	breq	.+52     	; 0x1942 <__fixunssfsi+0x46>
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	88 1f       	adc	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	1a f0       	brmi	.+6      	; 0x191e <__fixunssfsi+0x22>
    1918:	ba 95       	dec	r27
    191a:	c9 f7       	brne	.-14     	; 0x190e <__fixunssfsi+0x12>
    191c:	12 c0       	rjmp	.+36     	; 0x1942 <__fixunssfsi+0x46>
    191e:	b1 30       	cpi	r27, 0x01	; 1
    1920:	81 f0       	breq	.+32     	; 0x1942 <__fixunssfsi+0x46>
    1922:	14 d9       	rcall	.-3544   	; 0xb4c <__fp_zero>
    1924:	b1 e0       	ldi	r27, 0x01	; 1
    1926:	08 95       	ret
    1928:	11 c9       	rjmp	.-3550   	; 0xb4c <__fp_zero>
    192a:	67 2f       	mov	r22, r23
    192c:	78 2f       	mov	r23, r24
    192e:	88 27       	eor	r24, r24
    1930:	b8 5f       	subi	r27, 0xF8	; 248
    1932:	39 f0       	breq	.+14     	; 0x1942 <__fixunssfsi+0x46>
    1934:	b9 3f       	cpi	r27, 0xF9	; 249
    1936:	cc f3       	brlt	.-14     	; 0x192a <__fixunssfsi+0x2e>
    1938:	86 95       	lsr	r24
    193a:	77 95       	ror	r23
    193c:	67 95       	ror	r22
    193e:	b3 95       	inc	r27
    1940:	d9 f7       	brne	.-10     	; 0x1938 <__fixunssfsi+0x3c>
    1942:	3e f4       	brtc	.+14     	; 0x1952 <__fixunssfsi+0x56>
    1944:	90 95       	com	r25
    1946:	80 95       	com	r24
    1948:	70 95       	com	r23
    194a:	61 95       	neg	r22
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	08 95       	ret

00001954 <__unordsf2>:
    1954:	8d d8       	rcall	.-3814   	; 0xa70 <__fp_cmp>
    1956:	88 0b       	sbc	r24, r24
    1958:	99 0b       	sbc	r25, r25
    195a:	08 95       	ret

0000195c <__udivmodsi4>:
    195c:	a1 e2       	ldi	r26, 0x21	; 33
    195e:	1a 2e       	mov	r1, r26
    1960:	aa 1b       	sub	r26, r26
    1962:	bb 1b       	sub	r27, r27
    1964:	fd 01       	movw	r30, r26
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <__udivmodsi4_ep>

00001968 <__udivmodsi4_loop>:
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	ee 1f       	adc	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	a2 17       	cp	r26, r18
    1972:	b3 07       	cpc	r27, r19
    1974:	e4 07       	cpc	r30, r20
    1976:	f5 07       	cpc	r31, r21
    1978:	20 f0       	brcs	.+8      	; 0x1982 <__udivmodsi4_ep>
    197a:	a2 1b       	sub	r26, r18
    197c:	b3 0b       	sbc	r27, r19
    197e:	e4 0b       	sbc	r30, r20
    1980:	f5 0b       	sbc	r31, r21

00001982 <__udivmodsi4_ep>:
    1982:	66 1f       	adc	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	1a 94       	dec	r1
    198c:	69 f7       	brne	.-38     	; 0x1968 <__udivmodsi4_loop>
    198e:	60 95       	com	r22
    1990:	70 95       	com	r23
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	bd 01       	movw	r22, r26
    199c:	cf 01       	movw	r24, r30
    199e:	08 95       	ret

000019a0 <__tablejump2__>:
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	88 1f       	adc	r24, r24
    19a6:	8b bf       	out	0x3b, r24	; 59
    19a8:	07 90       	elpm	r0, Z+
    19aa:	f6 91       	elpm	r31, Z
    19ac:	e0 2d       	mov	r30, r0
    19ae:	19 94       	eijmp

000019b0 <_exit>:
    19b0:	f8 94       	cli

000019b2 <__stop_program>:
    19b2:	ff cf       	rjmp	.-2      	; 0x19b2 <__stop_program>
