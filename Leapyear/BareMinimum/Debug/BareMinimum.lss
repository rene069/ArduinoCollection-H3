
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  0080021a  0080021a  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a2b  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bd3  00000000  00000000  000086ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001651  00000000  00000000  0000a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  0000b924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002213  00000000  00000000  0000c04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266a  00000000  00000000  0000e25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000108c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c3       	rjmp	.+1870   	; 0x7ac <__vector_23>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6b c2       	rjmp	.+1238   	; 0x53c <__vector_25>
  66:	00 00       	nop
  68:	9f c2       	rjmp	.+1342   	; 0x5a8 <__vector_26>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	06 03       	mulsu	r16, r22

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	ec e5       	ldi	r30, 0x5C	; 92
  fe:	f9 e0       	ldi	r31, 0x09	; 9
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	aa 31       	cpi	r26, 0x1A	; 26
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	aa e1       	ldi	r26, 0x1A	; 26
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a0 3c       	cpi	r26, 0xC0	; 192
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	0a d4       	rcall	.+2068   	; 0x948 <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	94 d2       	rcall	.+1320   	; 0x668 <main>
 140:	0b c4       	rjmp	.+2070   	; 0x958 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <_ZN14HardwareSerial5beginEm+0x6>
 14a:	00 d0       	rcall	.+0      	; 0x14c <_ZN14HardwareSerial5beginEm+0x8>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	4b 83       	std	Y+3, r20	; 0x03
 156:	5c 83       	std	Y+4, r21	; 0x04
 158:	6d 83       	std	Y+5, r22	; 0x05
 15a:	7e 83       	std	Y+6, r23	; 0x06
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	ad 81       	ldd	r26, Y+5	; 0x05
 162:	be 81       	ldd	r27, Y+6	; 0x06
 164:	e9 81       	ldd	r30, Y+1	; 0x01
 166:	fa 81       	ldd	r31, Y+2	; 0x02
 168:	26 e0       	ldi	r18, 0x06	; 6
 16a:	ac 01       	movw	r20, r24
 16c:	bd 01       	movw	r22, r26
 16e:	cf 01       	movw	r24, r30
 170:	82 d1       	rcall	.+772    	; 0x476 <_ZN14HardwareSerial5beginEmh>
 172:	00 00       	nop
 174:	26 96       	adiw	r28, 0x06	; 6
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <setup>:
#include <Arduino.h>

void setup()
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2c 97       	sbiw	r28, 0x0c	; 12
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(115200);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	52 ec       	ldi	r21, 0xC2	; 194
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	8a e1       	ldi	r24, 0x1A	; 26
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	ce df       	rcall	.-100    	; 0x144 <_ZN14HardwareSerial5beginEm>
	
	int tal1 = 3;
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	98 87       	std	Y+8, r25	; 0x08
 1ae:	8f 83       	std	Y+7, r24	; 0x07
	int tal2 = 7;
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9a 87       	std	Y+10, r25	; 0x0a
 1b6:	89 87       	std	Y+9, r24	; 0x09
	int result;
	
	int *ptr1 = &tal1;
 1b8:	ce 01       	movw	r24, r28
 1ba:	07 96       	adiw	r24, 0x07	; 7
 1bc:	9a 83       	std	Y+2, r25	; 0x02
 1be:	89 83       	std	Y+1, r24	; 0x01
	int *ptr2 = &tal2;
 1c0:	ce 01       	movw	r24, r28
 1c2:	09 96       	adiw	r24, 0x09	; 9
 1c4:	9c 83       	std	Y+4, r25	; 0x04
 1c6:	8b 83       	std	Y+3, r24	; 0x03
	
	
	result = *ptr1 + *ptr2;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 81       	ld	r18, Z
 1d0:	31 81       	ldd	r19, Z+1	; 0x01
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	91 81       	ldd	r25, Z+1	; 0x01
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	9c 87       	std	Y+12, r25	; 0x0c
 1e2:	8b 87       	std	Y+11, r24	; 0x0b
	
	int *ptrresult = &result;
 1e4:	ce 01       	movw	r24, r28
 1e6:	0b 96       	adiw	r24, 0x0b	; 11
 1e8:	9e 83       	std	Y+6, r25	; 0x06
 1ea:	8d 83       	std	Y+5, r24	; 0x05
	Serial.print((unsigned int)*ptr1); Serial.print(" + "); Serial.print((unsigned int)*ptr2); Serial.print(" = "); Serial.print((unsigned int)*ptrresult);
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	4a e0       	ldi	r20, 0x0A	; 10
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	bc 01       	movw	r22, r24
 1fc:	8a e1       	ldi	r24, 0x1A	; 26
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	d0 d2       	rcall	.+1440   	; 0x7a2 <_ZN5Print5printEji>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	72 e0       	ldi	r23, 0x02	; 2
 206:	8a e1       	ldi	r24, 0x1A	; 26
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	77 d2       	rcall	.+1262   	; 0x6fa <_ZN5Print5printEPKc>
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	4a e0       	ldi	r20, 0x0A	; 10
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	bc 01       	movw	r22, r24
 21c:	8a e1       	ldi	r24, 0x1A	; 26
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	c0 d2       	rcall	.+1408   	; 0x7a2 <_ZN5Print5printEji>
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	72 e0       	ldi	r23, 0x02	; 2
 226:	8a e1       	ldi	r24, 0x1A	; 26
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	67 d2       	rcall	.+1230   	; 0x6fa <_ZN5Print5printEPKc>
 22c:	8d 81       	ldd	r24, Y+5	; 0x05
 22e:	9e 81       	ldd	r25, Y+6	; 0x06
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	4a e0       	ldi	r20, 0x0A	; 10
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	bc 01       	movw	r22, r24
 23c:	8a e1       	ldi	r24, 0x1A	; 26
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	b0 d2       	rcall	.+1376   	; 0x7a2 <_ZN5Print5printEji>
	
	
}
 242:	00 00       	nop
 244:	2c 96       	adiw	r28, 0x0c	; 12
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <loop>:

void loop(){
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	
 25e:	00 00       	nop
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 266:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 268:	91 8d       	ldd	r25, Z+25	; 0x19
 26a:	22 8d       	ldd	r18, Z+26	; 0x1a
 26c:	89 2f       	mov	r24, r25
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	80 5c       	subi	r24, 0xC0	; 192
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	82 1b       	sub	r24, r18
 276:	91 09       	sbc	r25, r1
}
 278:	8f 73       	andi	r24, 0x3F	; 63
 27a:	99 27       	eor	r25, r25
 27c:	08 95       	ret

0000027e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 27e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 280:	91 8d       	ldd	r25, Z+25	; 0x19
 282:	82 8d       	ldd	r24, Z+26	; 0x1a
 284:	98 17       	cp	r25, r24
 286:	31 f0       	breq	.+12     	; 0x294 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 288:	82 8d       	ldd	r24, Z+26	; 0x1a
 28a:	e8 0f       	add	r30, r24
 28c:	f1 1d       	adc	r31, r1
 28e:	85 8d       	ldd	r24, Z+29	; 0x1d
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 298:	08 95       	ret

0000029a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 29a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 29c:	91 8d       	ldd	r25, Z+25	; 0x19
 29e:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a0:	98 17       	cp	r25, r24
 2a2:	61 f0       	breq	.+24     	; 0x2bc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2a4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a6:	df 01       	movw	r26, r30
 2a8:	a8 0f       	add	r26, r24
 2aa:	b1 1d       	adc	r27, r1
 2ac:	5d 96       	adiw	r26, 0x1d	; 29
 2ae:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2b0:	92 8d       	ldd	r25, Z+26	; 0x1a
 2b2:	9f 5f       	subi	r25, 0xFF	; 255
 2b4:	9f 73       	andi	r25, 0x3F	; 63
 2b6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2c0:	08 95       	ret

000002c2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 2c2:	fc 01       	movw	r30, r24
 2c4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 2c6:	44 8d       	ldd	r20, Z+28	; 0x1c
 2c8:	25 2f       	mov	r18, r21
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	84 2f       	mov	r24, r20
 2ce:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 2d0:	82 1b       	sub	r24, r18
 2d2:	93 0b       	sbc	r25, r19
 2d4:	54 17       	cp	r21, r20
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 2d8:	cf 96       	adiw	r24, 0x3f	; 63
 2da:	08 95       	ret
  return tail - head - 1;
 2dc:	01 97       	sbiw	r24, 0x01	; 1
}
 2de:	08 95       	ret

000002e0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 2e0:	8d ef       	ldi	r24, 0xFD	; 253
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	89 2b       	or	r24, r25
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <_Z14serialEventRunv+0x16>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	89 2b       	or	r24, r25
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <_Z14serialEventRunv+0x16>
 2f0:	84 d1       	rcall	.+776    	; 0x5fa <_Z17Serial0_availablev>
 2f2:	81 11       	cpse	r24, r1
 2f4:	25 c0       	rjmp	.+74     	; 0x340 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	89 2b       	or	r24, r25
 2fc:	41 f0       	breq	.+16     	; 0x30e <_Z14serialEventRunv+0x2e>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	89 2b       	or	r24, r25
 304:	21 f0       	breq	.+8      	; 0x30e <_Z14serialEventRunv+0x2e>
 306:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 30a:	81 11       	cpse	r24, r1
 30c:	1c c0       	rjmp	.+56     	; 0x346 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	89 2b       	or	r24, r25
 314:	41 f0       	breq	.+16     	; 0x326 <_Z14serialEventRunv+0x46>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	89 2b       	or	r24, r25
 31c:	21 f0       	breq	.+8      	; 0x326 <_Z14serialEventRunv+0x46>
 31e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 322:	81 11       	cpse	r24, r1
 324:	13 c0       	rjmp	.+38     	; 0x34c <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	89 2b       	or	r24, r25
 32c:	a1 f0       	breq	.+40     	; 0x356 <_Z14serialEventRunv+0x76>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	89 2b       	or	r24, r25
 334:	81 f0       	breq	.+32     	; 0x356 <_Z14serialEventRunv+0x76>
 336:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 33a:	81 11       	cpse	r24, r1
 33c:	0a c0       	rjmp	.+20     	; 0x352 <_Z14serialEventRunv+0x72>
 33e:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 340:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 344:	d8 cf       	rjmp	.-80     	; 0x2f6 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 346:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 34a:	e1 cf       	rjmp	.-62     	; 0x30e <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 34c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 350:	ea cf       	rjmp	.-44     	; 0x326 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 352:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 356:	08 95       	ret

00000358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 358:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 35a:	84 8d       	ldd	r24, Z+28	; 0x1c
 35c:	df 01       	movw	r26, r30
 35e:	a8 0f       	add	r26, r24
 360:	b1 1d       	adc	r27, r1
 362:	a3 5a       	subi	r26, 0xA3	; 163
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 368:	84 8d       	ldd	r24, Z+28	; 0x1c
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	8f 73       	andi	r24, 0x3F	; 63
 370:	99 27       	eor	r25, r25
 372:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 374:	a6 89       	ldd	r26, Z+22	; 0x16
 376:	b7 89       	ldd	r27, Z+23	; 0x17
 378:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 37a:	a0 89       	ldd	r26, Z+16	; 0x10
 37c:	b1 89       	ldd	r27, Z+17	; 0x11
 37e:	8c 91       	ld	r24, X
 380:	83 70       	andi	r24, 0x03	; 3
 382:	80 64       	ori	r24, 0x40	; 64
 384:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 386:	93 8d       	ldd	r25, Z+27	; 0x1b
 388:	84 8d       	ldd	r24, Z+28	; 0x1c
 38a:	98 13       	cpse	r25, r24
 38c:	06 c0       	rjmp	.+12     	; 0x39a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 38e:	02 88       	ldd	r0, Z+18	; 0x12
 390:	f3 89       	ldd	r31, Z+19	; 0x13
 392:	e0 2d       	mov	r30, r0
 394:	80 81       	ld	r24, Z
 396:	8f 7d       	andi	r24, 0xDF	; 223
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
  _written = true;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3b2:	98 13       	cpse	r25, r24
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <_ZN14HardwareSerial5writeEh+0x24>
 3b6:	e8 89       	ldd	r30, Y+16	; 0x10
 3b8:	f9 89       	ldd	r31, Y+17	; 0x11
 3ba:	80 81       	ld	r24, Z
 3bc:	85 fd       	sbrc	r24, 5
 3be:	25 c0       	rjmp	.+74     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3c0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3c2:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	0f 5f       	subi	r16, 0xFF	; 255
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	0f 73       	andi	r16, 0x3F	; 63
 3cc:	11 27       	eor	r17, r17
 3ce:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3d2:	e8 12       	cpse	r14, r24
 3d4:	0b c0       	rjmp	.+22     	; 0x3ec <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	07 fc       	sbrc	r0, 7
 3da:	fa cf       	rjmp	.-12     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3dc:	e8 89       	ldd	r30, Y+16	; 0x10
 3de:	f9 89       	ldd	r31, Y+17	; 0x11
 3e0:	80 81       	ld	r24, Z
 3e2:	85 ff       	sbrs	r24, 5
 3e4:	f5 cf       	rjmp	.-22     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3e6:	ce 01       	movw	r24, r28
 3e8:	b7 df       	rcall	.-146    	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3ea:	f2 cf       	rjmp	.-28     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3ee:	fe 01       	movw	r30, r28
 3f0:	e8 0f       	add	r30, r24
 3f2:	f1 1d       	adc	r31, r1
 3f4:	e3 5a       	subi	r30, 0xA3	; 163
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3fa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3fc:	f8 94       	cli
    _tx_buffer_head = i;
 3fe:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 400:	ea 89       	ldd	r30, Y+18	; 0x12
 402:	fb 89       	ldd	r31, Y+19	; 0x13
 404:	80 81       	ld	r24, Z
 406:	80 62       	ori	r24, 0x20	; 32
 408:	0a c0       	rjmp	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 40a:	9f b7       	in	r25, 0x3f	; 63
 40c:	f8 94       	cli
      *_udr = c;
 40e:	ee 89       	ldd	r30, Y+22	; 0x16
 410:	ff 89       	ldd	r31, Y+23	; 0x17
 412:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 414:	e8 89       	ldd	r30, Y+16	; 0x10
 416:	f9 89       	ldd	r31, Y+17	; 0x11
 418:	80 81       	ld	r24, Z
 41a:	83 70       	andi	r24, 0x03	; 3
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 420:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 43a:	88 8d       	ldd	r24, Y+24	; 0x18
 43c:	88 23       	and	r24, r24
 43e:	c1 f0       	breq	.+48     	; 0x470 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 440:	ea 89       	ldd	r30, Y+18	; 0x12
 442:	fb 89       	ldd	r31, Y+19	; 0x13
 444:	80 81       	ld	r24, Z
 446:	85 fd       	sbrc	r24, 5
 448:	05 c0       	rjmp	.+10     	; 0x454 <_ZN14HardwareSerial5flushEv+0x20>
 44a:	a8 89       	ldd	r26, Y+16	; 0x10
 44c:	b9 89       	ldd	r27, Y+17	; 0x11
 44e:	8c 91       	ld	r24, X
 450:	86 fd       	sbrc	r24, 6
 452:	0e c0       	rjmp	.+28     	; 0x470 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	07 fc       	sbrc	r0, 7
 458:	f5 cf       	rjmp	.-22     	; 0x444 <_ZN14HardwareSerial5flushEv+0x10>
 45a:	80 81       	ld	r24, Z
 45c:	85 ff       	sbrs	r24, 5
 45e:	f2 cf       	rjmp	.-28     	; 0x444 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 460:	a8 89       	ldd	r26, Y+16	; 0x10
 462:	b9 89       	ldd	r27, Y+17	; 0x11
 464:	8c 91       	ld	r24, X
 466:	85 ff       	sbrs	r24, 5
 468:	ed cf       	rjmp	.-38     	; 0x444 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 46a:	ce 01       	movw	r24, r28
 46c:	75 df       	rcall	.-278    	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 46e:	e8 cf       	rjmp	.-48     	; 0x440 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 476:	cf 92       	push	r12
 478:	df 92       	push	r13
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	6a 01       	movw	r12, r20
 488:	7b 01       	movw	r14, r22
 48a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 48c:	e8 89       	ldd	r30, Y+16	; 0x10
 48e:	f9 89       	ldd	r31, Y+17	; 0x11
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 494:	41 15       	cp	r20, r1
 496:	51 4e       	sbci	r21, 0xE1	; 225
 498:	61 05       	cpc	r22, r1
 49a:	71 05       	cpc	r23, r1
 49c:	a9 f0       	breq	.+42     	; 0x4c8 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	79 e0       	ldi	r23, 0x09	; 9
 4a2:	8d e3       	ldi	r24, 0x3D	; 61
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a7 01       	movw	r20, r14
 4a8:	96 01       	movw	r18, r12
 4aa:	2c d2       	rcall	.+1112   	; 0x904 <__udivmodsi4>
 4ac:	da 01       	movw	r26, r20
 4ae:	c9 01       	movw	r24, r18
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	a1 09       	sbc	r26, r1
 4b4:	b1 09       	sbc	r27, r1
 4b6:	b6 95       	lsr	r27
 4b8:	a7 95       	ror	r26
 4ba:	97 95       	ror	r25
 4bc:	87 95       	ror	r24
 4be:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4c0:	21 15       	cp	r18, r1
 4c2:	80 e1       	ldi	r24, 0x10	; 16
 4c4:	38 07       	cpc	r19, r24
 4c6:	a0 f0       	brcs	.+40     	; 0x4f0 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 4c8:	e8 89       	ldd	r30, Y+16	; 0x10
 4ca:	f9 89       	ldd	r31, Y+17	; 0x11
 4cc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4ce:	60 e8       	ldi	r22, 0x80	; 128
 4d0:	74 e8       	ldi	r23, 0x84	; 132
 4d2:	8e e1       	ldi	r24, 0x1E	; 30
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a7 01       	movw	r20, r14
 4d8:	96 01       	movw	r18, r12
 4da:	14 d2       	rcall	.+1064   	; 0x904 <__udivmodsi4>
 4dc:	da 01       	movw	r26, r20
 4de:	c9 01       	movw	r24, r18
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	a1 09       	sbc	r26, r1
 4e4:	b1 09       	sbc	r27, r1
 4e6:	b6 95       	lsr	r27
 4e8:	a7 95       	ror	r26
 4ea:	97 95       	ror	r25
 4ec:	87 95       	ror	r24
 4ee:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4f0:	ec 85       	ldd	r30, Y+12	; 0x0c
 4f2:	fd 85       	ldd	r31, Y+13	; 0x0d
 4f4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4f6:	ee 85       	ldd	r30, Y+14	; 0x0e
 4f8:	ff 85       	ldd	r31, Y+15	; 0x0f
 4fa:	20 83       	st	Z, r18

  _written = false;
 4fc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4fe:	ec 89       	ldd	r30, Y+20	; 0x14
 500:	fd 89       	ldd	r31, Y+21	; 0x15
 502:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 504:	ea 89       	ldd	r30, Y+18	; 0x12
 506:	fb 89       	ldd	r31, Y+19	; 0x13
 508:	80 81       	ld	r24, Z
 50a:	80 61       	ori	r24, 0x10	; 16
 50c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 50e:	ea 89       	ldd	r30, Y+18	; 0x12
 510:	fb 89       	ldd	r31, Y+19	; 0x13
 512:	80 81       	ld	r24, Z
 514:	88 60       	ori	r24, 0x08	; 8
 516:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 518:	ea 89       	ldd	r30, Y+18	; 0x12
 51a:	fb 89       	ldd	r31, Y+19	; 0x13
 51c:	80 81       	ld	r24, Z
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 522:	ea 89       	ldd	r30, Y+18	; 0x12
 524:	fb 89       	ldd	r31, Y+19	; 0x13
 526:	80 81       	ld	r24, Z
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	80 83       	st	Z, r24
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	0b b6       	in	r0, 0x3b	; 59
 548:	0f 92       	push	r0
 54a:	2f 93       	push	r18
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 554:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__data_end+0x10>
 558:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__data_end+0x11>
 55c:	80 81       	ld	r24, Z
 55e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end+0x16>
 562:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x17>
 566:	82 fd       	sbrc	r24, 2
 568:	12 c0       	rjmp	.+36     	; 0x58e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 56a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 56c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__data_end+0x19>
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 574:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__data_end+0x1a>
 578:	82 17       	cp	r24, r18
 57a:	51 f0       	breq	.+20     	; 0x590 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 57c:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <__data_end+0x19>
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e6 5e       	subi	r30, 0xE6	; 230
 584:	fd 4f       	sbci	r31, 0xFD	; 253
 586:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 588:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <__data_end+0x19>
 58c:	01 c0       	rjmp	.+2      	; 0x590 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 58e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0b be       	out	0x3b, r0	; 59
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	0b b6       	in	r0, 0x3b	; 59
 5b4:	0f 92       	push	r0
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5ce:	8a e1       	ldi	r24, 0x1A	; 26
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	c2 de       	rcall	.-636    	; 0x358 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0b be       	out	0x3b, r0	; 59
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5fa:	8a e1       	ldi	r24, 0x1A	; 26
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	33 de       	rcall	.-922    	; 0x266 <_ZN14HardwareSerial9availableEv>
 600:	21 e0       	ldi	r18, 0x01	; 1
 602:	89 2b       	or	r24, r25
 604:	09 f4       	brne	.+2      	; 0x608 <_Z17Serial0_availablev+0xe>
 606:	20 e0       	ldi	r18, 0x00	; 0
}
 608:	82 2f       	mov	r24, r18
 60a:	08 95       	ret

0000060c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 60c:	ea e1       	ldi	r30, 0x1A	; 26
 60e:	f2 e0       	ldi	r31, 0x02	; 2
 610:	13 82       	std	Z+3, r1	; 0x03
 612:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 614:	88 ee       	ldi	r24, 0xE8	; 232
 616:	93 e0       	ldi	r25, 0x03	; 3
 618:	a0 e0       	ldi	r26, 0x00	; 0
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	84 83       	std	Z+4, r24	; 0x04
 61e:	95 83       	std	Z+5, r25	; 0x05
 620:	a6 83       	std	Z+6, r26	; 0x06
 622:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 624:	8c e0       	ldi	r24, 0x0C	; 12
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	91 83       	std	Z+1, r25	; 0x01
 62a:	80 83       	st	Z, r24
 62c:	85 ec       	ldi	r24, 0xC5	; 197
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	95 87       	std	Z+13, r25	; 0x0d
 632:	84 87       	std	Z+12, r24	; 0x0c
 634:	84 ec       	ldi	r24, 0xC4	; 196
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	97 87       	std	Z+15, r25	; 0x0f
 63a:	86 87       	std	Z+14, r24	; 0x0e
 63c:	80 ec       	ldi	r24, 0xC0	; 192
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	91 8b       	std	Z+17, r25	; 0x11
 642:	80 8b       	std	Z+16, r24	; 0x10
 644:	81 ec       	ldi	r24, 0xC1	; 193
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	93 8b       	std	Z+19, r25	; 0x13
 64a:	82 8b       	std	Z+18, r24	; 0x12
 64c:	82 ec       	ldi	r24, 0xC2	; 194
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	95 8b       	std	Z+21, r25	; 0x15
 652:	84 8b       	std	Z+20, r24	; 0x14
 654:	86 ec       	ldi	r24, 0xC6	; 198
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	97 8b       	std	Z+23, r25	; 0x17
 65a:	86 8b       	std	Z+22, r24	; 0x16
 65c:	11 8e       	std	Z+25, r1	; 0x19
 65e:	12 8e       	std	Z+26, r1	; 0x1a
 660:	13 8e       	std	Z+27, r1	; 0x1b
 662:	14 8e       	std	Z+28, r1	; 0x1c
 664:	08 95       	ret

00000666 <initVariant>:
 666:	08 95       	ret

00000668 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 668:	eb d0       	rcall	.+470    	; 0x840 <init>

	initVariant();
 66a:	fd df       	rcall	.-6      	; 0x666 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 66c:	8c dd       	rcall	.-1256   	; 0x186 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 66e:	c0 e7       	ldi	r28, 0x70	; 112
 670:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 672:	f1 dd       	rcall	.-1054   	; 0x256 <loop>
		if (serialEventRun) serialEventRun();
 674:	20 97       	sbiw	r28, 0x00	; 0
 676:	e9 f3       	breq	.-6      	; 0x672 <main+0xa>
 678:	33 de       	rcall	.-922    	; 0x2e0 <_Z14serialEventRunv>
 67a:	fb cf       	rjmp	.-10     	; 0x672 <main+0xa>

0000067c <_ZN5Print5writeEPKhj>:
 67c:	cf 92       	push	r12
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	6c 01       	movw	r12, r24
 68e:	7a 01       	movw	r14, r20
 690:	8b 01       	movw	r16, r22
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	d0 e0       	ldi	r29, 0x00	; 0
 696:	ce 15       	cp	r28, r14
 698:	df 05       	cpc	r29, r15
 69a:	81 f0       	breq	.+32     	; 0x6bc <_ZN5Print5writeEPKhj+0x40>
 69c:	d8 01       	movw	r26, r16
 69e:	6d 91       	ld	r22, X+
 6a0:	8d 01       	movw	r16, r26
 6a2:	d6 01       	movw	r26, r12
 6a4:	ed 91       	ld	r30, X+
 6a6:	fc 91       	ld	r31, X
 6a8:	01 90       	ld	r0, Z+
 6aa:	f0 81       	ld	r31, Z
 6ac:	e0 2d       	mov	r30, r0
 6ae:	c6 01       	movw	r24, r12
 6b0:	19 95       	eicall
 6b2:	89 2b       	or	r24, r25
 6b4:	11 f0       	breq	.+4      	; 0x6ba <_ZN5Print5writeEPKhj+0x3e>
 6b6:	21 96       	adiw	r28, 0x01	; 1
 6b8:	ee cf       	rjmp	.-36     	; 0x696 <_ZN5Print5writeEPKhj+0x1a>
 6ba:	7e 01       	movw	r14, r28
 6bc:	c7 01       	movw	r24, r14
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	08 95       	ret

000006d0 <_ZN5Print5writeEPKc>:
 6d0:	61 15       	cp	r22, r1
 6d2:	71 05       	cpc	r23, r1
 6d4:	79 f0       	breq	.+30     	; 0x6f4 <_ZN5Print5writeEPKc+0x24>
 6d6:	fb 01       	movw	r30, r22
 6d8:	01 90       	ld	r0, Z+
 6da:	00 20       	and	r0, r0
 6dc:	e9 f7       	brne	.-6      	; 0x6d8 <_ZN5Print5writeEPKc+0x8>
 6de:	31 97       	sbiw	r30, 0x01	; 1
 6e0:	af 01       	movw	r20, r30
 6e2:	46 1b       	sub	r20, r22
 6e4:	57 0b       	sbc	r21, r23
 6e6:	dc 01       	movw	r26, r24
 6e8:	ed 91       	ld	r30, X+
 6ea:	fc 91       	ld	r31, X
 6ec:	02 80       	ldd	r0, Z+2	; 0x02
 6ee:	f3 81       	ldd	r31, Z+3	; 0x03
 6f0:	e0 2d       	mov	r30, r0
 6f2:	19 94       	eijmp
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	08 95       	ret

000006fa <_ZN5Print5printEPKc>:
 6fa:	ea cf       	rjmp	.-44     	; 0x6d0 <_ZN5Print5writeEPKc>

000006fc <_ZN5Print11printNumberEmh>:
 6fc:	8f 92       	push	r8
 6fe:	9f 92       	push	r9
 700:	af 92       	push	r10
 702:	bf 92       	push	r11
 704:	ef 92       	push	r14
 706:	ff 92       	push	r15
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	a1 97       	sbiw	r28, 0x21	; 33
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	7c 01       	movw	r14, r24
 722:	fa 01       	movw	r30, r20
 724:	cb 01       	movw	r24, r22
 726:	19 a2       	std	Y+33, r1	; 0x21
 728:	22 30       	cpi	r18, 0x02	; 2
 72a:	08 f4       	brcc	.+2      	; 0x72e <_ZN5Print11printNumberEmh+0x32>
 72c:	2a e0       	ldi	r18, 0x0A	; 10
 72e:	8e 01       	movw	r16, r28
 730:	0f 5d       	subi	r16, 0xDF	; 223
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	82 2e       	mov	r8, r18
 736:	91 2c       	mov	r9, r1
 738:	a1 2c       	mov	r10, r1
 73a:	b1 2c       	mov	r11, r1
 73c:	bf 01       	movw	r22, r30
 73e:	a5 01       	movw	r20, r10
 740:	94 01       	movw	r18, r8
 742:	e0 d0       	rcall	.+448    	; 0x904 <__udivmodsi4>
 744:	f9 01       	movw	r30, r18
 746:	ca 01       	movw	r24, r20
 748:	01 50       	subi	r16, 0x01	; 1
 74a:	11 09       	sbc	r17, r1
 74c:	6a 30       	cpi	r22, 0x0A	; 10
 74e:	10 f4       	brcc	.+4      	; 0x754 <_ZN5Print11printNumberEmh+0x58>
 750:	60 5d       	subi	r22, 0xD0	; 208
 752:	01 c0       	rjmp	.+2      	; 0x756 <_ZN5Print11printNumberEmh+0x5a>
 754:	69 5c       	subi	r22, 0xC9	; 201
 756:	d8 01       	movw	r26, r16
 758:	6c 93       	st	X, r22
 75a:	23 2b       	or	r18, r19
 75c:	24 2b       	or	r18, r20
 75e:	25 2b       	or	r18, r21
 760:	69 f7       	brne	.-38     	; 0x73c <_ZN5Print11printNumberEmh+0x40>
 762:	b8 01       	movw	r22, r16
 764:	c7 01       	movw	r24, r14
 766:	b4 df       	rcall	.-152    	; 0x6d0 <_ZN5Print5writeEPKc>
 768:	a1 96       	adiw	r28, 0x21	; 33
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	de bf       	out	0x3e, r29	; 62
 770:	0f be       	out	0x3f, r0	; 63
 772:	cd bf       	out	0x3d, r28	; 61
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	bf 90       	pop	r11
 782:	af 90       	pop	r10
 784:	9f 90       	pop	r9
 786:	8f 90       	pop	r8
 788:	08 95       	ret

0000078a <_ZN5Print5printEmi>:
 78a:	21 15       	cp	r18, r1
 78c:	31 05       	cpc	r19, r1
 78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN5Print5printEmi+0x16>
 790:	dc 01       	movw	r26, r24
 792:	ed 91       	ld	r30, X+
 794:	fc 91       	ld	r31, X
 796:	01 90       	ld	r0, Z+
 798:	f0 81       	ld	r31, Z
 79a:	e0 2d       	mov	r30, r0
 79c:	64 2f       	mov	r22, r20
 79e:	19 94       	eijmp
 7a0:	ad cf       	rjmp	.-166    	; 0x6fc <_ZN5Print11printNumberEmh>

000007a2 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
 7a2:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
 7a4:	ab 01       	movw	r20, r22
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	ef cf       	rjmp	.-34     	; 0x78a <_ZN5Print5printEmi>

000007ac <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <timer0_millis>
 7c6:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <timer0_millis+0x1>
 7ca:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <timer0_millis+0x2>
 7ce:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <timer0_millis+0x3>
 7d2:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <timer0_fract>
 7d6:	23 e0       	ldi	r18, 0x03	; 3
 7d8:	23 0f       	add	r18, r19
 7da:	2d 37       	cpi	r18, 0x7D	; 125
 7dc:	20 f4       	brcc	.+8      	; 0x7e6 <__vector_23+0x3a>
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	a1 1d       	adc	r26, r1
 7e2:	b1 1d       	adc	r27, r1
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__vector_23+0x44>
 7e6:	26 e8       	ldi	r18, 0x86	; 134
 7e8:	23 0f       	add	r18, r19
 7ea:	02 96       	adiw	r24, 0x02	; 2
 7ec:	a1 1d       	adc	r26, r1
 7ee:	b1 1d       	adc	r27, r1
 7f0:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <timer0_fract>
 7f4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <timer0_millis>
 7f8:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <timer0_millis+0x1>
 7fc:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <timer0_millis+0x2>
 800:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <timer0_millis+0x3>
 804:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timer0_overflow_count>
 808:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timer0_overflow_count+0x1>
 80c:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timer0_overflow_count+0x2>
 810:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timer0_overflow_count+0x3>
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	a1 1d       	adc	r26, r1
 818:	b1 1d       	adc	r27, r1
 81a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <timer0_overflow_count>
 81e:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <timer0_overflow_count+0x1>
 822:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <timer0_overflow_count+0x2>
 826:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <timer0_overflow_count+0x3>
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	3f 91       	pop	r19
 834:	2f 91       	pop	r18
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	0f 90       	pop	r0
 83c:	1f 90       	pop	r1
 83e:	18 95       	reti

00000840 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 840:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 842:	84 b5       	in	r24, 0x24	; 36
 844:	82 60       	ori	r24, 0x02	; 2
 846:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 848:	84 b5       	in	r24, 0x24	; 36
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 84e:	85 b5       	in	r24, 0x25	; 37
 850:	82 60       	ori	r24, 0x02	; 2
 852:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 854:	85 b5       	in	r24, 0x25	; 37
 856:	81 60       	ori	r24, 0x01	; 1
 858:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 85a:	ee e6       	ldi	r30, 0x6E	; 110
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	81 60       	ori	r24, 0x01	; 1
 862:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 864:	e1 e8       	ldi	r30, 0x81	; 129
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 86a:	80 81       	ld	r24, Z
 86c:	82 60       	ori	r24, 0x02	; 2
 86e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 870:	80 81       	ld	r24, Z
 872:	81 60       	ori	r24, 0x01	; 1
 874:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 876:	e0 e8       	ldi	r30, 0x80	; 128
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 880:	e1 eb       	ldi	r30, 0xB1	; 177
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	84 60       	ori	r24, 0x04	; 4
 888:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 88a:	e0 eb       	ldi	r30, 0xB0	; 176
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	81 60       	ori	r24, 0x01	; 1
 892:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 894:	e1 e9       	ldi	r30, 0x91	; 145
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	82 60       	ori	r24, 0x02	; 2
 89c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 89e:	80 81       	ld	r24, Z
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 8a4:	e0 e9       	ldi	r30, 0x90	; 144
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	81 60       	ori	r24, 0x01	; 1
 8ac:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 8ae:	e1 ea       	ldi	r30, 0xA1	; 161
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 8b8:	80 81       	ld	r24, Z
 8ba:	81 60       	ori	r24, 0x01	; 1
 8bc:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 8be:	e0 ea       	ldi	r30, 0xA0	; 160
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 8c8:	e1 e2       	ldi	r30, 0x21	; 33
 8ca:	f1 e0       	ldi	r31, 0x01	; 1
 8cc:	80 81       	ld	r24, Z
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 8d2:	80 81       	ld	r24, Z
 8d4:	81 60       	ori	r24, 0x01	; 1
 8d6:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 8d8:	e0 e2       	ldi	r30, 0x20	; 32
 8da:	f1 e0       	ldi	r31, 0x01	; 1
 8dc:	80 81       	ld	r24, Z
 8de:	81 60       	ori	r24, 0x01	; 1
 8e0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8e2:	ea e7       	ldi	r30, 0x7A	; 122
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	84 60       	ori	r24, 0x04	; 4
 8ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8ec:	80 81       	ld	r24, Z
 8ee:	82 60       	ori	r24, 0x02	; 2
 8f0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8f2:	80 81       	ld	r24, Z
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8f8:	80 81       	ld	r24, Z
 8fa:	80 68       	ori	r24, 0x80	; 128
 8fc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8fe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 902:	08 95       	ret

00000904 <__udivmodsi4>:
 904:	a1 e2       	ldi	r26, 0x21	; 33
 906:	1a 2e       	mov	r1, r26
 908:	aa 1b       	sub	r26, r26
 90a:	bb 1b       	sub	r27, r27
 90c:	fd 01       	movw	r30, r26
 90e:	0d c0       	rjmp	.+26     	; 0x92a <__udivmodsi4_ep>

00000910 <__udivmodsi4_loop>:
 910:	aa 1f       	adc	r26, r26
 912:	bb 1f       	adc	r27, r27
 914:	ee 1f       	adc	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	a2 17       	cp	r26, r18
 91a:	b3 07       	cpc	r27, r19
 91c:	e4 07       	cpc	r30, r20
 91e:	f5 07       	cpc	r31, r21
 920:	20 f0       	brcs	.+8      	; 0x92a <__udivmodsi4_ep>
 922:	a2 1b       	sub	r26, r18
 924:	b3 0b       	sbc	r27, r19
 926:	e4 0b       	sbc	r30, r20
 928:	f5 0b       	sbc	r31, r21

0000092a <__udivmodsi4_ep>:
 92a:	66 1f       	adc	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	1a 94       	dec	r1
 934:	69 f7       	brne	.-38     	; 0x910 <__udivmodsi4_loop>
 936:	60 95       	com	r22
 938:	70 95       	com	r23
 93a:	80 95       	com	r24
 93c:	90 95       	com	r25
 93e:	9b 01       	movw	r18, r22
 940:	ac 01       	movw	r20, r24
 942:	bd 01       	movw	r22, r26
 944:	cf 01       	movw	r24, r30
 946:	08 95       	ret

00000948 <__tablejump2__>:
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	88 1f       	adc	r24, r24
 94e:	8b bf       	out	0x3b, r24	; 59
 950:	07 90       	elpm	r0, Z+
 952:	f6 91       	elpm	r31, Z
 954:	e0 2d       	mov	r30, r0
 956:	19 94       	eijmp

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
